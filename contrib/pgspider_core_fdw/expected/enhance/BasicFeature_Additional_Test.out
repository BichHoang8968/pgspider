------------------------------Change time setting-----------------------------
SET datestyle TO "ISO, YMD";
SET timezone TO +00;
SET intervalstyle to "postgres";
------------------------------BasicFeature_Additional_Test-----------------------------
-- Testcase 1:
explain (verbose, costs off) SELECT count(c1), count(c2), count(c3), count(c4) FROM tb_influx GROUP BY c1,c2 ORDER BY 1,2,3,4;
                                               QUERY PLAN                                               
--------------------------------------------------------------------------------------------------------
 Sort
   Output: (count(c1)), (count(c2)), (count(c3)), (count(c4)), c1, c2
   Sort Key: (count(tb_influx.c1)), (count(tb_influx.c2)), (count(tb_influx.c3)), (count(tb_influx.c4))
   ->  HashAggregate
         Output: count(c1), count(c2), count(c3), count(c4), c1, c2
         Group Key: tb_influx.c1, tb_influx.c2
         ->  Foreign Scan on public.tb_influx
               Output: c1, c2, c3, c4
               Node: influx1 / Status: Alive
                 InfluxDB query: SELECT "c1", "c2", "c3", "c4" FROM "tb_influx"
               Node: influx2 / Status: Alive
                 InfluxDB query: SELECT "c1", "c2", "c3", "c4" FROM "tb_influx"
(12 rows)

-- Testcase 2:
SELECT count(c1), count(c2), count(c3), count(c4) FROM tb_influx GROUP BY c1,c2 ORDER BY 1,2,3,4;
 count | count | count | count 
-------+-------+-------+-------
     1 |     1 |     1 |     1
     1 |     1 |     1 |     1
     1 |     1 |     1 |     1
     1 |     1 |     1 |     1
     1 |     1 |     1 |     1
     1 |     1 |     1 |     1
     1 |     1 |     1 |     1
     1 |     1 |     1 |     1
     1 |     1 |     1 |     1
     2 |     2 |     2 |     2
     2 |     2 |     2 |     2
     2 |     2 |     2 |     2
     2 |     2 |     2 |     2
     2 |     2 |     2 |     2
     2 |     2 |     2 |     2
(15 rows)

-- Testcase 3:
explain (verbose, costs off) SELECT max(c4), min(c5), avg(c4), count(c5), sum(c5 ORDER BY c5), sum(c4) FROM tb_influx GROUP BY c1 ORDER BY 1,2,3,4,5,6;
                                                                            QUERY PLAN                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: (max(c4)), (min(c5)), (avg(c4)), (count(c5)), (sum(c5 ORDER BY c5)), (sum(c4)), c1
   Sort Key: (max(tb_influx.c4)), (min(tb_influx.c5)), (avg(tb_influx.c4)), (count(tb_influx.c5)), (sum(tb_influx.c5 ORDER BY tb_influx.c5)), (sum(tb_influx.c4))
   ->  GroupAggregate
         Output: max(c4), min(c5), avg(c4), count(c5), sum(c5 ORDER BY c5), sum(c4), c1
         Group Key: tb_influx.c1
         ->  Sort
               Output: c1, c4, c5
               Sort Key: tb_influx.c1
               ->  Foreign Scan on public.tb_influx
                     Output: c1, c4, c5
                     Node: influx1 / Status: Alive
                       InfluxDB query: SELECT "c1", "c4", "c5" FROM "tb_influx"
                     Node: influx2 / Status: Alive
                       InfluxDB query: SELECT "c1", "c4", "c5" FROM "tb_influx"
(15 rows)

-- Testcase 4:
SELECT max(c4), min(c5), avg(c4), count(c5), sum(c5 ORDER BY c5), sum(c4) FROM tb_influx GROUP BY c1 ORDER BY 1,2,3,4,5,6;
 max  |   min   |          avg          | count |   sum   |  sum  
------+---------+-----------------------+-------+---------+-------
 -900 | -1210.5 | -910.0000000000000000 |     2 |   -2411 | -1820
 -700 |  -710.8 | -710.0000000000000000 |     2 | -1411.6 | -1420
  100 |  -910.5 | -355.0000000000000000 |     4 |   -1609 | -1420
  200 |   200.1 |  200.0000000000000000 |     1 |   200.1 |   200
  320 |   201.1 |  270.0000000000000000 |     2 |   511.6 |   540
  420 |    -0.5 |  280.0000000000000000 |     4 |  1110.4 |  1120
  520 |   -10.5 |  341.3333333333333333 |     3 |   999.9 |  1024
  620 |   -10.5 |  409.3333333333333333 |     3 |  1200.5 |  1228
(8 rows)

-- Testcase 5:
SELECT min(c4), max(c5), avg(c4), count(c5), count(c2), count(c1) FROM tb_influx WHERE c4>0 AND c6=true OR c5>500 GROUP BY c1 ORDER BY 1,2,3,4,5,6;
 min |  max  |         avg          | count | count | count 
-----+-------+----------------------+-------+-------+-------
 100 | 100.5 | 100.0000000000000000 |     1 |     1 |     1
 220 | 201.1 | 220.0000000000000000 |     1 |     1 |     1
 420 | 410.2 | 420.0000000000000000 |     1 |     1 |     1
 500 | 510.2 | 510.0000000000000000 |     2 |     2 |     2
 600 | 610.5 | 610.0000000000000000 |     2 |     2 |     2
(5 rows)

-- Testcase 6:
explain (verbose, costs off) SELECT count(distinct c4) FROM tb_influx GROUP BY c1 ORDER BY 1;
                                QUERY PLAN                                
--------------------------------------------------------------------------
 Sort
   Output: (count(DISTINCT c4)), c1
   Sort Key: (count(DISTINCT tb_influx.c4))
   ->  GroupAggregate
         Output: count(DISTINCT c4), c1
         Group Key: tb_influx.c1
         ->  Sort
               Output: c1, c4
               Sort Key: tb_influx.c1
               ->  Foreign Scan on public.tb_influx
                     Output: c1, c4
                     Node: influx1 / Status: Alive
                       InfluxDB query: SELECT "c1", "c4" FROM "tb_influx"
                     Node: influx2 / Status: Alive
                       InfluxDB query: SELECT "c1", "c4" FROM "tb_influx"
(15 rows)

-- Testcase 7:
SELECT count(distinct c4) FROM tb_influx GROUP BY c1 ORDER BY 1;
 count 
-------
     1
     2
     2
     2
     3
     3
     3
     4
(8 rows)

-- Testcase 8:
explain (verbose, costs off) SELECT count(c2), bit_and(c4), bit_or(c4), bool_and(c6) FROM tb_influx GROUP BY c1 ORDER BY 1,2,3,4;
                                                  QUERY PLAN                                                  
--------------------------------------------------------------------------------------------------------------
 Sort
   Output: (count(c2)), (bit_and(c4)), (bit_or(c4)), (bool_and(c6)), c1
   Sort Key: (count(tb_influx.c2)), (bit_and(tb_influx.c4)), (bit_or(tb_influx.c4)), (bool_and(tb_influx.c6))
   ->  HashAggregate
         Output: count(c2), bit_and(c4), bit_or(c4), bool_and(c6), c1
         Group Key: tb_influx.c1
         ->  Foreign Scan on public.tb_influx
               Output: c1, c2, c4, c6
               Node: influx1 / Status: Alive
                 InfluxDB query: SELECT "c1", "c2", "c4", "c6" FROM "tb_influx"
               Node: influx2 / Status: Alive
                 InfluxDB query: SELECT "c1", "c2", "c4", "c6" FROM "tb_influx"
(12 rows)

-- Testcase 9:
SELECT count(c2), bit_and(c4), bit_or(c4), bool_and(c6) FROM tb_influx GROUP BY c1 ORDER BY 1,2,3,4;
 count | bit_and | bit_or | bool_and 
-------+---------+--------+----------
     1 |     200 |    200 | f
     2 |    -920 |   -900 | t
     2 |    -768 |   -652 | t
     2 |      64 |    476 | f
     3 |       0 |   1020 | f
     3 |       8 |    636 | f
     4 |       0 |    444 | f
     4 |      64 |   -788 | f
(8 rows)

-- Testcase 10:
explain (verbose, costs off) SELECT count(c5) FROM tb_influx WHERE time > '2020-01-10 00:00:00' AND time < '2020-01-20 00:00:00' GROUP BY influx_time(time, interval '1d5h30m') ORDER BY 1;
                                                                QUERY PLAN                                                                
------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: (count(c5)), (influx_time("time", '1 day 05:30:00'::interval))
   Sort Key: (count(tb_influx.c5))
   ->  HashAggregate
         Output: count(c5), (influx_time("time", '1 day 05:30:00'::interval))
         Group Key: influx_time(tb_influx."time", '1 day 05:30:00'::interval)
         ->  Foreign Scan on public.tb_influx
               Output: influx_time("time", '1 day 05:30:00'::interval), c5
               Node: influx1 / Status: Alive
                 InfluxDB query: SELECT "c5" FROM "tb_influx" WHERE ((time > '2020-01-10 00:00:00')) AND ((time < '2020-01-20 00:00:00'))
               Node: influx2 / Status: Alive
                 InfluxDB query: SELECT "c5" FROM "tb_influx" WHERE ((time > '2020-01-10 00:00:00')) AND ((time < '2020-01-20 00:00:00'))
(12 rows)

-- Testcase 11:
SELECT count(c5) FROM tb_influx WHERE time > '2020-01-10 00:00:00' AND time < '2020-01-20 00:00:00' GROUP BY influx_time(time, interval '1d5h30m') ORDER BY 1;
ERROR:  Cannot execute this function in PostgreSQL
CONTEXT:  PL/pgSQL function influx_time(timestamp with time zone,interval) line 3 at RAISE
-- Testcase 12:
explain (verbose, costs off) SELECT max(c4), min(c5), avg(c4), count(c1), sum(c5 ORDER BY c5), sum(c4) FROM tb_influx WHERE time > '2020-01-10 00:00:00' AND time < '2020-01-15 00:00:00' GROUP BY influx_time(time, interval '1d5h30m') ORDER BY 1,2,3,4,5,6;
                                                                            QUERY PLAN                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: (max(c4)), (min(c5)), (avg(c4)), (count(c1)), (sum(c5 ORDER BY c5)), (sum(c4)), (influx_time("time", '1 day 05:30:00'::interval))
   Sort Key: (max(tb_influx.c4)), (min(tb_influx.c5)), (avg(tb_influx.c4)), (count(tb_influx.c1)), (sum(tb_influx.c5 ORDER BY tb_influx.c5)), (sum(tb_influx.c4))
   ->  GroupAggregate
         Output: max(c4), min(c5), avg(c4), count(c1), sum(c5 ORDER BY c5), sum(c4), (influx_time("time", '1 day 05:30:00'::interval))
         Group Key: (influx_time(tb_influx."time", '1 day 05:30:00'::interval))
         ->  Sort
               Output: (influx_time("time", '1 day 05:30:00'::interval)), c4, c5, c1
               Sort Key: (influx_time(tb_influx."time", '1 day 05:30:00'::interval))
               ->  Foreign Scan on public.tb_influx
                     Output: influx_time("time", '1 day 05:30:00'::interval), c4, c5, c1
                     Node: influx1 / Status: Alive
                       InfluxDB query: SELECT "c1", "c4", "c5" FROM "tb_influx" WHERE ((time > '2020-01-10 00:00:00')) AND ((time < '2020-01-15 00:00:00'))
                     Node: influx2 / Status: Alive
                       InfluxDB query: SELECT "c1", "c4", "c5" FROM "tb_influx" WHERE ((time > '2020-01-10 00:00:00')) AND ((time < '2020-01-15 00:00:00'))
(15 rows)

-- Testcase 13:
SELECT max(c4), min(c5), avg(c4), count(c1), sum(c5 ORDER BY c5), sum(c4) FROM tb_influx WHERE time > '2020-01-10 00:00:00' AND time < '2020-01-15 00:00:00' GROUP BY influx_time(time, interval '1d5h30m') ORDER BY 1,2,3,4,5,6;
ERROR:  Cannot execute this function in PostgreSQL
CONTEXT:  PL/pgSQL function influx_time(timestamp with time zone,interval) line 3 at RAISE
-- Testcase 14:
explain (verbose, costs off) SELECT avg(c5), max(c4), sum(c5 ORDER BY c5) FROM tb_influx WHERE time > '2020-01-10 00:00:00' AND time < '2020-01-15 00:00:00' GROUP BY influx_time(time, interval '2d'), c1 ORDER BY 1,2,3;
                                                                         QUERY PLAN                                                                         
------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: (avg(c5)), (max(c4)), (sum(c5 ORDER BY c5)), (influx_time("time", '2 days'::interval)), c1
   Sort Key: (avg(tb_influx.c5)), (max(tb_influx.c4)), (sum(tb_influx.c5 ORDER BY tb_influx.c5))
   ->  GroupAggregate
         Output: avg(c5), max(c4), sum(c5 ORDER BY c5), (influx_time("time", '2 days'::interval)), c1
         Group Key: (influx_time(tb_influx."time", '2 days'::interval)), tb_influx.c1
         ->  Sort
               Output: (influx_time("time", '2 days'::interval)), c1, c5, c4
               Sort Key: (influx_time(tb_influx."time", '2 days'::interval)), tb_influx.c1
               ->  Foreign Scan on public.tb_influx
                     Output: influx_time("time", '2 days'::interval), c1, c5, c4
                     Node: influx1 / Status: Alive
                       InfluxDB query: SELECT "c1", "c4", "c5" FROM "tb_influx" WHERE ((time > '2020-01-10 00:00:00')) AND ((time < '2020-01-15 00:00:00'))
                     Node: influx2 / Status: Alive
                       InfluxDB query: SELECT "c1", "c4", "c5" FROM "tb_influx" WHERE ((time > '2020-01-10 00:00:00')) AND ((time < '2020-01-15 00:00:00'))
(15 rows)

-- Testcase 15:
SELECT avg(c5), max(c4), sum(c5 ORDER BY c5) FROM tb_influx WHERE time > '2020-01-10 00:00:00' AND time < '2020-01-15 00:00:00' GROUP BY influx_time(time, interval '2d'), c1 ORDER BY 1,2,3;
ERROR:  Cannot execute this function in PostgreSQL
CONTEXT:  PL/pgSQL function influx_time(timestamp with time zone,interval) line 3 at RAISE
-- Testcase 16:
SELECT count(c1), bit_and(c4) FROM tb_influx GROUP BY influx_time(time, interval '2d') ORDER BY 1;
ERROR:  Cannot execute this function in PostgreSQL
CONTEXT:  PL/pgSQL function influx_time(timestamp with time zone,interval) line 3 at RAISE
-- Testcase 17:
explain (verbose, costs off) SELECT max(c4), min(c5), avg(c4), sum(c5 ORDER BY c5), count(c4) FROM tb_influx WHERE time > '2020-01-10 00:00:00' AND time < '2020-01-15 00:00:00' GROUP BY influx_time(time, interval '1d', interval '10h30m') ORDER BY 1,2,3,4,5;
                                                                      QUERY PLAN                                                                      
------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: (max(c4)), (min(c5)), (avg(c4)), (sum(c5 ORDER BY c5)), (count(c4)), (influx_time("time", '1 day'::interval, '10:30:00'::interval))
   Sort Key: (max(tb_influx.c4)), (min(tb_influx.c5)), (avg(tb_influx.c4)), (sum(tb_influx.c5 ORDER BY tb_influx.c5)), (count(tb_influx.c4))
   ->  GroupAggregate
         Output: max(c4), min(c5), avg(c4), sum(c5 ORDER BY c5), count(c4), (influx_time("time", '1 day'::interval, '10:30:00'::interval))
         Group Key: (influx_time(tb_influx."time", '1 day'::interval, '10:30:00'::interval))
         ->  Sort
               Output: (influx_time("time", '1 day'::interval, '10:30:00'::interval)), c4, c5
               Sort Key: (influx_time(tb_influx."time", '1 day'::interval, '10:30:00'::interval))
               ->  Foreign Scan on public.tb_influx
                     Output: influx_time("time", '1 day'::interval, '10:30:00'::interval), c4, c5
                     Node: influx1 / Status: Alive
                       InfluxDB query: SELECT "c4", "c5" FROM "tb_influx" WHERE ((time > '2020-01-10 00:00:00')) AND ((time < '2020-01-15 00:00:00'))
                     Node: influx2 / Status: Alive
                       InfluxDB query: SELECT "c4", "c5" FROM "tb_influx" WHERE ((time > '2020-01-10 00:00:00')) AND ((time < '2020-01-15 00:00:00'))
(15 rows)

-- Testcase 18:
SELECT max(c4), min(c5), avg(c4), sum(c5 ORDER BY c5), count(c4) FROM tb_influx WHERE time > '2020-01-10 00:00:00' AND time < '2020-01-15 00:00:00' GROUP BY influx_time(time, interval '1d', interval '10h30m') ORDER BY 1,2,3,4,5;
ERROR:  Cannot execute this function in PostgreSQL
CONTEXT:  PL/pgSQL function influx_time(timestamp with time zone,interval,interval) line 3 at RAISE
-- Testcase 19:
explain (verbose, costs off) SELECT count(c4) FROM tb_influx GROUP BY time ORDER BY 1;
                          QUERY PLAN                          
--------------------------------------------------------------
 Sort
   Output: (count(c4)), "time"
   Sort Key: (count(tb_influx.c4))
   ->  HashAggregate
         Output: count(c4), "time"
         Group Key: tb_influx."time"
         ->  Foreign Scan on public.tb_influx
               Output: "time", c4
               Node: influx1 / Status: Alive
                 InfluxDB query: SELECT "c4" FROM "tb_influx"
               Node: influx2 / Status: Alive
                 InfluxDB query: SELECT "c4" FROM "tb_influx"
(12 rows)

-- Testcase 20:
SELECT count(c4) FROM tb_influx GROUP BY time ORDER BY 1;
 count 
-------
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
(21 rows)

-- Testcase 21:
explain (verbose, costs off) SELECT count(c3) FROM tb_influx GROUP BY c4 ORDER BY 1;
                             QUERY PLAN                             
--------------------------------------------------------------------
 Sort
   Output: (count(c3)), c4
   Sort Key: (count(tb_influx.c3))
   ->  HashAggregate
         Output: count(c3), c4
         Group Key: tb_influx.c4
         ->  Foreign Scan on public.tb_influx
               Output: c4, c3
               Node: influx1 / Status: Alive
                 InfluxDB query: SELECT "c3", "c4" FROM "tb_influx"
               Node: influx2 / Status: Alive
                 InfluxDB query: SELECT "c3", "c4" FROM "tb_influx"
(12 rows)

-- Testcase 22:
SELECT count(c3) FROM tb_influx GROUP BY c4 ORDER BY 1;
 count 
-------
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     1
     2
(20 rows)

-- Testcase 23:
explain (verbose, costs off) SELECT min(time), max(time), count(time) FROM tb_influx ORDER BY 1,2,3;
                                       QUERY PLAN                                        
-----------------------------------------------------------------------------------------
 Sort
   Output: (min("time")), (max("time")), (count("time"))
   Sort Key: (min(tb_influx."time")), (max(tb_influx."time")), (count(tb_influx."time"))
   ->  Aggregate
         Output: min("time"), max("time"), count("time")
         ->  Foreign Scan on public.tb_influx
               Output: "time"
               Node: influx1 / Status: Alive
                 InfluxDB query: SELECT * FROM "tb_influx"
               Node: influx2 / Status: Alive
                 InfluxDB query: SELECT * FROM "tb_influx"
(11 rows)

-- Testcase 24:
SELECT min(time), max(time), count(time) FROM tb_influx ORDER BY 1,2,3;
          min           |          max           | count 
------------------------+------------------------+-------
 2020-01-08 01:00:00+00 | 2020-01-15 06:00:00+00 |    21
(1 row)

-- Testcase 25:
explain (verbose, costs off) SELECT min(time), max(time), count(time) FROM tb_influx GROUP BY c2 ORDER BY 1,2,3;
                                       QUERY PLAN                                        
-----------------------------------------------------------------------------------------
 Sort
   Output: (min("time")), (max("time")), (count("time")), c2
   Sort Key: (min(tb_influx."time")), (max(tb_influx."time")), (count(tb_influx."time"))
   ->  HashAggregate
         Output: min("time"), max("time"), count("time"), c2
         Group Key: tb_influx.c2
         ->  Foreign Scan on public.tb_influx
               Output: c2, "time"
               Node: influx1 / Status: Alive
                 InfluxDB query: SELECT "c2", "c3" FROM "tb_influx"
               Node: influx2 / Status: Alive
                 InfluxDB query: SELECT "c2", "c3" FROM "tb_influx"
(12 rows)

-- Testcase 26:
SELECT min(time), max(time), count(time) FROM tb_influx GROUP BY c2 ORDER BY 1,2,3;
          min           |          max           | count 
------------------------+------------------------+-------
 2020-01-08 01:00:00+00 | 2020-01-11 02:00:00+00 |     2
 2020-01-08 02:00:00+00 | 2020-01-11 12:00:00+00 |     2
 2020-01-08 03:00:00+00 | 2020-01-13 14:00:00+00 |     6
 2020-01-08 04:00:00+00 | 2020-01-08 04:00:00+00 |     1
 2020-01-09 00:00:00+00 | 2020-01-15 06:00:00+00 |     3
 2020-01-09 20:00:00+00 | 2020-01-14 00:00:00+00 |     3
 2020-01-10 06:00:00+00 | 2020-01-14 20:00:00+00 |     3
 2020-01-10 16:00:00+00 | 2020-01-10 16:00:00+00 |     1
(8 rows)

-- Testcase 27:
SELECT min(time), max(time), count(time) FROM tb_influx GROUP BY c2 HAVING (c2!='HELLO' OR c2!='Canada' AND count(c2)>1) ORDER BY 1,2,3;
          min           |          max           | count 
------------------------+------------------------+-------
 2020-01-08 01:00:00+00 | 2020-01-11 02:00:00+00 |     2
 2020-01-08 02:00:00+00 | 2020-01-11 12:00:00+00 |     2
 2020-01-08 03:00:00+00 | 2020-01-13 14:00:00+00 |     6
 2020-01-08 04:00:00+00 | 2020-01-08 04:00:00+00 |     1
 2020-01-09 00:00:00+00 | 2020-01-15 06:00:00+00 |     3
 2020-01-09 20:00:00+00 | 2020-01-14 00:00:00+00 |     3
 2020-01-10 06:00:00+00 | 2020-01-14 20:00:00+00 |     3
 2020-01-10 16:00:00+00 | 2020-01-10 16:00:00+00 |     1
(8 rows)

-- Testcase 28:
SELECT min(time), max(time), count(time) FROM tb_influx GROUP BY c4 ORDER BY 1,2,3;
          min           |          max           | count 
------------------------+------------------------+-------
 2020-01-08 01:00:00+00 | 2020-01-11 02:00:00+00 |     2
 2020-01-08 02:00:00+00 | 2020-01-08 02:00:00+00 |     1
 2020-01-08 03:00:00+00 | 2020-01-08 03:00:00+00 |     1
 2020-01-08 04:00:00+00 | 2020-01-08 04:00:00+00 |     1
 2020-01-08 14:00:00+00 | 2020-01-08 14:00:00+00 |     1
 2020-01-09 00:00:00+00 | 2020-01-09 00:00:00+00 |     1
 2020-01-09 10:00:00+00 | 2020-01-09 10:00:00+00 |     1
 2020-01-09 20:00:00+00 | 2020-01-09 20:00:00+00 |     1
 2020-01-10 06:00:00+00 | 2020-01-10 06:00:00+00 |     1
 2020-01-10 16:00:00+00 | 2020-01-10 16:00:00+00 |     1
 2020-01-11 12:00:00+00 | 2020-01-11 12:00:00+00 |     1
 2020-01-11 22:00:00+00 | 2020-01-11 22:00:00+00 |     1
 2020-01-12 08:00:00+00 | 2020-01-12 08:00:00+00 |     1
 2020-01-12 18:00:00+00 | 2020-01-12 18:00:00+00 |     1
 2020-01-13 04:00:00+00 | 2020-01-13 04:00:00+00 |     1
 2020-01-13 14:00:00+00 | 2020-01-13 14:00:00+00 |     1
 2020-01-14 00:00:00+00 | 2020-01-14 00:00:00+00 |     1
 2020-01-14 10:00:00+00 | 2020-01-14 10:00:00+00 |     1
 2020-01-14 20:00:00+00 | 2020-01-14 20:00:00+00 |     1
 2020-01-15 06:00:00+00 | 2020-01-15 06:00:00+00 |     1
(20 rows)

-- Testcase 29:
explain (verbose, costs off) SELECT count(c3), avg(c4), sum(c5 ORDER BY c5) FROM tb_influx GROUP BY c2 HAVING(avg(c4)<1000 AND sum(c5 ORDER BY c5)<1000) ORDER BY 1,2,3;
                                                            QUERY PLAN                                                            
----------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: (count(c3)), (avg(c4)), (sum(c5 ORDER BY c5)), c2
   Sort Key: (count(tb_influx.c3)), (avg(tb_influx.c4)), (sum(tb_influx.c5 ORDER BY tb_influx.c5))
   ->  GroupAggregate
         Output: count(c3), avg(c4), sum(c5 ORDER BY c5), c2
         Group Key: tb_influx.c2
         Filter: ((avg(tb_influx.c4) < '1000'::numeric) AND (sum(tb_influx.c5 ORDER BY tb_influx.c5) < '1000'::double precision))
         ->  Sort
               Output: c2, c3, c4, c5
               Sort Key: tb_influx.c2
               ->  Foreign Scan on public.tb_influx
                     Output: c2, c3, c4, c5
                     Node: influx1 / Status: Alive
                       InfluxDB query: SELECT "c2", "c3", "c4", "c5" FROM "tb_influx"
                     Node: influx2 / Status: Alive
                       InfluxDB query: SELECT "c2", "c3", "c4", "c5" FROM "tb_influx"
(16 rows)

-- Testcase 30:
SELECT count(c3), avg(c4), sum(c5 ORDER BY c5) FROM tb_influx GROUP BY c2 HAVING(avg(c4)<1000 AND sum(c5 ORDER BY c5)<1000) ORDER BY 1,2,3;
 count |          avg           |        sum         
-------+------------------------+--------------------
     1 | 0.00000000000000000000 |               -0.5
     1 |   400.0000000000000000 |              400.2
     2 |   100.0000000000000000 |                202
     2 |   210.0000000000000000 |              401.2
     3 |  -604.0000000000000000 |            -2421.5
     3 |  -400.0000000000000000 |            -1400.8
     6 |    36.6666666666666667 | 209.80000000000007
(7 rows)

-- Testcase 31:
explain (verbose, costs off) SELECT count(c4), sum(c5 ORDER BY c5), min(c4) FROM tb_influx GROUP BY c2 HAVING(c2!='Keywords' AND c2!='HELLO') ORDER BY 1,2,3;
                                                             QUERY PLAN                                                              
-------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: (count(c4)), (sum(c5 ORDER BY c5)), (min(c4)), c2
   Sort Key: (count(tb_influx.c4)), (sum(tb_influx.c5 ORDER BY tb_influx.c5)), (min(tb_influx.c4))
   ->  GroupAggregate
         Output: count(c4), sum(c5 ORDER BY c5), min(c4), c2
         Group Key: tb_influx.c2
         ->  Sort
               Output: c2, c4, c5
               Sort Key: tb_influx.c2
               ->  Foreign Scan on public.tb_influx
                     Output: c2, c4, c5
                     Node: influx1 / Status: Alive
                       InfluxDB query: SELECT "c2", "c4", "c5" FROM "tb_influx" WHERE (("c2" <> 'Keywords')) AND (("c2" <> 'HELLO'))
                     Node: influx2 / Status: Alive
                       InfluxDB query: SELECT "c2", "c4", "c5" FROM "tb_influx" WHERE (("c2" <> 'Keywords')) AND (("c2" <> 'HELLO'))
(15 rows)

-- Testcase 32:
SELECT count(c4), sum(c5 ORDER BY c5), min(c4) FROM tb_influx GROUP BY c2 HAVING(c2!='Keywords' AND c2!='HELLO') ORDER BY 1,2,3;
 count |   sum   | min  
-------+---------+------
     1 |    -0.5 |    0
     1 |   400.2 |  400
     2 |   401.2 |  200
     3 | -2421.5 | -920
     3 | -1400.8 | -820
     3 |  1200.5 |    4
(6 rows)

-- Testcase 33:
explain (verbose, costs off) SELECT count(c3), max(c4), sum(c4) FROM tb_influx GROUP BY c1,c2 HAVING(max(c1)!='HELLO' and count(c2)>1) ORDER BY 1,2,3;
                                      QUERY PLAN                                      
--------------------------------------------------------------------------------------
 Sort
   Output: (count(c3)), (max(c4)), (sum(c4)), c1, c2
   Sort Key: (count(tb_influx.c3)), (max(tb_influx.c4)), (sum(tb_influx.c4))
   ->  HashAggregate
         Output: count(c3), max(c4), sum(c4), c1, c2
         Group Key: tb_influx.c1, tb_influx.c2
         Filter: ((max(tb_influx.c1) <> 'HELLO'::text) AND (count(tb_influx.c2) > 1))
         ->  Foreign Scan on public.tb_influx
               Output: c1, c2, c3, c4
               Node: influx1 / Status: Alive
                 InfluxDB query: SELECT "c1", "c2", "c3", "c4" FROM "tb_influx"
               Node: influx2 / Status: Alive
                 InfluxDB query: SELECT "c1", "c2", "c3", "c4" FROM "tb_influx"
(13 rows)

-- Testcase 34:
SELECT count(c3), max(c4), sum(c4) FROM tb_influx GROUP BY c1,c2 HAVING(max(c1)!='HELLO' and count(c2)>1) ORDER BY 1,2,3;
 count | max  |  sum  
-------+------+-------
     2 | -900 | -1820
     2 | -800 | -1620
     2 | -700 | -1420
     2 |  100 |   200
     2 |  520 |  1020
     2 |  620 |  1220
(6 rows)

-- Testcase 35:
explain (verbose, costs off) SELECT count(c3), max(c4), sum(c4) FROM tb_influx GROUP BY c1,c2 HAVING(max(c1)<min(c2)) ORDER BY 1,2,3;
                                   QUERY PLAN                                   
--------------------------------------------------------------------------------
 Sort
   Output: (count(c3)), (max(c4)), (sum(c4)), c1, c2
   Sort Key: (count(tb_influx.c3)), (max(tb_influx.c4)), (sum(tb_influx.c4))
   ->  HashAggregate
         Output: count(c3), max(c4), sum(c4), c1, c2
         Group Key: tb_influx.c1, tb_influx.c2
         Filter: (max(tb_influx.c1) < min(tb_influx.c2))
         ->  Foreign Scan on public.tb_influx
               Output: c1, c2, c3, c4
               Node: influx1 / Status: Alive
                 InfluxDB query: SELECT "c1", "c2", "c3", "c4" FROM "tb_influx"
               Node: influx2 / Status: Alive
                 InfluxDB query: SELECT "c1", "c2", "c3", "c4" FROM "tb_influx"
(13 rows)

-- Testcase 36:
SELECT count(c3), max(c4), sum(c4) FROM tb_influx GROUP BY c1,c2 HAVING(max(c1)<min(c2)) ORDER BY 1,2,3;
 count | max  |  sum  
-------+------+-------
     1 |  200 |   200
     1 |  400 |   400
     1 |  420 |   420
     2 | -900 | -1820
     2 | -800 | -1620
     2 | -700 | -1420
     2 |  100 |   200
     2 |  620 |  1220
(8 rows)

