-- ===================================================================
-- create FDW objects
-- ===================================================================
CREATE EXTENSION postgres_fdw;
CREATE EXTENSION pgspider_core_fdw;
CREATE SERVER pgspider_srv FOREIGN DATA WRAPPER pgspider_core_fdw;
DO $d$
    BEGIN
        EXECUTE $$CREATE SERVER postgres_srv FOREIGN DATA WRAPPER postgres_fdw
            OPTIONS (host '127.0.0.1',
                     port '15432',
                     dbname 'postdb'
            )$$;
        EXECUTE $$CREATE SERVER postgres_srv2 FOREIGN DATA WRAPPER postgres_fdw
            OPTIONS (host '127.0.0.1',
                     port '15432',
                     dbname 'postdb'
            )$$;    
    END;
$d$;
CREATE USER MAPPING FOR public SERVER pgspider_srv
	OPTIONS (user 'postgres', password 'postgres');
CREATE USER MAPPING FOR public SERVER postgres_srv
	OPTIONS (user 'postgres', password 'postgres');
CREATE USER MAPPING FOR public SERVER postgres_srv2
	OPTIONS (user 'postgres', password 'postgres');
-- ===================================================================
-- create objects used through PostgreSQL FDW server
-- ===================================================================
CREATE TYPE user_enum AS ENUM ('foo', 'bar', 'buz');
CREATE SCHEMA "S 1";
---CREATE TABLE "S 1"."T 1" (
---	"C 1" int NOT NULL,
---	c2 int NOT NULL,
---	c3 text,
---	c4 timestamptz,
---	c5 timestamp,
---	c6 varchar(10),
---	c7 char(10),
---	c8 user_enum,
---	CONSTRAINT t1_pkey PRIMARY KEY ("C 1")
---);
---CREATE TABLE "S 1"."T 2" (
---	c1 int NOT NULL,
---	c2 text,
---	CONSTRAINT t2_pkey PRIMARY KEY (c1)
---);
---CREATE TABLE "S 1"."T 3" (
---	c1 int NOT NULL,
---	c2 int NOT NULL,
---	c3 text,
---	CONSTRAINT t3_pkey PRIMARY KEY (c1)
---);
---CREATE TABLE "S 1"."T 4" (
---	c1 int NOT NULL,
---	c2 int NOT NULL,
---	c3 text,
---	CONSTRAINT t4_pkey PRIMARY KEY (c1)
---);
-- Disable autovacuum for these tables to avoid unexpected effects of that
---ALTER TABLE "S 1"."T 1" SET (autovacuum_enabled = 'false');
---ALTER TABLE "S 1"."T 2" SET (autovacuum_enabled = 'false');
---ALTER TABLE "S 1"."T 3" SET (autovacuum_enabled = 'false');
---ALTER TABLE "S 1"."T 4" SET (autovacuum_enabled = 'false');
IMPORT FOREIGN SCHEMA "S 1" FROM SERVER postgres_srv INTO "S 1";
INSERT INTO "S 1"."T 1"
	SELECT id,
	       id % 10,
	       to_char(id, 'FM00000'),
	       '1970-01-01'::timestamptz + ((id % 100) || ' days')::interval,
	       '1970-01-01'::timestamp + ((id % 100) || ' days')::interval,
	       id % 10,
	       id % 10,
	       'foo'::user_enum
	FROM generate_series(1, 1000) id;
INSERT INTO "S 1"."T 2"
	SELECT id,
	       'AAA' || to_char(id, 'FM000')
	FROM generate_series(1, 100) id;
INSERT INTO "S 1"."T 3"
	SELECT id,
	       id + 1,
	       'AAA' || to_char(id, 'FM000')
	FROM generate_series(1, 100) id;
DELETE FROM "S 1"."T 3" WHERE c1 % 2 != 0;	-- delete for outer join tests
INSERT INTO "S 1"."T 4"
	SELECT id,
	       id + 1,
	       'AAA' || to_char(id, 'FM000')
	FROM generate_series(1, 100) id;
DELETE FROM "S 1"."T 4" WHERE c1 % 3 != 0;	-- delete for outer join tests
ANALYZE "S 1"."T 1";
ANALYZE "S 1"."T 2";
ANALYZE "S 1"."T 3";
ANALYZE "S 1"."T 4";
-- ===================================================================
-- create foreign tables
-- ===================================================================
CREATE FOREIGN TABLE ft1 (
	c0 int,
	c1 int NOT NULL,
	c2 int NOT NULL,
	c3 text,
	c4 timestamptz,
	c5 timestamp,
	c6 varchar(10),
	c7 char(10) default 'ft1',
	c8 user_enum,
	__spd_url text
) SERVER pgspider_srv;
ALTER FOREIGN TABLE ft1 DROP COLUMN c0;
CREATE FOREIGN TABLE ft1__postgres_srv__0 (
	c0 int,
	c1 int NOT NULL,
	c2 int NOT NULL,
	c3 text,
	c4 timestamptz,
	c5 timestamp,
	c6 varchar(10),
	c7 char(10) default 'ft1',
	c8 user_enum
) SERVER postgres_srv OPTIONS (schema_name 'S 1', table_name 'T 1');;
ALTER FOREIGN TABLE ft1__postgres_srv__0 DROP COLUMN c0;
CREATE FOREIGN TABLE ft2 (
	c1 int NOT NULL,
	c2 int NOT NULL,
	cx int,
	c3 text,
	c4 timestamptz,
	c5 timestamp,
	c6 varchar(10),
	c7 char(10) default 'ft2',
	c8 user_enum,
	__spd_url text
) SERVER pgspider_srv;
ALTER FOREIGN TABLE ft2 DROP COLUMN cx;
CREATE FOREIGN TABLE ft2__postgres_srv__0 (
	c1 int NOT NULL,
	c2 int NOT NULL,
	cx int,
	c3 text,
	c4 timestamptz,
	c5 timestamp,
	c6 varchar(10),
	c7 char(10) default 'ft2',
	c8 user_enum
) SERVER postgres_srv OPTIONS (schema_name 'S 1', table_name 'T 1');
ALTER FOREIGN TABLE ft2__postgres_srv__0 DROP COLUMN cx;
CREATE FOREIGN TABLE ft4 (
	c1 int NOT NULL,
	c2 int NOT NULL,
	c3 text,
	__spd_url text
) SERVER pgspider_srv;
CREATE FOREIGN TABLE ft4__postgres_srv__0 (
	c1 int NOT NULL,
	c2 int NOT NULL,
	c3 text
) SERVER postgres_srv OPTIONS (schema_name 'S 1', table_name 'T 3');
CREATE FOREIGN TABLE ft5 (
	c1 int NOT NULL,
	c2 int NOT NULL,
	c3 text,
	__spd_url text
) SERVER pgspider_srv;
CREATE FOREIGN TABLE ft5__postgres_srv__0 (
	c1 int NOT NULL,
	c2 int NOT NULL,
	c3 text
) SERVER postgres_srv OPTIONS (schema_name 'S 1', table_name 'T 4');
CREATE FOREIGN TABLE ft6 (
	c1 int NOT NULL,
	c2 int NOT NULL,
	c3 text,
	__spd_url text
) SERVER pgspider_srv;
CREATE FOREIGN TABLE ft6__postgres_srv2__0 (
	c1 int NOT NULL,
	c2 int NOT NULL,
	c3 text
) SERVER postgres_srv2 OPTIONS (schema_name 'S 1', table_name 'T 4');
-- ===================================================================
-- tests for validator
-- ===================================================================
-- requiressl, krbsrvname and gsslib are omitted because they depend on
-- configure options
--  ALTER SERVER pgspider_srv OPTIONS (
-- 	use_remote_estimate 'false',
-- 	updatable 'true',
-- 	fdw_startup_cost '123.456',
-- 	fdw_tuple_cost '0.123',
-- 	service 'value',
-- 	connect_timeout 'value',
-- 	dbname 'value',
-- 	host 'value',
-- 	hostaddr 'value',
-- 	port 'value',
-- 	--client_encoding 'value',
-- 	application_name 'value',
-- 	--fallback_application_name 'value',
-- 	keepalives 'value',
-- 	keepalives_idle 'value',
-- 	keepalives_interval 'value',
-- 	tcp_user_timeout 'value',
-- 	-- requiressl 'value',
-- 	sslcompression 'value',
-- 	sslmode 'value',
-- 	sslcert 'value',
-- 	sslkey 'value',
-- 	sslrootcert 'value',
-- 	sslcrl 'value'
-- 	--requirepeer 'value',
-- 	-- krbsrvname 'value',
-- 	-- gsslib 'value',
-- 	--replication 'value'
--);
-- Error, invalid list syntax
--  ALTER SERVER pgspider_srv OPTIONS (ADD extensions 'foo; bar');
-- OK but gets a warning
-- ALTER SERVER pgspider_srv OPTIONS (ADD extensions 'foo, bar');
-- ALTER SERVER pgspider_srv OPTIONS (DROP extensions);
ALTER USER MAPPING FOR public SERVER pgspider_srv
	OPTIONS (DROP user, DROP password);
ALTER FOREIGN TABLE ft1 ALTER COLUMN c1 OPTIONS (column_name 'C 1');
ALTER FOREIGN TABLE ft1__postgres_srv__0 ALTER COLUMN c1 OPTIONS (column_name 'C 1');
ALTER FOREIGN TABLE ft2 ALTER COLUMN c1 OPTIONS (column_name 'C 1');
ALTER FOREIGN TABLE ft2__postgres_srv__0 ALTER COLUMN c1 OPTIONS (column_name 'C 1');
\det+
                                        List of foreign tables
 Schema |         Table         |    Server     |              FDW options              | Description 
--------+-----------------------+---------------+---------------------------------------+-------------
 public | ft1                   | pgspider_srv  |                                       | 
 public | ft1__postgres_srv__0  | postgres_srv  | (schema_name 'S 1', table_name 'T 1') | 
 public | ft2                   | pgspider_srv  |                                       | 
 public | ft2__postgres_srv__0  | postgres_srv  | (schema_name 'S 1', table_name 'T 1') | 
 public | ft4                   | pgspider_srv  |                                       | 
 public | ft4__postgres_srv__0  | postgres_srv  | (schema_name 'S 1', table_name 'T 3') | 
 public | ft5                   | pgspider_srv  |                                       | 
 public | ft5__postgres_srv__0  | postgres_srv  | (schema_name 'S 1', table_name 'T 4') | 
 public | ft6                   | pgspider_srv  |                                       | 
 public | ft6__postgres_srv2__0 | postgres_srv2 | (schema_name 'S 1', table_name 'T 4') | 
(10 rows)

-- Test that alteration of server options causes reconnection
-- Remote's errors might be non-English, so hide them to ensure stable results
\set VERBOSITY terse
SELECT c3, c4 FROM ft1 ORDER BY c3, c1 LIMIT 1;  -- should work
  c3   |              c4              
-------+------------------------------
 00001 | Fri Jan 02 00:00:00 1970 PST
(1 row)

ALTER SERVER postgres_srv OPTIONS (SET dbname 'no such database');
SELECT c3, c4 FROM ft1 ORDER BY c3, c1 LIMIT 1;  -- should fail
ERROR:  could not connect to server "postgres_srv"
ERROR:  PGSpider can not get data from child node : postgres_srv
DO $d$
    BEGIN
        EXECUTE $$ALTER SERVER postgres_srv
            OPTIONS (SET dbname 'postdb')$$;
    END;
$d$;
SELECT c3, c4 FROM ft1 ORDER BY c3, c1 LIMIT 1;  -- should work again
  c3   |              c4              
-------+------------------------------
 00001 | Fri Jan 02 00:00:00 1970 PST
(1 row)

-- Test that alteration of user mapping options causes reconnection
-- ALTER USER MAPPING FOR CURRENT_USER SERVER postgres_srv
--   OPTIONS (ADD user 'no such user');
-- SELECT c3, c4 FROM ft1 ORDER BY c3, c1 LIMIT 1;  -- should fail
-- ALTER USER MAPPING FOR CURRENT_USER SERVER postgres_srv
--   OPTIONS (DROP user);
-- SELECT c3, c4 FROM ft1 ORDER BY c3, c1 LIMIT 1;  -- should work again
\set VERBOSITY default
-- Now we should be able to run ANALYZE.
-- To exercise multiple code paths, we use local stats on ft1
-- and remote-estimate mode on ft2.
ANALYZE ft1;
WARNING:  skipping "ft1" --- cannot analyze this foreign table
ALTER FOREIGN TABLE ft2 OPTIONS (use_remote_estimate 'true');
-- ===================================================================
-- simple queries
-- ===================================================================
-- single table without alias
EXPLAIN (COSTS OFF) SELECT * FROM ft1 ORDER BY c3, c1 OFFSET 100 LIMIT 10;
                    QUERY PLAN                    
--------------------------------------------------
 Limit
   ->  Sort
         Sort Key: c3, c1
         ->  Foreign Scan on ft1
               Node: postgres_srv / Status: Alive
(5 rows)

SELECT * FROM ft1 ORDER BY c3, c1 OFFSET 100 LIMIT 10;
 c1  | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8  |   __spd_url    
-----+----+-------+------------------------------+--------------------------+----+------------+-----+----------------
 101 |  1 | 00101 | Fri Jan 02 00:00:00 1970 PST | Fri Jan 02 00:00:00 1970 | 1  | 1          | foo | /postgres_srv/
 102 |  2 | 00102 | Sat Jan 03 00:00:00 1970 PST | Sat Jan 03 00:00:00 1970 | 2  | 2          | foo | /postgres_srv/
 103 |  3 | 00103 | Sun Jan 04 00:00:00 1970 PST | Sun Jan 04 00:00:00 1970 | 3  | 3          | foo | /postgres_srv/
 104 |  4 | 00104 | Mon Jan 05 00:00:00 1970 PST | Mon Jan 05 00:00:00 1970 | 4  | 4          | foo | /postgres_srv/
 105 |  5 | 00105 | Tue Jan 06 00:00:00 1970 PST | Tue Jan 06 00:00:00 1970 | 5  | 5          | foo | /postgres_srv/
 106 |  6 | 00106 | Wed Jan 07 00:00:00 1970 PST | Wed Jan 07 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 107 |  7 | 00107 | Thu Jan 08 00:00:00 1970 PST | Thu Jan 08 00:00:00 1970 | 7  | 7          | foo | /postgres_srv/
 108 |  8 | 00108 | Fri Jan 09 00:00:00 1970 PST | Fri Jan 09 00:00:00 1970 | 8  | 8          | foo | /postgres_srv/
 109 |  9 | 00109 | Sat Jan 10 00:00:00 1970 PST | Sat Jan 10 00:00:00 1970 | 9  | 9          | foo | /postgres_srv/
 110 |  0 | 00110 | Sun Jan 11 00:00:00 1970 PST | Sun Jan 11 00:00:00 1970 | 0  | 0          | foo | /postgres_srv/
(10 rows)

-- single table with alias - also test that tableoid sort is not pushed to remote side
EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 ORDER BY t1.c3, t1.c1, t1.tableoid OFFSET 100 LIMIT 10;
                                      QUERY PLAN                                       
---------------------------------------------------------------------------------------
 Limit
   Output: c1, c2, c3, c4, c5, c6, c7, c8, __spd_url, tableoid
   ->  Sort
         Output: c1, c2, c3, c4, c5, c6, c7, c8, __spd_url, tableoid
         Sort Key: t1.c3, t1.c1, t1.tableoid
         ->  Foreign Scan on public.ft1 t1
               Output: c1, c2, c3, c4, c5, c6, c7, c8, __spd_url, tableoid
               Node: postgres_srv / Status: Alive
                 Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1"
(9 rows)

SELECT * FROM ft1 t1 ORDER BY t1.c3, t1.c1, t1.tableoid OFFSET 100 LIMIT 10;
 c1  | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8  |   __spd_url    
-----+----+-------+------------------------------+--------------------------+----+------------+-----+----------------
 101 |  1 | 00101 | Fri Jan 02 00:00:00 1970 PST | Fri Jan 02 00:00:00 1970 | 1  | 1          | foo | /postgres_srv/
 102 |  2 | 00102 | Sat Jan 03 00:00:00 1970 PST | Sat Jan 03 00:00:00 1970 | 2  | 2          | foo | /postgres_srv/
 103 |  3 | 00103 | Sun Jan 04 00:00:00 1970 PST | Sun Jan 04 00:00:00 1970 | 3  | 3          | foo | /postgres_srv/
 104 |  4 | 00104 | Mon Jan 05 00:00:00 1970 PST | Mon Jan 05 00:00:00 1970 | 4  | 4          | foo | /postgres_srv/
 105 |  5 | 00105 | Tue Jan 06 00:00:00 1970 PST | Tue Jan 06 00:00:00 1970 | 5  | 5          | foo | /postgres_srv/
 106 |  6 | 00106 | Wed Jan 07 00:00:00 1970 PST | Wed Jan 07 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 107 |  7 | 00107 | Thu Jan 08 00:00:00 1970 PST | Thu Jan 08 00:00:00 1970 | 7  | 7          | foo | /postgres_srv/
 108 |  8 | 00108 | Fri Jan 09 00:00:00 1970 PST | Fri Jan 09 00:00:00 1970 | 8  | 8          | foo | /postgres_srv/
 109 |  9 | 00109 | Sat Jan 10 00:00:00 1970 PST | Sat Jan 10 00:00:00 1970 | 9  | 9          | foo | /postgres_srv/
 110 |  0 | 00110 | Sun Jan 11 00:00:00 1970 PST | Sun Jan 11 00:00:00 1970 | 0  | 0          | foo | /postgres_srv/
(10 rows)

-- whole-row reference
EXPLAIN (VERBOSE, COSTS OFF) SELECT t1 FROM ft1 t1 ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10;
                                      QUERY PLAN                                       
---------------------------------------------------------------------------------------
 Limit
   Output: t1.*, c3, c1
   ->  Sort
         Output: t1.*, c3, c1
         Sort Key: t1.c3, t1.c1
         ->  Foreign Scan on public.ft1 t1
               Output: t1.*, c3, c1
               Node: postgres_srv / Status: Alive
                 Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1"
(9 rows)

SELECT t1 FROM ft1 t1 ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10;
                                                    t1                                                     
-----------------------------------------------------------------------------------------------------------
 (101,1,00101,"Fri Jan 02 00:00:00 1970 PST","Fri Jan 02 00:00:00 1970",1,"1         ",foo,/postgres_srv/)
 (102,2,00102,"Sat Jan 03 00:00:00 1970 PST","Sat Jan 03 00:00:00 1970",2,"2         ",foo,/postgres_srv/)
 (103,3,00103,"Sun Jan 04 00:00:00 1970 PST","Sun Jan 04 00:00:00 1970",3,"3         ",foo,/postgres_srv/)
 (104,4,00104,"Mon Jan 05 00:00:00 1970 PST","Mon Jan 05 00:00:00 1970",4,"4         ",foo,/postgres_srv/)
 (105,5,00105,"Tue Jan 06 00:00:00 1970 PST","Tue Jan 06 00:00:00 1970",5,"5         ",foo,/postgres_srv/)
 (106,6,00106,"Wed Jan 07 00:00:00 1970 PST","Wed Jan 07 00:00:00 1970",6,"6         ",foo,/postgres_srv/)
 (107,7,00107,"Thu Jan 08 00:00:00 1970 PST","Thu Jan 08 00:00:00 1970",7,"7         ",foo,/postgres_srv/)
 (108,8,00108,"Fri Jan 09 00:00:00 1970 PST","Fri Jan 09 00:00:00 1970",8,"8         ",foo,/postgres_srv/)
 (109,9,00109,"Sat Jan 10 00:00:00 1970 PST","Sat Jan 10 00:00:00 1970",9,"9         ",foo,/postgres_srv/)
 (110,0,00110,"Sun Jan 11 00:00:00 1970 PST","Sun Jan 11 00:00:00 1970",0,"0         ",foo,/postgres_srv/)
(10 rows)

-- empty result
SELECT * FROM ft1 WHERE false;
 c1 | c2 | c3 | c4 | c5 | c6 | c7 | c8 | __spd_url 
----+----+----+----+----+----+----+----+-----------
(0 rows)

-- with WHERE clause
EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE t1.c1 = 101 AND t1.c6 = '1' AND t1.c7 >= '1';
                                                                    QUERY PLAN                                                                    
--------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: c1, c2, c3, c4, c5, c6, c7, c8, __spd_url
   Node: postgres_srv / Status: Alive
     Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE ((c7 >= '1'::bpchar)) AND (("C 1" = 101)) AND ((c6 = '1'::text))
(4 rows)

SELECT * FROM ft1 t1 WHERE t1.c1 = 101 AND t1.c6 = '1' AND t1.c7 >= '1';
 c1  | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8  |   __spd_url    
-----+----+-------+------------------------------+--------------------------+----+------------+-----+----------------
 101 |  1 | 00101 | Fri Jan 02 00:00:00 1970 PST | Fri Jan 02 00:00:00 1970 | 1  | 1          | foo | /postgres_srv/
(1 row)

-- with FOR UPDATE/SHARE
EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE c1 = 101 FOR UPDATE;
                                              QUERY PLAN                                               
-------------------------------------------------------------------------------------------------------
 LockRows
   Output: c1, c2, c3, c4, c5, c6, c7, c8, __spd_url, t1.*
   ->  Foreign Scan on public.ft1 t1
         Output: c1, c2, c3, c4, c5, c6, c7, c8, __spd_url, t1.*
         Node: postgres_srv / Status: Alive
           Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE (("C 1" = 101))
(6 rows)

SELECT * FROM ft1 t1 WHERE c1 = 101 FOR UPDATE;
 c1  | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8  |   __spd_url    
-----+----+-------+------------------------------+--------------------------+----+------------+-----+----------------
 101 |  1 | 00101 | Fri Jan 02 00:00:00 1970 PST | Fri Jan 02 00:00:00 1970 | 1  | 1          | foo | /postgres_srv/
(1 row)

EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE c1 = 102 FOR SHARE;
                                              QUERY PLAN                                               
-------------------------------------------------------------------------------------------------------
 LockRows
   Output: c1, c2, c3, c4, c5, c6, c7, c8, __spd_url, t1.*
   ->  Foreign Scan on public.ft1 t1
         Output: c1, c2, c3, c4, c5, c6, c7, c8, __spd_url, t1.*
         Node: postgres_srv / Status: Alive
           Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE (("C 1" = 102))
(6 rows)

SELECT * FROM ft1 t1 WHERE c1 = 102 FOR SHARE;
 c1  | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8  |   __spd_url    
-----+----+-------+------------------------------+--------------------------+----+------------+-----+----------------
 102 |  2 | 00102 | Sat Jan 03 00:00:00 1970 PST | Sat Jan 03 00:00:00 1970 | 2  | 2          | foo | /postgres_srv/
(1 row)

-- aggregate
SELECT COUNT(*) FROM ft1 t1;
 count 
-------
  1000
(1 row)

-- subquery
SELECT * FROM ft1 t1 WHERE t1.c3 IN (SELECT c3 FROM ft2 t2 WHERE c1 <= 10) ORDER BY c1;
 c1 | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8  |   __spd_url    
----+----+-------+------------------------------+--------------------------+----+------------+-----+----------------
  1 |  1 | 00001 | Fri Jan 02 00:00:00 1970 PST | Fri Jan 02 00:00:00 1970 | 1  | 1          | foo | /postgres_srv/
  2 |  2 | 00002 | Sat Jan 03 00:00:00 1970 PST | Sat Jan 03 00:00:00 1970 | 2  | 2          | foo | /postgres_srv/
  3 |  3 | 00003 | Sun Jan 04 00:00:00 1970 PST | Sun Jan 04 00:00:00 1970 | 3  | 3          | foo | /postgres_srv/
  4 |  4 | 00004 | Mon Jan 05 00:00:00 1970 PST | Mon Jan 05 00:00:00 1970 | 4  | 4          | foo | /postgres_srv/
  5 |  5 | 00005 | Tue Jan 06 00:00:00 1970 PST | Tue Jan 06 00:00:00 1970 | 5  | 5          | foo | /postgres_srv/
  6 |  6 | 00006 | Wed Jan 07 00:00:00 1970 PST | Wed Jan 07 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
  7 |  7 | 00007 | Thu Jan 08 00:00:00 1970 PST | Thu Jan 08 00:00:00 1970 | 7  | 7          | foo | /postgres_srv/
  8 |  8 | 00008 | Fri Jan 09 00:00:00 1970 PST | Fri Jan 09 00:00:00 1970 | 8  | 8          | foo | /postgres_srv/
  9 |  9 | 00009 | Sat Jan 10 00:00:00 1970 PST | Sat Jan 10 00:00:00 1970 | 9  | 9          | foo | /postgres_srv/
 10 |  0 | 00010 | Sun Jan 11 00:00:00 1970 PST | Sun Jan 11 00:00:00 1970 | 0  | 0          | foo | /postgres_srv/
(10 rows)

-- subquery+MAX
-- SELECT * FROM ft1 t1 WHERE t1.c3 = (SELECT MAX(c3) FROM ft2 t2) ORDER BY c1;
-- used in CTE
WITH t1 AS (SELECT * FROM ft1 WHERE c1 <= 10) SELECT t2.c1, t2.c2, t2.c3, t2.c4 FROM t1, ft2 t2 WHERE t1.c1 = t2.c1 ORDER BY t1.c1;
 c1 | c2 |  c3   |              c4              
----+----+-------+------------------------------
  1 |  1 | 00001 | Fri Jan 02 00:00:00 1970 PST
  2 |  2 | 00002 | Sat Jan 03 00:00:00 1970 PST
  3 |  3 | 00003 | Sun Jan 04 00:00:00 1970 PST
  4 |  4 | 00004 | Mon Jan 05 00:00:00 1970 PST
  5 |  5 | 00005 | Tue Jan 06 00:00:00 1970 PST
  6 |  6 | 00006 | Wed Jan 07 00:00:00 1970 PST
  7 |  7 | 00007 | Thu Jan 08 00:00:00 1970 PST
  8 |  8 | 00008 | Fri Jan 09 00:00:00 1970 PST
  9 |  9 | 00009 | Sat Jan 10 00:00:00 1970 PST
 10 |  0 | 00010 | Sun Jan 11 00:00:00 1970 PST
(10 rows)

-- fixed values
SELECT 'fixed', NULL FROM ft1 t1 WHERE c1 = 1;
 ?column? | ?column? 
----------+----------
 fixed    | 
(1 row)

-- Test forcing the remote server to produce sorted data for a merge join.
SET enable_hashjoin TO false;
SET enable_nestloop TO false;
-- inner join; expressions in the clauses appear in the equivalence class list
EXPLAIN (VERBOSE, COSTS OFF)
	SELECT t1.c1, t2."C 1" FROM ft2 t1 JOIN "S 1"."T 1" t2 ON (t1.c1 = t2."C 1") OFFSET 100 LIMIT 10;
                           QUERY PLAN                            
-----------------------------------------------------------------
 Limit
   Output: t1.c1, t2."C 1"
   ->  Merge Join
         Output: t1.c1, t2."C 1"
         Merge Cond: (t2."C 1" = t1.c1)
         ->  Sort
               Output: t2."C 1"
               Sort Key: t2."C 1"
               ->  Foreign Scan on "S 1"."T 1" t2
                     Output: t2."C 1"
                     Remote SQL: SELECT "C 1" FROM "S 1"."T 1"
         ->  Sort
               Output: t1.c1
               Sort Key: t1.c1
               ->  Foreign Scan on public.ft2 t1
                     Output: t1.c1
                     Node: postgres_srv / Status: Alive
                       Remote SQL: SELECT "C 1" FROM "S 1"."T 1"
(18 rows)

SELECT t1.c1, t2."C 1" FROM ft2 t1 JOIN "S 1"."T 1" t2 ON (t1.c1 = t2."C 1") OFFSET 100 LIMIT 10;
 c1  | C 1 
-----+-----
 101 | 101
 102 | 102
 103 | 103
 104 | 104
 105 | 105
 106 | 106
 107 | 107
 108 | 108
 109 | 109
 110 | 110
(10 rows)

-- outer join; expressions in the clauses do not appear in equivalence class
-- list but no output change as compared to the previous query
EXPLAIN (VERBOSE, COSTS OFF)
	SELECT t1.c1, t2."C 1" FROM ft2 t1 LEFT JOIN "S 1"."T 1" t2 ON (t1.c1 = t2."C 1") OFFSET 100 LIMIT 10;
                           QUERY PLAN                            
-----------------------------------------------------------------
 Limit
   Output: t1.c1, t2."C 1"
   ->  Merge Right Join
         Output: t1.c1, t2."C 1"
         Merge Cond: (t2."C 1" = t1.c1)
         ->  Sort
               Output: t2."C 1"
               Sort Key: t2."C 1"
               ->  Foreign Scan on "S 1"."T 1" t2
                     Output: t2."C 1"
                     Remote SQL: SELECT "C 1" FROM "S 1"."T 1"
         ->  Sort
               Output: t1.c1
               Sort Key: t1.c1
               ->  Foreign Scan on public.ft2 t1
                     Output: t1.c1
                     Node: postgres_srv / Status: Alive
                       Remote SQL: SELECT "C 1" FROM "S 1"."T 1"
(18 rows)

SELECT t1.c1, t2."C 1" FROM ft2 t1 LEFT JOIN "S 1"."T 1" t2 ON (t1.c1 = t2."C 1") OFFSET 100 LIMIT 10;
 c1  | C 1 
-----+-----
 101 | 101
 102 | 102
 103 | 103
 104 | 104
 105 | 105
 106 | 106
 107 | 107
 108 | 108
 109 | 109
 110 | 110
(10 rows)

-- A join between local table and foreign join. ORDER BY clause is added to the
-- foreign join so that the local table can be joined using merge join strategy.
EXPLAIN (VERBOSE, COSTS OFF)
	SELECT t1."C 1" FROM "S 1"."T 1" t1 left join ft1 t2 join ft2 t3 on (t2.c1 = t3.c1) on (t3.c1 = t1."C 1") OFFSET 100 LIMIT 10;
                                 QUERY PLAN                                  
-----------------------------------------------------------------------------
 Limit
   Output: t1."C 1"
   ->  Merge Left Join
         Output: t1."C 1"
         Merge Cond: (t1."C 1" = t3.c1)
         ->  Sort
               Output: t1."C 1"
               Sort Key: t1."C 1"
               ->  Foreign Scan on "S 1"."T 1" t1
                     Output: t1."C 1"
                     Remote SQL: SELECT "C 1" FROM "S 1"."T 1"
         ->  Materialize
               Output: t3.c1
               ->  Merge Join
                     Output: t3.c1
                     Merge Cond: (t2.c1 = t3.c1)
                     ->  Sort
                           Output: t2.c1
                           Sort Key: t2.c1
                           ->  Foreign Scan on public.ft1 t2
                                 Output: t2.c1
                                 Node: postgres_srv / Status: Alive
                                   Remote SQL: SELECT "C 1" FROM "S 1"."T 1"
                     ->  Sort
                           Output: t3.c1
                           Sort Key: t3.c1
                           ->  Foreign Scan on public.ft2 t3
                                 Output: t3.c1
                                 Node: postgres_srv / Status: Alive
                                   Remote SQL: SELECT "C 1" FROM "S 1"."T 1"
(30 rows)

SELECT t1."C 1" FROM "S 1"."T 1" t1 left join ft1 t2 join ft2 t3 on (t2.c1 = t3.c1) on (t3.c1 = t1."C 1") OFFSET 100 LIMIT 10;
 C 1 
-----
 101
 102
 103
 104
 105
 106
 107
 108
 109
 110
(10 rows)

-- Test similar to above, except that the full join prevents any equivalence
-- classes from being merged. This produces single relation equivalence classes
-- included in join restrictions.
EXPLAIN (VERBOSE, COSTS OFF)
	SELECT t1."C 1", t2.c1, t3.c1 FROM "S 1"."T 1" t1 left join ft1 t2 full join ft2 t3 on (t2.c1 = t3.c1) on (t3.c1 = t1."C 1") OFFSET 100 LIMIT 10;
                                 QUERY PLAN                                  
-----------------------------------------------------------------------------
 Limit
   Output: t1."C 1", t2.c1, t3.c1
   ->  Merge Left Join
         Output: t1."C 1", t2.c1, t3.c1
         Merge Cond: (t1."C 1" = t3.c1)
         ->  Sort
               Output: t1."C 1"
               Sort Key: t1."C 1"
               ->  Foreign Scan on "S 1"."T 1" t1
                     Output: t1."C 1"
                     Remote SQL: SELECT "C 1" FROM "S 1"."T 1"
         ->  Materialize
               Output: t3.c1, t2.c1
               ->  Merge Left Join
                     Output: t3.c1, t2.c1
                     Merge Cond: (t3.c1 = t2.c1)
                     ->  Sort
                           Output: t3.c1
                           Sort Key: t3.c1
                           ->  Foreign Scan on public.ft2 t3
                                 Output: t3.c1
                                 Node: postgres_srv / Status: Alive
                                   Remote SQL: SELECT "C 1" FROM "S 1"."T 1"
                     ->  Sort
                           Output: t2.c1
                           Sort Key: t2.c1
                           ->  Foreign Scan on public.ft1 t2
                                 Output: t2.c1
                                 Node: postgres_srv / Status: Alive
                                   Remote SQL: SELECT "C 1" FROM "S 1"."T 1"
(30 rows)

SELECT t1."C 1", t2.c1, t3.c1 FROM "S 1"."T 1" t1 left join ft1 t2 full join ft2 t3 on (t2.c1 = t3.c1) on (t3.c1 = t1."C 1") OFFSET 100 LIMIT 10;
 C 1 | c1  | c1  
-----+-----+-----
 101 | 101 | 101
 102 | 102 | 102
 103 | 103 | 103
 104 | 104 | 104
 105 | 105 | 105
 106 | 106 | 106
 107 | 107 | 107
 108 | 108 | 108
 109 | 109 | 109
 110 | 110 | 110
(10 rows)

-- Test similar to above with all full outer joins
EXPLAIN (VERBOSE, COSTS OFF)
	SELECT t1."C 1", t2.c1, t3.c1 FROM "S 1"."T 1" t1 full join ft1 t2 full join ft2 t3 on (t2.c1 = t3.c1) on (t3.c1 = t1."C 1") OFFSET 100 LIMIT 10;
                                 QUERY PLAN                                  
-----------------------------------------------------------------------------
 Limit
   Output: t1."C 1", t2.c1, t3.c1
   ->  Merge Full Join
         Output: t1."C 1", t2.c1, t3.c1
         Merge Cond: (t1."C 1" = t3.c1)
         ->  Sort
               Output: t1."C 1"
               Sort Key: t1."C 1"
               ->  Foreign Scan on "S 1"."T 1" t1
                     Output: t1."C 1"
                     Remote SQL: SELECT "C 1" FROM "S 1"."T 1"
         ->  Sort
               Output: t2.c1, t3.c1
               Sort Key: t3.c1
               ->  Merge Full Join
                     Output: t2.c1, t3.c1
                     Merge Cond: (t2.c1 = t3.c1)
                     ->  Sort
                           Output: t2.c1
                           Sort Key: t2.c1
                           ->  Foreign Scan on public.ft1 t2
                                 Output: t2.c1
                                 Node: postgres_srv / Status: Alive
                                   Remote SQL: SELECT "C 1" FROM "S 1"."T 1"
                     ->  Sort
                           Output: t3.c1
                           Sort Key: t3.c1
                           ->  Foreign Scan on public.ft2 t3
                                 Output: t3.c1
                                 Node: postgres_srv / Status: Alive
                                   Remote SQL: SELECT "C 1" FROM "S 1"."T 1"
(31 rows)

SELECT t1."C 1", t2.c1, t3.c1 FROM "S 1"."T 1" t1 full join ft1 t2 full join ft2 t3 on (t2.c1 = t3.c1) on (t3.c1 = t1."C 1") OFFSET 100 LIMIT 10;
 C 1 | c1  | c1  
-----+-----+-----
 101 | 101 | 101
 102 | 102 | 102
 103 | 103 | 103
 104 | 104 | 104
 105 | 105 | 105
 106 | 106 | 106
 107 | 107 | 107
 108 | 108 | 108
 109 | 109 | 109
 110 | 110 | 110
(10 rows)

RESET enable_hashjoin;
RESET enable_nestloop;
-- ===================================================================
-- WHERE with remotely-executable conditions
-- ===================================================================
EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE t1.c1 = 1;         -- Var, OpExpr(b), Const
                                          QUERY PLAN                                           
-----------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: c1, c2, c3, c4, c5, c6, c7, c8, __spd_url
   Node: postgres_srv / Status: Alive
     Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE (("C 1" = 1))
(4 rows)

EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE t1.c1 = 100 AND t1.c2 = 0; -- BoolExpr
                                                   QUERY PLAN                                                   
----------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: c1, c2, c3, c4, c5, c6, c7, c8, __spd_url
   Node: postgres_srv / Status: Alive
     Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE (("C 1" = 100)) AND ((c2 = 0))
(4 rows)

EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE c1 IS NULL;        -- NullTest
                                            QUERY PLAN                                             
---------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: c1, c2, c3, c4, c5, c6, c7, c8, __spd_url
   Node: postgres_srv / Status: Alive
     Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE (("C 1" IS NULL))
(4 rows)

EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE c1 IS NOT NULL;    -- NullTest
                                              QUERY PLAN                                               
-------------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: c1, c2, c3, c4, c5, c6, c7, c8, __spd_url
   Node: postgres_srv / Status: Alive
     Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE (("C 1" IS NOT NULL))
(4 rows)

EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE round(abs(c1), 0) = 1; -- FuncExpr
                                                      QUERY PLAN                                                       
-----------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: c1, c2, c3, c4, c5, c6, c7, c8, __spd_url
   Node: postgres_srv / Status: Alive
     Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE ((round(abs("C 1"), 0) = 1::numeric))
(4 rows)

EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE c1 = -c1;          -- OpExpr(l)
                                              QUERY PLAN                                               
-------------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: c1, c2, c3, c4, c5, c6, c7, c8, __spd_url
   Node: postgres_srv / Status: Alive
     Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE (("C 1" = (- "C 1")))
(4 rows)

EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE 1 = c1!;           -- OpExpr(r)
                                                 QUERY PLAN                                                 
------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: c1, c2, c3, c4, c5, c6, c7, c8, __spd_url
   Node: postgres_srv / Status: Alive
     Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE ((1::numeric = ("C 1" !)))
(4 rows)

EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE (c1 IS NOT NULL) IS DISTINCT FROM (c1 IS NOT NULL); -- DistinctExpr
                                                                  QUERY PLAN                                                                  
----------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: c1, c2, c3, c4, c5, c6, c7, c8, __spd_url
   Node: postgres_srv / Status: Alive
     Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE ((("C 1" IS NOT NULL) IS DISTINCT FROM ("C 1" IS NOT NULL)))
(4 rows)

EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE c1 = ANY(ARRAY[c2, 1, c1 + 0]); -- ScalarArrayOpExpr
                                                         QUERY PLAN                                                          
-----------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: c1, c2, c3, c4, c5, c6, c7, c8, __spd_url
   Node: postgres_srv / Status: Alive
     Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE (("C 1" = ANY (ARRAY[c2, 1, ("C 1" + 0)])))
(4 rows)

EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE c1 = (ARRAY[c1,c2,3])[1]; -- SubscriptingRef
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: c1, c2, c3, c4, c5, c6, c7, c8, __spd_url
   Node: postgres_srv / Status: Alive
     Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE (("C 1" = ((ARRAY["C 1", c2, 3])[1])))
(4 rows)

EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE c6 = E'foo''s\\bar';  -- check special chars
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: c1, c2, c3, c4, c5, c6, c7, c8, __spd_url
   Node: postgres_srv / Status: Alive
     Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE ((c6 = E'foo''s\\bar'::text))
(4 rows)

EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 t1 WHERE c8 = 'foo';  -- can't be sent to remote
                                QUERY PLAN                                 
---------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: c1, c2, c3, c4, c5, c6, c7, c8, __spd_url
   Filter: (t1.c8 = 'foo'::user_enum)
   Node: postgres_srv / Status: Alive
     Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1"
(5 rows)

-- parameterized remote path for foreign table
EXPLAIN (VERBOSE, COSTS OFF)
  SELECT * FROM "S 1"."T 1" a, ft2 b WHERE a."C 1" = 47 AND b.c1 = a.c2;
                                                        QUERY PLAN                                                        
--------------------------------------------------------------------------------------------------------------------------
 Hash Join
   Output: a."C 1", a.c2, a.c3, a.c4, a.c5, a.c6, a.c7, a.c8, b.c1, b.c2, b.c3, b.c4, b.c5, b.c6, b.c7, b.c8, b.__spd_url
   Hash Cond: (b.c1 = a.c2)
   ->  Foreign Scan on public.ft2 b
         Output: b.c1, b.c2, b.c3, b.c4, b.c5, b.c6, b.c7, b.c8, b.__spd_url
         Node: postgres_srv / Status: Alive
           Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1"
   ->  Hash
         Output: a."C 1", a.c2, a.c3, a.c4, a.c5, a.c6, a.c7, a.c8
         ->  Foreign Scan on "S 1"."T 1" a
               Output: a."C 1", a.c2, a.c3, a.c4, a.c5, a.c6, a.c7, a.c8
               Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE (("C 1" = 47))
(12 rows)

SELECT * FROM ft2 a, ft2 b WHERE a.c1 = 47 AND b.c1 = a.c2;
 c1 | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8  |   __spd_url    | c1 | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8  |   __spd_url    
----+----+-------+------------------------------+--------------------------+----+------------+-----+----------------+----+----+-------+------------------------------+--------------------------+----+------------+-----+----------------
 47 |  7 | 00047 | Tue Feb 17 00:00:00 1970 PST | Tue Feb 17 00:00:00 1970 | 7  | 7          | foo | /postgres_srv/ |  7 |  7 | 00007 | Thu Jan 08 00:00:00 1970 PST | Thu Jan 08 00:00:00 1970 | 7  | 7          | foo | /postgres_srv/
(1 row)

-- check both safe and unsafe join conditions
EXPLAIN (VERBOSE, COSTS OFF)
  SELECT * FROM ft2 a, ft2 b
  WHERE a.c2 = 6 AND b.c1 = a.c1 AND a.c8 = 'foo' AND b.c7 = upper(a.c7);
                                                             QUERY PLAN                                                             
------------------------------------------------------------------------------------------------------------------------------------
 Hash Join
   Output: a.c1, a.c2, a.c3, a.c4, a.c5, a.c6, a.c7, a.c8, a.__spd_url, b.c1, b.c2, b.c3, b.c4, b.c5, b.c6, b.c7, b.c8, b.__spd_url
   Hash Cond: ((b.c1 = a.c1) AND ((b.c7)::text = upper((a.c7)::text)))
   ->  Foreign Scan on public.ft2 b
         Output: b.c1, b.c2, b.c3, b.c4, b.c5, b.c6, b.c7, b.c8, b.__spd_url
         Node: postgres_srv / Status: Alive
           Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1"
   ->  Hash
         Output: a.c1, a.c2, a.c3, a.c4, a.c5, a.c6, a.c7, a.c8, a.__spd_url
         ->  Foreign Scan on public.ft2 a
               Output: a.c1, a.c2, a.c3, a.c4, a.c5, a.c6, a.c7, a.c8, a.__spd_url
               Filter: (a.c8 = 'foo'::user_enum)
               Node: postgres_srv / Status: Alive
                 Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE ((c2 = 6))
(14 rows)

SELECT * FROM ft2 a, ft2 b
WHERE a.c2 = 6 AND b.c1 = a.c1 AND a.c8 = 'foo' AND b.c7 = upper(a.c7);
 c1  | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8  |   __spd_url    | c1  | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8  |   __spd_url    
-----+----+-------+------------------------------+--------------------------+----+------------+-----+----------------+-----+----+-------+------------------------------+--------------------------+----+------------+-----+----------------
   6 |  6 | 00006 | Wed Jan 07 00:00:00 1970 PST | Wed Jan 07 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ |   6 |  6 | 00006 | Wed Jan 07 00:00:00 1970 PST | Wed Jan 07 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
  16 |  6 | 00016 | Sat Jan 17 00:00:00 1970 PST | Sat Jan 17 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ |  16 |  6 | 00016 | Sat Jan 17 00:00:00 1970 PST | Sat Jan 17 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
  26 |  6 | 00026 | Tue Jan 27 00:00:00 1970 PST | Tue Jan 27 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ |  26 |  6 | 00026 | Tue Jan 27 00:00:00 1970 PST | Tue Jan 27 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
  36 |  6 | 00036 | Fri Feb 06 00:00:00 1970 PST | Fri Feb 06 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ |  36 |  6 | 00036 | Fri Feb 06 00:00:00 1970 PST | Fri Feb 06 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
  46 |  6 | 00046 | Mon Feb 16 00:00:00 1970 PST | Mon Feb 16 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ |  46 |  6 | 00046 | Mon Feb 16 00:00:00 1970 PST | Mon Feb 16 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
  56 |  6 | 00056 | Thu Feb 26 00:00:00 1970 PST | Thu Feb 26 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ |  56 |  6 | 00056 | Thu Feb 26 00:00:00 1970 PST | Thu Feb 26 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
  66 |  6 | 00066 | Sun Mar 08 00:00:00 1970 PST | Sun Mar 08 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ |  66 |  6 | 00066 | Sun Mar 08 00:00:00 1970 PST | Sun Mar 08 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
  76 |  6 | 00076 | Wed Mar 18 00:00:00 1970 PST | Wed Mar 18 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ |  76 |  6 | 00076 | Wed Mar 18 00:00:00 1970 PST | Wed Mar 18 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
  86 |  6 | 00086 | Sat Mar 28 00:00:00 1970 PST | Sat Mar 28 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ |  86 |  6 | 00086 | Sat Mar 28 00:00:00 1970 PST | Sat Mar 28 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
  96 |  6 | 00096 | Tue Apr 07 00:00:00 1970 PST | Tue Apr 07 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ |  96 |  6 | 00096 | Tue Apr 07 00:00:00 1970 PST | Tue Apr 07 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 106 |  6 | 00106 | Wed Jan 07 00:00:00 1970 PST | Wed Jan 07 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 106 |  6 | 00106 | Wed Jan 07 00:00:00 1970 PST | Wed Jan 07 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 116 |  6 | 00116 | Sat Jan 17 00:00:00 1970 PST | Sat Jan 17 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 116 |  6 | 00116 | Sat Jan 17 00:00:00 1970 PST | Sat Jan 17 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 126 |  6 | 00126 | Tue Jan 27 00:00:00 1970 PST | Tue Jan 27 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 126 |  6 | 00126 | Tue Jan 27 00:00:00 1970 PST | Tue Jan 27 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 136 |  6 | 00136 | Fri Feb 06 00:00:00 1970 PST | Fri Feb 06 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 136 |  6 | 00136 | Fri Feb 06 00:00:00 1970 PST | Fri Feb 06 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 146 |  6 | 00146 | Mon Feb 16 00:00:00 1970 PST | Mon Feb 16 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 146 |  6 | 00146 | Mon Feb 16 00:00:00 1970 PST | Mon Feb 16 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 156 |  6 | 00156 | Thu Feb 26 00:00:00 1970 PST | Thu Feb 26 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 156 |  6 | 00156 | Thu Feb 26 00:00:00 1970 PST | Thu Feb 26 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 166 |  6 | 00166 | Sun Mar 08 00:00:00 1970 PST | Sun Mar 08 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 166 |  6 | 00166 | Sun Mar 08 00:00:00 1970 PST | Sun Mar 08 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 176 |  6 | 00176 | Wed Mar 18 00:00:00 1970 PST | Wed Mar 18 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 176 |  6 | 00176 | Wed Mar 18 00:00:00 1970 PST | Wed Mar 18 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 186 |  6 | 00186 | Sat Mar 28 00:00:00 1970 PST | Sat Mar 28 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 186 |  6 | 00186 | Sat Mar 28 00:00:00 1970 PST | Sat Mar 28 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 196 |  6 | 00196 | Tue Apr 07 00:00:00 1970 PST | Tue Apr 07 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 196 |  6 | 00196 | Tue Apr 07 00:00:00 1970 PST | Tue Apr 07 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 206 |  6 | 00206 | Wed Jan 07 00:00:00 1970 PST | Wed Jan 07 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 206 |  6 | 00206 | Wed Jan 07 00:00:00 1970 PST | Wed Jan 07 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 216 |  6 | 00216 | Sat Jan 17 00:00:00 1970 PST | Sat Jan 17 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 216 |  6 | 00216 | Sat Jan 17 00:00:00 1970 PST | Sat Jan 17 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 226 |  6 | 00226 | Tue Jan 27 00:00:00 1970 PST | Tue Jan 27 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 226 |  6 | 00226 | Tue Jan 27 00:00:00 1970 PST | Tue Jan 27 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 236 |  6 | 00236 | Fri Feb 06 00:00:00 1970 PST | Fri Feb 06 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 236 |  6 | 00236 | Fri Feb 06 00:00:00 1970 PST | Fri Feb 06 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 246 |  6 | 00246 | Mon Feb 16 00:00:00 1970 PST | Mon Feb 16 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 246 |  6 | 00246 | Mon Feb 16 00:00:00 1970 PST | Mon Feb 16 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 256 |  6 | 00256 | Thu Feb 26 00:00:00 1970 PST | Thu Feb 26 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 256 |  6 | 00256 | Thu Feb 26 00:00:00 1970 PST | Thu Feb 26 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 266 |  6 | 00266 | Sun Mar 08 00:00:00 1970 PST | Sun Mar 08 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 266 |  6 | 00266 | Sun Mar 08 00:00:00 1970 PST | Sun Mar 08 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 276 |  6 | 00276 | Wed Mar 18 00:00:00 1970 PST | Wed Mar 18 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 276 |  6 | 00276 | Wed Mar 18 00:00:00 1970 PST | Wed Mar 18 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 286 |  6 | 00286 | Sat Mar 28 00:00:00 1970 PST | Sat Mar 28 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 286 |  6 | 00286 | Sat Mar 28 00:00:00 1970 PST | Sat Mar 28 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 296 |  6 | 00296 | Tue Apr 07 00:00:00 1970 PST | Tue Apr 07 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 296 |  6 | 00296 | Tue Apr 07 00:00:00 1970 PST | Tue Apr 07 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 306 |  6 | 00306 | Wed Jan 07 00:00:00 1970 PST | Wed Jan 07 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 306 |  6 | 00306 | Wed Jan 07 00:00:00 1970 PST | Wed Jan 07 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 316 |  6 | 00316 | Sat Jan 17 00:00:00 1970 PST | Sat Jan 17 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 316 |  6 | 00316 | Sat Jan 17 00:00:00 1970 PST | Sat Jan 17 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 326 |  6 | 00326 | Tue Jan 27 00:00:00 1970 PST | Tue Jan 27 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 326 |  6 | 00326 | Tue Jan 27 00:00:00 1970 PST | Tue Jan 27 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 336 |  6 | 00336 | Fri Feb 06 00:00:00 1970 PST | Fri Feb 06 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 336 |  6 | 00336 | Fri Feb 06 00:00:00 1970 PST | Fri Feb 06 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 346 |  6 | 00346 | Mon Feb 16 00:00:00 1970 PST | Mon Feb 16 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 346 |  6 | 00346 | Mon Feb 16 00:00:00 1970 PST | Mon Feb 16 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 356 |  6 | 00356 | Thu Feb 26 00:00:00 1970 PST | Thu Feb 26 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 356 |  6 | 00356 | Thu Feb 26 00:00:00 1970 PST | Thu Feb 26 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 366 |  6 | 00366 | Sun Mar 08 00:00:00 1970 PST | Sun Mar 08 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 366 |  6 | 00366 | Sun Mar 08 00:00:00 1970 PST | Sun Mar 08 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 376 |  6 | 00376 | Wed Mar 18 00:00:00 1970 PST | Wed Mar 18 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 376 |  6 | 00376 | Wed Mar 18 00:00:00 1970 PST | Wed Mar 18 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 386 |  6 | 00386 | Sat Mar 28 00:00:00 1970 PST | Sat Mar 28 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 386 |  6 | 00386 | Sat Mar 28 00:00:00 1970 PST | Sat Mar 28 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 396 |  6 | 00396 | Tue Apr 07 00:00:00 1970 PST | Tue Apr 07 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 396 |  6 | 00396 | Tue Apr 07 00:00:00 1970 PST | Tue Apr 07 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 406 |  6 | 00406 | Wed Jan 07 00:00:00 1970 PST | Wed Jan 07 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 406 |  6 | 00406 | Wed Jan 07 00:00:00 1970 PST | Wed Jan 07 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 416 |  6 | 00416 | Sat Jan 17 00:00:00 1970 PST | Sat Jan 17 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 416 |  6 | 00416 | Sat Jan 17 00:00:00 1970 PST | Sat Jan 17 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 426 |  6 | 00426 | Tue Jan 27 00:00:00 1970 PST | Tue Jan 27 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 426 |  6 | 00426 | Tue Jan 27 00:00:00 1970 PST | Tue Jan 27 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 436 |  6 | 00436 | Fri Feb 06 00:00:00 1970 PST | Fri Feb 06 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 436 |  6 | 00436 | Fri Feb 06 00:00:00 1970 PST | Fri Feb 06 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 446 |  6 | 00446 | Mon Feb 16 00:00:00 1970 PST | Mon Feb 16 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 446 |  6 | 00446 | Mon Feb 16 00:00:00 1970 PST | Mon Feb 16 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 456 |  6 | 00456 | Thu Feb 26 00:00:00 1970 PST | Thu Feb 26 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 456 |  6 | 00456 | Thu Feb 26 00:00:00 1970 PST | Thu Feb 26 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 466 |  6 | 00466 | Sun Mar 08 00:00:00 1970 PST | Sun Mar 08 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 466 |  6 | 00466 | Sun Mar 08 00:00:00 1970 PST | Sun Mar 08 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 476 |  6 | 00476 | Wed Mar 18 00:00:00 1970 PST | Wed Mar 18 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 476 |  6 | 00476 | Wed Mar 18 00:00:00 1970 PST | Wed Mar 18 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 486 |  6 | 00486 | Sat Mar 28 00:00:00 1970 PST | Sat Mar 28 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 486 |  6 | 00486 | Sat Mar 28 00:00:00 1970 PST | Sat Mar 28 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 496 |  6 | 00496 | Tue Apr 07 00:00:00 1970 PST | Tue Apr 07 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 496 |  6 | 00496 | Tue Apr 07 00:00:00 1970 PST | Tue Apr 07 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 506 |  6 | 00506 | Wed Jan 07 00:00:00 1970 PST | Wed Jan 07 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 506 |  6 | 00506 | Wed Jan 07 00:00:00 1970 PST | Wed Jan 07 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 516 |  6 | 00516 | Sat Jan 17 00:00:00 1970 PST | Sat Jan 17 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 516 |  6 | 00516 | Sat Jan 17 00:00:00 1970 PST | Sat Jan 17 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 526 |  6 | 00526 | Tue Jan 27 00:00:00 1970 PST | Tue Jan 27 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 526 |  6 | 00526 | Tue Jan 27 00:00:00 1970 PST | Tue Jan 27 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 536 |  6 | 00536 | Fri Feb 06 00:00:00 1970 PST | Fri Feb 06 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 536 |  6 | 00536 | Fri Feb 06 00:00:00 1970 PST | Fri Feb 06 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 546 |  6 | 00546 | Mon Feb 16 00:00:00 1970 PST | Mon Feb 16 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 546 |  6 | 00546 | Mon Feb 16 00:00:00 1970 PST | Mon Feb 16 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 556 |  6 | 00556 | Thu Feb 26 00:00:00 1970 PST | Thu Feb 26 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 556 |  6 | 00556 | Thu Feb 26 00:00:00 1970 PST | Thu Feb 26 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 566 |  6 | 00566 | Sun Mar 08 00:00:00 1970 PST | Sun Mar 08 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 566 |  6 | 00566 | Sun Mar 08 00:00:00 1970 PST | Sun Mar 08 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 576 |  6 | 00576 | Wed Mar 18 00:00:00 1970 PST | Wed Mar 18 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 576 |  6 | 00576 | Wed Mar 18 00:00:00 1970 PST | Wed Mar 18 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 586 |  6 | 00586 | Sat Mar 28 00:00:00 1970 PST | Sat Mar 28 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 586 |  6 | 00586 | Sat Mar 28 00:00:00 1970 PST | Sat Mar 28 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 596 |  6 | 00596 | Tue Apr 07 00:00:00 1970 PST | Tue Apr 07 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 596 |  6 | 00596 | Tue Apr 07 00:00:00 1970 PST | Tue Apr 07 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 606 |  6 | 00606 | Wed Jan 07 00:00:00 1970 PST | Wed Jan 07 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 606 |  6 | 00606 | Wed Jan 07 00:00:00 1970 PST | Wed Jan 07 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 616 |  6 | 00616 | Sat Jan 17 00:00:00 1970 PST | Sat Jan 17 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 616 |  6 | 00616 | Sat Jan 17 00:00:00 1970 PST | Sat Jan 17 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 626 |  6 | 00626 | Tue Jan 27 00:00:00 1970 PST | Tue Jan 27 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 626 |  6 | 00626 | Tue Jan 27 00:00:00 1970 PST | Tue Jan 27 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 636 |  6 | 00636 | Fri Feb 06 00:00:00 1970 PST | Fri Feb 06 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 636 |  6 | 00636 | Fri Feb 06 00:00:00 1970 PST | Fri Feb 06 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 646 |  6 | 00646 | Mon Feb 16 00:00:00 1970 PST | Mon Feb 16 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 646 |  6 | 00646 | Mon Feb 16 00:00:00 1970 PST | Mon Feb 16 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 656 |  6 | 00656 | Thu Feb 26 00:00:00 1970 PST | Thu Feb 26 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 656 |  6 | 00656 | Thu Feb 26 00:00:00 1970 PST | Thu Feb 26 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 666 |  6 | 00666 | Sun Mar 08 00:00:00 1970 PST | Sun Mar 08 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 666 |  6 | 00666 | Sun Mar 08 00:00:00 1970 PST | Sun Mar 08 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 676 |  6 | 00676 | Wed Mar 18 00:00:00 1970 PST | Wed Mar 18 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 676 |  6 | 00676 | Wed Mar 18 00:00:00 1970 PST | Wed Mar 18 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 686 |  6 | 00686 | Sat Mar 28 00:00:00 1970 PST | Sat Mar 28 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 686 |  6 | 00686 | Sat Mar 28 00:00:00 1970 PST | Sat Mar 28 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 696 |  6 | 00696 | Tue Apr 07 00:00:00 1970 PST | Tue Apr 07 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 696 |  6 | 00696 | Tue Apr 07 00:00:00 1970 PST | Tue Apr 07 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 706 |  6 | 00706 | Wed Jan 07 00:00:00 1970 PST | Wed Jan 07 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 706 |  6 | 00706 | Wed Jan 07 00:00:00 1970 PST | Wed Jan 07 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 716 |  6 | 00716 | Sat Jan 17 00:00:00 1970 PST | Sat Jan 17 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 716 |  6 | 00716 | Sat Jan 17 00:00:00 1970 PST | Sat Jan 17 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 726 |  6 | 00726 | Tue Jan 27 00:00:00 1970 PST | Tue Jan 27 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 726 |  6 | 00726 | Tue Jan 27 00:00:00 1970 PST | Tue Jan 27 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 736 |  6 | 00736 | Fri Feb 06 00:00:00 1970 PST | Fri Feb 06 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 736 |  6 | 00736 | Fri Feb 06 00:00:00 1970 PST | Fri Feb 06 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 746 |  6 | 00746 | Mon Feb 16 00:00:00 1970 PST | Mon Feb 16 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 746 |  6 | 00746 | Mon Feb 16 00:00:00 1970 PST | Mon Feb 16 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 756 |  6 | 00756 | Thu Feb 26 00:00:00 1970 PST | Thu Feb 26 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 756 |  6 | 00756 | Thu Feb 26 00:00:00 1970 PST | Thu Feb 26 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 766 |  6 | 00766 | Sun Mar 08 00:00:00 1970 PST | Sun Mar 08 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 766 |  6 | 00766 | Sun Mar 08 00:00:00 1970 PST | Sun Mar 08 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 776 |  6 | 00776 | Wed Mar 18 00:00:00 1970 PST | Wed Mar 18 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 776 |  6 | 00776 | Wed Mar 18 00:00:00 1970 PST | Wed Mar 18 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 786 |  6 | 00786 | Sat Mar 28 00:00:00 1970 PST | Sat Mar 28 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 786 |  6 | 00786 | Sat Mar 28 00:00:00 1970 PST | Sat Mar 28 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 796 |  6 | 00796 | Tue Apr 07 00:00:00 1970 PST | Tue Apr 07 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 796 |  6 | 00796 | Tue Apr 07 00:00:00 1970 PST | Tue Apr 07 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 806 |  6 | 00806 | Wed Jan 07 00:00:00 1970 PST | Wed Jan 07 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 806 |  6 | 00806 | Wed Jan 07 00:00:00 1970 PST | Wed Jan 07 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 816 |  6 | 00816 | Sat Jan 17 00:00:00 1970 PST | Sat Jan 17 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 816 |  6 | 00816 | Sat Jan 17 00:00:00 1970 PST | Sat Jan 17 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 826 |  6 | 00826 | Tue Jan 27 00:00:00 1970 PST | Tue Jan 27 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 826 |  6 | 00826 | Tue Jan 27 00:00:00 1970 PST | Tue Jan 27 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 836 |  6 | 00836 | Fri Feb 06 00:00:00 1970 PST | Fri Feb 06 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 836 |  6 | 00836 | Fri Feb 06 00:00:00 1970 PST | Fri Feb 06 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 846 |  6 | 00846 | Mon Feb 16 00:00:00 1970 PST | Mon Feb 16 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 846 |  6 | 00846 | Mon Feb 16 00:00:00 1970 PST | Mon Feb 16 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 856 |  6 | 00856 | Thu Feb 26 00:00:00 1970 PST | Thu Feb 26 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 856 |  6 | 00856 | Thu Feb 26 00:00:00 1970 PST | Thu Feb 26 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 866 |  6 | 00866 | Sun Mar 08 00:00:00 1970 PST | Sun Mar 08 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 866 |  6 | 00866 | Sun Mar 08 00:00:00 1970 PST | Sun Mar 08 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 876 |  6 | 00876 | Wed Mar 18 00:00:00 1970 PST | Wed Mar 18 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 876 |  6 | 00876 | Wed Mar 18 00:00:00 1970 PST | Wed Mar 18 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 886 |  6 | 00886 | Sat Mar 28 00:00:00 1970 PST | Sat Mar 28 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 886 |  6 | 00886 | Sat Mar 28 00:00:00 1970 PST | Sat Mar 28 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 896 |  6 | 00896 | Tue Apr 07 00:00:00 1970 PST | Tue Apr 07 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 896 |  6 | 00896 | Tue Apr 07 00:00:00 1970 PST | Tue Apr 07 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 906 |  6 | 00906 | Wed Jan 07 00:00:00 1970 PST | Wed Jan 07 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 906 |  6 | 00906 | Wed Jan 07 00:00:00 1970 PST | Wed Jan 07 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 916 |  6 | 00916 | Sat Jan 17 00:00:00 1970 PST | Sat Jan 17 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 916 |  6 | 00916 | Sat Jan 17 00:00:00 1970 PST | Sat Jan 17 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 926 |  6 | 00926 | Tue Jan 27 00:00:00 1970 PST | Tue Jan 27 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 926 |  6 | 00926 | Tue Jan 27 00:00:00 1970 PST | Tue Jan 27 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 936 |  6 | 00936 | Fri Feb 06 00:00:00 1970 PST | Fri Feb 06 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 936 |  6 | 00936 | Fri Feb 06 00:00:00 1970 PST | Fri Feb 06 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 946 |  6 | 00946 | Mon Feb 16 00:00:00 1970 PST | Mon Feb 16 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 946 |  6 | 00946 | Mon Feb 16 00:00:00 1970 PST | Mon Feb 16 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 956 |  6 | 00956 | Thu Feb 26 00:00:00 1970 PST | Thu Feb 26 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 956 |  6 | 00956 | Thu Feb 26 00:00:00 1970 PST | Thu Feb 26 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 966 |  6 | 00966 | Sun Mar 08 00:00:00 1970 PST | Sun Mar 08 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 966 |  6 | 00966 | Sun Mar 08 00:00:00 1970 PST | Sun Mar 08 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 976 |  6 | 00976 | Wed Mar 18 00:00:00 1970 PST | Wed Mar 18 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 976 |  6 | 00976 | Wed Mar 18 00:00:00 1970 PST | Wed Mar 18 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 986 |  6 | 00986 | Sat Mar 28 00:00:00 1970 PST | Sat Mar 28 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 986 |  6 | 00986 | Sat Mar 28 00:00:00 1970 PST | Sat Mar 28 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
 996 |  6 | 00996 | Tue Apr 07 00:00:00 1970 PST | Tue Apr 07 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 996 |  6 | 00996 | Tue Apr 07 00:00:00 1970 PST | Tue Apr 07 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
(100 rows)

-- bug before 9.3.5 due to sloppy handling of remote-estimate parameters
-- SELECT * FROM ft1 WHERE c1 = ANY (ARRAY(SELECT c1 FROM ft2 WHERE c1 < 5));
-- SELECT * FROM ft2 WHERE c1 = ANY (ARRAY(SELECT c1 FROM ft1 WHERE c1 < 5));
-- we should not push order by clause with volatile expressions or unsafe
-- collations
EXPLAIN (VERBOSE, COSTS OFF)
	SELECT * FROM ft2 ORDER BY ft2.c1, random();
                                   QUERY PLAN                                    
---------------------------------------------------------------------------------
 Sort
   Output: c1, c2, c3, c4, c5, c6, c7, c8, __spd_url, (random())
   Sort Key: ft2.c1, (random())
   ->  Foreign Scan on public.ft2
         Output: c1, c2, c3, c4, c5, c6, c7, c8, __spd_url, random()
         Node: postgres_srv / Status: Alive
           Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1"
(7 rows)

EXPLAIN (VERBOSE, COSTS OFF)
	SELECT * FROM ft2 ORDER BY ft2.c1, ft2.c3 collate "C";
                                   QUERY PLAN                                    
---------------------------------------------------------------------------------
 Sort
   Output: c1, c2, c3, c4, c5, c6, c7, c8, __spd_url, ((c3)::text)
   Sort Key: ft2.c1, ft2.c3 COLLATE "C"
   ->  Foreign Scan on public.ft2
         Output: c1, c2, c3, c4, c5, c6, c7, c8, __spd_url, c3
         Node: postgres_srv / Status: Alive
           Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1"
(7 rows)

-- user-defined operator/function
CREATE FUNCTION postgres_fdw_abs(int) RETURNS int AS $$
BEGIN
RETURN abs($1);
END
$$ LANGUAGE plpgsql IMMUTABLE;
CREATE OPERATOR === (
    LEFTARG = int,
    RIGHTARG = int,
    PROCEDURE = int4eq,
    COMMUTATOR = ===
);
-- built-in operators and functions can be shipped for remote execution
EXPLAIN (VERBOSE, COSTS OFF)
  SELECT count(c3) FROM ft1 t1 WHERE t1.c1 = abs(t1.c2);
                                 QUERY PLAN                                  
-----------------------------------------------------------------------------
 Foreign Scan
   Output: (count(c3))
   Node: postgres_srv / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (public.ft1__postgres_srv__0)
     Remote SQL: SELECT count(c3) FROM "S 1"."T 1" WHERE (("C 1" = abs(c2)))
(6 rows)

SELECT count(c3) FROM ft1 t1 WHERE t1.c1 = abs(t1.c2);
 count 
-------
     9
(1 row)

EXPLAIN (VERBOSE, COSTS OFF)
  SELECT count(c3) FROM ft1 t1 WHERE t1.c1 = t1.c2;
                               QUERY PLAN                               
------------------------------------------------------------------------
 Foreign Scan
   Output: (count(c3))
   Node: postgres_srv / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (public.ft1__postgres_srv__0)
     Remote SQL: SELECT count(c3) FROM "S 1"."T 1" WHERE (("C 1" = c2))
(6 rows)

SELECT count(c3) FROM ft1 t1 WHERE t1.c1 = t1.c2;
 count 
-------
     9
(1 row)

-- by default, user-defined ones cannot
EXPLAIN (VERBOSE, COSTS OFF)
  SELECT count(c3) FROM ft1 t1 WHERE t1.c1 = postgres_fdw_abs(t1.c2);
                         QUERY PLAN                          
-------------------------------------------------------------
 Aggregate
   Output: count(c3)
   ->  Foreign Scan on public.ft1 t1
         Output: c3
         Filter: (t1.c1 = postgres_fdw_abs(t1.c2))
         Node: postgres_srv / Status: Alive
           Remote SQL: SELECT "C 1", c2, c3 FROM "S 1"."T 1"
(7 rows)

SELECT count(c3) FROM ft1 t1 WHERE t1.c1 = postgres_fdw_abs(t1.c2);
 count 
-------
     9
(1 row)

EXPLAIN (VERBOSE, COSTS OFF)
  SELECT count(c3) FROM ft1 t1 WHERE t1.c1 === t1.c2;
                         QUERY PLAN                          
-------------------------------------------------------------
 Aggregate
   Output: count(c3)
   ->  Foreign Scan on public.ft1 t1
         Output: c3
         Filter: (t1.c1 === t1.c2)
         Node: postgres_srv / Status: Alive
           Remote SQL: SELECT "C 1", c2, c3 FROM "S 1"."T 1"
(7 rows)

SELECT count(c3) FROM ft1 t1 WHERE t1.c1 === t1.c2;
 count 
-------
     9
(1 row)

-- ORDER BY can be shipped, though
EXPLAIN (VERBOSE, COSTS OFF)
  SELECT * FROM ft1 t1 WHERE t1.c1 === t1.c2 order by t1.c2 limit 1;
                                      QUERY PLAN                                       
---------------------------------------------------------------------------------------
 Limit
   Output: c1, c2, c3, c4, c5, c6, c7, c8, __spd_url
   ->  Sort
         Output: c1, c2, c3, c4, c5, c6, c7, c8, __spd_url
         Sort Key: t1.c2
         ->  Foreign Scan on public.ft1 t1
               Output: c1, c2, c3, c4, c5, c6, c7, c8, __spd_url
               Filter: (t1.c1 === t1.c2)
               Node: postgres_srv / Status: Alive
                 Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1"
(10 rows)

SELECT * FROM ft1 t1 WHERE t1.c1 === t1.c2 order by t1.c2 limit 1;
 c1 | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8  |   __spd_url    
----+----+-------+------------------------------+--------------------------+----+------------+-----+----------------
  1 |  1 | 00001 | Fri Jan 02 00:00:00 1970 PST | Fri Jan 02 00:00:00 1970 | 1  | 1          | foo | /postgres_srv/
(1 row)

-- but let's put them in an extension ...
ALTER EXTENSION postgres_fdw ADD FUNCTION postgres_fdw_abs(int);
ALTER EXTENSION postgres_fdw ADD OPERATOR === (int, int);
ALTER SERVER postgres_srv OPTIONS (ADD extensions 'postgres_fdw');
-- ... now they can be shipped
EXPLAIN (VERBOSE, COSTS OFF)
  SELECT count(c3) FROM ft1 t1 WHERE t1.c1 = postgres_fdw_abs(t1.c2);
                                           QUERY PLAN                                            
-------------------------------------------------------------------------------------------------
 Foreign Scan
   Output: (count(c3))
   Node: postgres_srv / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (public.ft1__postgres_srv__0)
     Remote SQL: SELECT count(c3) FROM "S 1"."T 1" WHERE (("C 1" = public.postgres_fdw_abs(c2)))
(6 rows)

-- SELECT count(c3) FROM ft1 t1 WHERE t1.c1 = postgres_fdw_abs(t1.c2);
EXPLAIN (VERBOSE, COSTS OFF)
  SELECT count(c3) FROM ft1 t1 WHERE t1.c1 === t1.c2;
                                        QUERY PLAN                                         
-------------------------------------------------------------------------------------------
 Foreign Scan
   Output: (count(c3))
   Node: postgres_srv / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (public.ft1__postgres_srv__0)
     Remote SQL: SELECT count(c3) FROM "S 1"."T 1" WHERE (("C 1" OPERATOR(public.===) c2))
(6 rows)

-- SELECT count(c3) FROM ft1 t1 WHERE t1.c1 === t1.c2;
-- and both ORDER BY and LIMIT can be shipped
EXPLAIN (VERBOSE, COSTS OFF)
  SELECT * FROM ft1 t1 WHERE t1.c1 === t1.c2 order by t1.c2 limit 1;
                                                          QUERY PLAN                                                           
-------------------------------------------------------------------------------------------------------------------------------
 Limit
   Output: c1, c2, c3, c4, c5, c6, c7, c8, __spd_url
   ->  Sort
         Output: c1, c2, c3, c4, c5, c6, c7, c8, __spd_url
         Sort Key: t1.c2
         ->  Foreign Scan on public.ft1 t1
               Output: c1, c2, c3, c4, c5, c6, c7, c8, __spd_url
               Node: postgres_srv / Status: Alive
                 Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE (("C 1" OPERATOR(public.===) c2))
(9 rows)

--SELECT * FROM ft1 t1 WHERE t1.c1 === t1.c2 order by t1.c2 limit 1;
-- ===================================================================
-- JOIN queries
-- ===================================================================
-- Analyze ft4 and ft5 so that we have better statistics. These tables do not
-- have use_remote_estimate set.
ANALYZE ft4;
WARNING:  skipping "ft4" --- cannot analyze this foreign table
ANALYZE ft5;
WARNING:  skipping "ft5" --- cannot analyze this foreign table
-- join two tables
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10;
                                QUERY PLAN                                 
---------------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c1, t1.c3
   ->  Sort
         Output: t1.c1, t2.c1, t1.c3
         Sort Key: t1.c3, t1.c1
         ->  Merge Join
               Output: t1.c1, t2.c1, t1.c3
               Merge Cond: (t1.c1 = t2.c1)
               ->  Sort
                     Output: t1.c1, t1.c3
                     Sort Key: t1.c1
                     ->  Foreign Scan on public.ft1 t1
                           Output: t1.c1, t1.c3
                           Node: postgres_srv / Status: Alive
                             Remote SQL: SELECT "C 1", c3 FROM "S 1"."T 1"
               ->  Sort
                     Output: t2.c1
                     Sort Key: t2.c1
                     ->  Foreign Scan on public.ft2 t2
                           Output: t2.c1
                           Node: postgres_srv / Status: Alive
                             Remote SQL: SELECT "C 1" FROM "S 1"."T 1"
(22 rows)

SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10;
 c1  | c1  
-----+-----
 101 | 101
 102 | 102
 103 | 103
 104 | 104
 105 | 105
 106 | 106
 107 | 107
 108 | 108
 109 | 109
 110 | 110
(10 rows)

-- join three tables
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2, t3.c3 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) JOIN ft4 t3 ON (t3.c1 = t1.c1) ORDER BY t1.c3, t1.c1 OFFSET 10 LIMIT 10;
                                      QUERY PLAN                                       
---------------------------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c2, t3.c3, t1.c3
   ->  Sort
         Output: t1.c1, t2.c2, t3.c3, t1.c3
         Sort Key: t1.c3, t1.c1
         ->  Merge Join
               Output: t1.c1, t2.c2, t3.c3, t1.c3
               Merge Cond: (t3.c1 = t1.c1)
               ->  Sort
                     Output: t3.c3, t3.c1
                     Sort Key: t3.c1
                     ->  Foreign Scan on public.ft4 t3
                           Output: t3.c3, t3.c1
                           Node: postgres_srv / Status: Alive
                             Remote SQL: SELECT c1, c3 FROM "S 1"."T 3"
               ->  Materialize
                     Output: t1.c1, t1.c3, t2.c2, t2.c1
                     ->  Merge Join
                           Output: t1.c1, t1.c3, t2.c2, t2.c1
                           Merge Cond: (t1.c1 = t2.c1)
                           ->  Sort
                                 Output: t1.c1, t1.c3
                                 Sort Key: t1.c1
                                 ->  Foreign Scan on public.ft1 t1
                                       Output: t1.c1, t1.c3
                                       Node: postgres_srv / Status: Alive
                                         Remote SQL: SELECT "C 1", c3 FROM "S 1"."T 1"
                           ->  Sort
                                 Output: t2.c2, t2.c1
                                 Sort Key: t2.c1
                                 ->  Foreign Scan on public.ft2 t2
                                       Output: t2.c2, t2.c1
                                       Node: postgres_srv / Status: Alive
                                         Remote SQL: SELECT "C 1", c2 FROM "S 1"."T 1"
(34 rows)

SELECT t1.c1, t2.c2, t3.c3 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) JOIN ft4 t3 ON (t3.c1 = t1.c1) ORDER BY t1.c3, t1.c1 OFFSET 10 LIMIT 10;
 c1 | c2 |   c3   
----+----+--------
 22 |  2 | AAA022
 24 |  4 | AAA024
 26 |  6 | AAA026
 28 |  8 | AAA028
 30 |  0 | AAA030
 32 |  2 | AAA032
 34 |  4 | AAA034
 36 |  6 | AAA036
 38 |  8 | AAA038
 40 |  0 | AAA040
(10 rows)

-- left outer join
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1 FROM ft4 t1 LEFT JOIN ft5 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1 OFFSET 10 LIMIT 10;
                             QUERY PLAN                             
--------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c1
   ->  Sort
         Output: t1.c1, t2.c1
         Sort Key: t1.c1, t2.c1
         ->  Merge Left Join
               Output: t1.c1, t2.c1
               Merge Cond: (t1.c1 = t2.c1)
               ->  Sort
                     Output: t1.c1
                     Sort Key: t1.c1
                     ->  Foreign Scan on public.ft4 t1
                           Output: t1.c1
                           Node: postgres_srv / Status: Alive
                             Remote SQL: SELECT c1 FROM "S 1"."T 3"
               ->  Sort
                     Output: t2.c1
                     Sort Key: t2.c1
                     ->  Foreign Scan on public.ft5 t2
                           Output: t2.c1
                           Node: postgres_srv / Status: Alive
                             Remote SQL: SELECT c1 FROM "S 1"."T 4"
(22 rows)

SELECT t1.c1, t2.c1 FROM ft4 t1 LEFT JOIN ft5 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1 OFFSET 10 LIMIT 10;
 c1 | c1 
----+----
 22 |   
 24 | 24
 26 |   
 28 |   
 30 | 30
 32 |   
 34 |   
 36 | 36
 38 |   
 40 |   
(10 rows)

-- left outer join three tables
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 LEFT JOIN ft2 t2 ON (t1.c1 = t2.c1) LEFT JOIN ft4 t3 ON (t2.c1 = t3.c1) OFFSET 10 LIMIT 10;
                                QUERY PLAN                                 
---------------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c2, t3.c3
   ->  Nested Loop Left Join
         Output: t1.c1, t2.c2, t3.c3
         Join Filter: (t2.c1 = t3.c1)
         ->  Nested Loop Left Join
               Output: t1.c1, t2.c2, t2.c1
               Join Filter: (t1.c1 = t2.c1)
               ->  Foreign Scan on public.ft2 t1
                     Output: t1.c1
                     Node: postgres_srv / Status: Alive
                       Remote SQL: SELECT "C 1" FROM "S 1"."T 1"
               ->  Materialize
                     Output: t2.c2, t2.c1
                     ->  Foreign Scan on public.ft2 t2
                           Output: t2.c2, t2.c1
                           Node: postgres_srv / Status: Alive
                             Remote SQL: SELECT "C 1", c2 FROM "S 1"."T 1"
         ->  Materialize
               Output: t3.c3, t3.c1
               ->  Foreign Scan on public.ft4 t3
                     Output: t3.c3, t3.c1
                     Node: postgres_srv / Status: Alive
                       Remote SQL: SELECT c1, c3 FROM "S 1"."T 3"
(24 rows)

SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 LEFT JOIN ft2 t2 ON (t1.c1 = t2.c1) LEFT JOIN ft4 t3 ON (t2.c1 = t3.c1) OFFSET 10 LIMIT 10;
 c1 | c2 |   c3   
----+----+--------
 11 |  1 | 
 12 |  2 | AAA012
 13 |  3 | 
 14 |  4 | AAA014
 15 |  5 | 
 16 |  6 | AAA016
 17 |  7 | 
 18 |  8 | AAA018
 19 |  9 | 
 20 |  0 | AAA020
(10 rows)

-- left outer join + placement of clauses.
-- clauses within the nullable side are not pulled up, but top level clause on
-- non-nullable side is pushed into non-nullable side
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t1.c2, t2.c1, t2.c2 FROM ft4 t1 LEFT JOIN (SELECT * FROM ft5 WHERE c1 < 10) t2 ON (t1.c1 = t2.c1) WHERE t1.c1 < 10;
                                  QUERY PLAN                                  
------------------------------------------------------------------------------
 Merge Left Join
   Output: t1.c1, t1.c2, ft5.c1, ft5.c2
   Merge Cond: (t1.c1 = ft5.c1)
   ->  Sort
         Output: t1.c1, t1.c2
         Sort Key: t1.c1
         ->  Foreign Scan on public.ft4 t1
               Output: t1.c1, t1.c2
               Node: postgres_srv / Status: Alive
                 Remote SQL: SELECT c1, c2 FROM "S 1"."T 3" WHERE ((c1 < 10))
   ->  Sort
         Output: ft5.c1, ft5.c2
         Sort Key: ft5.c1
         ->  Foreign Scan on public.ft5
               Output: ft5.c1, ft5.c2
               Node: postgres_srv / Status: Alive
                 Remote SQL: SELECT c1, c2 FROM "S 1"."T 4" WHERE ((c1 < 10))
(17 rows)

SELECT t1.c1, t1.c2, t2.c1, t2.c2 FROM ft4 t1 LEFT JOIN (SELECT * FROM ft5 WHERE c1 < 10) t2 ON (t1.c1 = t2.c1) WHERE t1.c1 < 10;
 c1 | c2 | c1 | c2 
----+----+----+----
  2 |  3 |    |   
  4 |  5 |    |   
  6 |  7 |  6 |  7
  8 |  9 |    |   
(4 rows)

-- clauses within the nullable side are not pulled up, but the top level clause
-- on nullable side is not pushed down into nullable side
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t1.c2, t2.c1, t2.c2 FROM ft4 t1 LEFT JOIN (SELECT * FROM ft5 WHERE c1 < 10) t2 ON (t1.c1 = t2.c1)
			WHERE (t2.c1 < 10 OR t2.c1 IS NULL) AND t1.c1 < 10;
                                  QUERY PLAN                                  
------------------------------------------------------------------------------
 Merge Left Join
   Output: t1.c1, t1.c2, ft5.c1, ft5.c2
   Merge Cond: (t1.c1 = ft5.c1)
   Filter: ((ft5.c1 < 10) OR (ft5.c1 IS NULL))
   ->  Sort
         Output: t1.c1, t1.c2
         Sort Key: t1.c1
         ->  Foreign Scan on public.ft4 t1
               Output: t1.c1, t1.c2
               Node: postgres_srv / Status: Alive
                 Remote SQL: SELECT c1, c2 FROM "S 1"."T 3" WHERE ((c1 < 10))
   ->  Sort
         Output: ft5.c1, ft5.c2
         Sort Key: ft5.c1
         ->  Foreign Scan on public.ft5
               Output: ft5.c1, ft5.c2
               Node: postgres_srv / Status: Alive
                 Remote SQL: SELECT c1, c2 FROM "S 1"."T 4" WHERE ((c1 < 10))
(18 rows)

SELECT t1.c1, t1.c2, t2.c1, t2.c2 FROM ft4 t1 LEFT JOIN (SELECT * FROM ft5 WHERE c1 < 10) t2 ON (t1.c1 = t2.c1)
			WHERE (t2.c1 < 10 OR t2.c1 IS NULL) AND t1.c1 < 10;
 c1 | c2 | c1 | c2 
----+----+----+----
  2 |  3 |    |   
  4 |  5 |    |   
  6 |  7 |  6 |  7
  8 |  9 |    |   
(4 rows)

-- right outer join
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1 FROM ft5 t1 RIGHT JOIN ft4 t2 ON (t1.c1 = t2.c1) ORDER BY t2.c1, t1.c1 OFFSET 10 LIMIT 10;
                             QUERY PLAN                             
--------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c1
   ->  Sort
         Output: t1.c1, t2.c1
         Sort Key: t2.c1, t1.c1
         ->  Merge Left Join
               Output: t1.c1, t2.c1
               Merge Cond: (t2.c1 = t1.c1)
               ->  Sort
                     Output: t2.c1
                     Sort Key: t2.c1
                     ->  Foreign Scan on public.ft4 t2
                           Output: t2.c1
                           Node: postgres_srv / Status: Alive
                             Remote SQL: SELECT c1 FROM "S 1"."T 3"
               ->  Sort
                     Output: t1.c1
                     Sort Key: t1.c1
                     ->  Foreign Scan on public.ft5 t1
                           Output: t1.c1
                           Node: postgres_srv / Status: Alive
                             Remote SQL: SELECT c1 FROM "S 1"."T 4"
(22 rows)

SELECT t1.c1, t2.c1 FROM ft5 t1 RIGHT JOIN ft4 t2 ON (t1.c1 = t2.c1) ORDER BY t2.c1, t1.c1 OFFSET 10 LIMIT 10;
 c1 | c1 
----+----
    | 22
 24 | 24
    | 26
    | 28
 30 | 30
    | 32
    | 34
 36 | 36
    | 38
    | 40
(10 rows)

-- right outer join three tables
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 RIGHT JOIN ft2 t2 ON (t1.c1 = t2.c1) RIGHT JOIN ft4 t3 ON (t2.c1 = t3.c1) OFFSET 10 LIMIT 10;
                                QUERY PLAN                                 
---------------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c2, t3.c3
   ->  Nested Loop Left Join
         Output: t1.c1, t2.c2, t3.c3
         Join Filter: (t1.c1 = t2.c1)
         ->  Nested Loop Left Join
               Output: t3.c3, t2.c2, t2.c1
               Join Filter: (t2.c1 = t3.c1)
               ->  Foreign Scan on public.ft4 t3
                     Output: t3.c3, t3.c1
                     Node: postgres_srv / Status: Alive
                       Remote SQL: SELECT c1, c3 FROM "S 1"."T 3"
               ->  Materialize
                     Output: t2.c2, t2.c1
                     ->  Foreign Scan on public.ft2 t2
                           Output: t2.c2, t2.c1
                           Node: postgres_srv / Status: Alive
                             Remote SQL: SELECT "C 1", c2 FROM "S 1"."T 1"
         ->  Materialize
               Output: t1.c1
               ->  Foreign Scan on public.ft2 t1
                     Output: t1.c1
                     Node: postgres_srv / Status: Alive
                       Remote SQL: SELECT "C 1" FROM "S 1"."T 1"
(24 rows)

SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 RIGHT JOIN ft2 t2 ON (t1.c1 = t2.c1) RIGHT JOIN ft4 t3 ON (t2.c1 = t3.c1) OFFSET 10 LIMIT 10;
 c1 | c2 |   c3   
----+----+--------
 22 |  2 | AAA022
 24 |  4 | AAA024
 26 |  6 | AAA026
 28 |  8 | AAA028
 30 |  0 | AAA030
 32 |  2 | AAA032
 34 |  4 | AAA034
 36 |  6 | AAA036
 38 |  8 | AAA038
 40 |  0 | AAA040
(10 rows)

-- full outer join
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1 FROM ft4 t1 FULL JOIN ft5 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1 OFFSET 45 LIMIT 10;
                             QUERY PLAN                             
--------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c1
   ->  Sort
         Output: t1.c1, t2.c1
         Sort Key: t1.c1, t2.c1
         ->  Merge Full Join
               Output: t1.c1, t2.c1
               Merge Cond: (t1.c1 = t2.c1)
               ->  Sort
                     Output: t1.c1
                     Sort Key: t1.c1
                     ->  Foreign Scan on public.ft4 t1
                           Output: t1.c1
                           Node: postgres_srv / Status: Alive
                             Remote SQL: SELECT c1 FROM "S 1"."T 3"
               ->  Sort
                     Output: t2.c1
                     Sort Key: t2.c1
                     ->  Foreign Scan on public.ft5 t2
                           Output: t2.c1
                           Node: postgres_srv / Status: Alive
                             Remote SQL: SELECT c1 FROM "S 1"."T 4"
(22 rows)

SELECT t1.c1, t2.c1 FROM ft4 t1 FULL JOIN ft5 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1 OFFSET 45 LIMIT 10;
 c1  | c1 
-----+----
  92 |   
  94 |   
  96 | 96
  98 |   
 100 |   
     |  3
     |  9
     | 15
     | 21
     | 27
(10 rows)

-- full outer join with restrictions on the joining relations
-- a. the joining relations are both base relations
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1 FROM (SELECT c1 FROM ft4 WHERE c1 between 50 and 60) t1 FULL JOIN (SELECT c1 FROM ft5 WHERE c1 between 50 and 60) t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1;
                                            QUERY PLAN                                            
--------------------------------------------------------------------------------------------------
 Sort
   Output: ft4.c1, ft5.c1
   Sort Key: ft4.c1, ft5.c1
   ->  Hash Full Join
         Output: ft4.c1, ft5.c1
         Hash Cond: (ft4.c1 = ft5.c1)
         ->  Foreign Scan on public.ft4
               Output: ft4.c1
               Node: postgres_srv / Status: Alive
                 Remote SQL: SELECT c1 FROM "S 1"."T 3" WHERE ((c1 >= 50)) AND ((c1 <= 60))
         ->  Hash
               Output: ft5.c1
               ->  Foreign Scan on public.ft5
                     Output: ft5.c1
                     Node: postgres_srv / Status: Alive
                       Remote SQL: SELECT c1 FROM "S 1"."T 4" WHERE ((c1 >= 50)) AND ((c1 <= 60))
(16 rows)

SELECT t1.c1, t2.c1 FROM (SELECT c1 FROM ft4 WHERE c1 between 50 and 60) t1 FULL JOIN (SELECT c1 FROM ft5 WHERE c1 between 50 and 60) t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1;
 c1 | c1 
----+----
 50 |   
 52 |   
 54 | 54
 56 |   
 58 |   
 60 | 60
    | 51
    | 57
(8 rows)

EXPLAIN (VERBOSE, COSTS OFF)
SELECT 1 FROM (SELECT c1 FROM ft4 WHERE c1 between 50 and 60) t1 FULL JOIN (SELECT c1 FROM ft5 WHERE c1 between 50 and 60) t2 ON (TRUE) OFFSET 10 LIMIT 10;
                                            QUERY PLAN                                            
--------------------------------------------------------------------------------------------------
 Limit
   Output: 1
   ->  Merge Full Join
         Output: 1
         ->  Foreign Scan on public.ft4
               Node: postgres_srv / Status: Alive
                 Remote SQL: SELECT c1 FROM "S 1"."T 3" WHERE ((c1 >= 50)) AND ((c1 <= 60))
         ->  Materialize
               ->  Foreign Scan on public.ft5
                     Node: postgres_srv / Status: Alive
                       Remote SQL: SELECT c1 FROM "S 1"."T 4" WHERE ((c1 >= 50)) AND ((c1 <= 60))
(11 rows)

SELECT 1 FROM (SELECT c1 FROM ft4 WHERE c1 between 50 and 60) t1 FULL JOIN (SELECT c1 FROM ft5 WHERE c1 between 50 and 60) t2 ON (TRUE) OFFSET 10 LIMIT 10;
 ?column? 
----------
        1
        1
        1
        1
        1
        1
        1
        1
        1
        1
(10 rows)

-- b. one of the joining relations is a base relation and the other is a join
-- relation
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, ss.a, ss.b FROM (SELECT c1 FROM ft4 WHERE c1 between 50 and 60) t1 FULL JOIN (SELECT t2.c1, t3.c1 FROM ft4 t2 LEFT JOIN ft5 t3 ON (t2.c1 = t3.c1) WHERE (t2.c1 between 50 and 60)) ss(a, b) ON (t1.c1 = ss.a) ORDER BY t1.c1, ss.a, ss.b;
                                               QUERY PLAN                                               
--------------------------------------------------------------------------------------------------------
 Sort
   Output: ft4.c1, t2.c1, t3.c1
   Sort Key: ft4.c1, t2.c1, t3.c1
   ->  Hash Full Join
         Output: ft4.c1, t2.c1, t3.c1
         Hash Cond: (t2.c1 = ft4.c1)
         ->  Hash Right Join
               Output: t2.c1, t3.c1
               Hash Cond: (t3.c1 = t2.c1)
               ->  Foreign Scan on public.ft5 t3
                     Output: t3.c1
                     Node: postgres_srv / Status: Alive
                       Remote SQL: SELECT c1 FROM "S 1"."T 4"
               ->  Hash
                     Output: t2.c1
                     ->  Foreign Scan on public.ft4 t2
                           Output: t2.c1
                           Node: postgres_srv / Status: Alive
                             Remote SQL: SELECT c1 FROM "S 1"."T 3" WHERE ((c1 >= 50)) AND ((c1 <= 60))
         ->  Hash
               Output: ft4.c1
               ->  Foreign Scan on public.ft4
                     Output: ft4.c1
                     Node: postgres_srv / Status: Alive
                       Remote SQL: SELECT c1 FROM "S 1"."T 3" WHERE ((c1 >= 50)) AND ((c1 <= 60))
(25 rows)

SELECT t1.c1, ss.a, ss.b FROM (SELECT c1 FROM ft4 WHERE c1 between 50 and 60) t1 FULL JOIN (SELECT t2.c1, t3.c1 FROM ft4 t2 LEFT JOIN ft5 t3 ON (t2.c1 = t3.c1) WHERE (t2.c1 between 50 and 60)) ss(a, b) ON (t1.c1 = ss.a) ORDER BY t1.c1, ss.a, ss.b;
 c1 | a  | b  
----+----+----
 50 | 50 |   
 52 | 52 |   
 54 | 54 | 54
 56 | 56 |   
 58 | 58 |   
 60 | 60 | 60
(6 rows)

-- c. test deparsing the remote query as nested subqueries
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, ss.a, ss.b FROM (SELECT c1 FROM ft4 WHERE c1 between 50 and 60) t1 FULL JOIN (SELECT t2.c1, t3.c1 FROM (SELECT c1 FROM ft4 WHERE c1 between 50 and 60) t2 FULL JOIN (SELECT c1 FROM ft5 WHERE c1 between 50 and 60) t3 ON (t2.c1 = t3.c1) WHERE t2.c1 IS NULL OR t2.c1 IS NOT NULL) ss(a, b) ON (t1.c1 = ss.a) ORDER BY t1.c1, ss.a, ss.b;
                                               QUERY PLAN                                               
--------------------------------------------------------------------------------------------------------
 Sort
   Output: ft4.c1, ft4_1.c1, ft5.c1
   Sort Key: ft4.c1, ft4_1.c1, ft5.c1
   ->  Hash Full Join
         Output: ft4.c1, ft4_1.c1, ft5.c1
         Hash Cond: (ft4_1.c1 = ft4.c1)
         ->  Hash Full Join
               Output: ft4_1.c1, ft5.c1
               Hash Cond: (ft4_1.c1 = ft5.c1)
               Filter: ((ft4_1.c1 IS NULL) OR (ft4_1.c1 IS NOT NULL))
               ->  Foreign Scan on public.ft4 ft4_1
                     Output: ft4_1.c1
                     Node: postgres_srv / Status: Alive
                       Remote SQL: SELECT c1 FROM "S 1"."T 3" WHERE ((c1 >= 50)) AND ((c1 <= 60))
               ->  Hash
                     Output: ft5.c1
                     ->  Foreign Scan on public.ft5
                           Output: ft5.c1
                           Node: postgres_srv / Status: Alive
                             Remote SQL: SELECT c1 FROM "S 1"."T 4" WHERE ((c1 >= 50)) AND ((c1 <= 60))
         ->  Hash
               Output: ft4.c1
               ->  Foreign Scan on public.ft4
                     Output: ft4.c1
                     Node: postgres_srv / Status: Alive
                       Remote SQL: SELECT c1 FROM "S 1"."T 3" WHERE ((c1 >= 50)) AND ((c1 <= 60))
(26 rows)

SELECT t1.c1, ss.a, ss.b FROM (SELECT c1 FROM ft4 WHERE c1 between 50 and 60) t1 FULL JOIN (SELECT t2.c1, t3.c1 FROM (SELECT c1 FROM ft4 WHERE c1 between 50 and 60) t2 FULL JOIN (SELECT c1 FROM ft5 WHERE c1 between 50 and 60) t3 ON (t2.c1 = t3.c1) WHERE t2.c1 IS NULL OR t2.c1 IS NOT NULL) ss(a, b) ON (t1.c1 = ss.a) ORDER BY t1.c1, ss.a, ss.b;
 c1 | a  | b  
----+----+----
 50 | 50 |   
 52 | 52 |   
 54 | 54 | 54
 56 | 56 |   
 58 | 58 |   
 60 | 60 | 60
    |    | 51
    |    | 57
(8 rows)

-- d. test deparsing rowmarked relations as subqueries
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, ss.a, ss.b FROM (SELECT c1 FROM "S 1"."T 3" WHERE c1 = 50) t1 INNER JOIN (SELECT t2.c1, t3.c1 FROM (SELECT c1 FROM ft4 WHERE c1 between 50 and 60) t2 FULL JOIN (SELECT c1 FROM ft5 WHERE c1 between 50 and 60) t3 ON (t2.c1 = t3.c1) WHERE t2.c1 IS NULL OR t2.c1 IS NOT NULL) ss(a, b) ON (TRUE) ORDER BY t1.c1, ss.a, ss.b FOR UPDATE OF t1;
                                                      QUERY PLAN                                                      
----------------------------------------------------------------------------------------------------------------------
 LockRows
   Output: "T 3".c1, ft4.c1, ft5.c1, "T 3".*, ft4.*, ft5.*
   ->  Sort
         Output: "T 3".c1, ft4.c1, ft5.c1, "T 3".*, ft4.*, ft5.*
         Sort Key: ft4.c1, ft5.c1
         ->  Nested Loop
               Output: "T 3".c1, ft4.c1, ft5.c1, "T 3".*, ft4.*, ft5.*
               ->  Foreign Scan on "S 1"."T 3"
                     Output: "T 3".c1, "T 3".*
                     Remote SQL: SELECT c1, c2, c3 FROM "S 1"."T 3" WHERE ((c1 = 50)) FOR UPDATE
               ->  Hash Full Join
                     Output: ft4.c1, ft4.*, ft5.c1, ft5.*
                     Hash Cond: (ft4.c1 = ft5.c1)
                     Filter: ((ft4.c1 IS NULL) OR (ft4.c1 IS NOT NULL))
                     ->  Foreign Scan on public.ft4
                           Output: ft4.c1, ft4.*
                           Node: postgres_srv / Status: Alive
                             Remote SQL: SELECT c1, c2, c3 FROM "S 1"."T 3" WHERE ((c1 >= 50)) AND ((c1 <= 60))
                     ->  Hash
                           Output: ft5.c1, ft5.*
                           ->  Foreign Scan on public.ft5
                                 Output: ft5.c1, ft5.*
                                 Node: postgres_srv / Status: Alive
                                   Remote SQL: SELECT c1, c2, c3 FROM "S 1"."T 4" WHERE ((c1 >= 50)) AND ((c1 <= 60))
(24 rows)

SELECT t1.c1, ss.a, ss.b FROM (SELECT c1 FROM "S 1"."T 3" WHERE c1 = 50) t1 INNER JOIN (SELECT t2.c1, t3.c1 FROM (SELECT c1 FROM ft4 WHERE c1 between 50 and 60) t2 FULL JOIN (SELECT c1 FROM ft5 WHERE c1 between 50 and 60) t3 ON (t2.c1 = t3.c1) WHERE t2.c1 IS NULL OR t2.c1 IS NOT NULL) ss(a, b) ON (TRUE) ORDER BY t1.c1, ss.a, ss.b FOR UPDATE OF t1;
 c1 | a  | b  
----+----+----
 50 | 50 |   
 50 | 52 |   
 50 | 54 | 54
 50 | 56 |   
 50 | 58 |   
 50 | 60 | 60
 50 |    | 51
 50 |    | 57
(8 rows)

-- full outer join + inner join
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1, t3.c1 FROM ft4 t1 INNER JOIN ft5 t2 ON (t1.c1 = t2.c1 + 1 and t1.c1 between 50 and 60) FULL JOIN ft4 t3 ON (t2.c1 = t3.c1) ORDER BY t1.c1, t2.c1, t3.c1 LIMIT 10;
                                                     QUERY PLAN                                                     
--------------------------------------------------------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c1, t3.c1
   ->  Sort
         Output: t1.c1, t2.c1, t3.c1
         Sort Key: t1.c1, t2.c1, t3.c1
         ->  Hash Full Join
               Output: t1.c1, t2.c1, t3.c1
               Hash Cond: (t3.c1 = t2.c1)
               ->  Foreign Scan on public.ft4 t3
                     Output: t3.c1
                     Node: postgres_srv / Status: Alive
                       Remote SQL: SELECT c1 FROM "S 1"."T 3"
               ->  Hash
                     Output: t1.c1, t2.c1
                     ->  Hash Join
                           Output: t1.c1, t2.c1
                           Hash Cond: ((t2.c1 + 1) = t1.c1)
                           ->  Foreign Scan on public.ft5 t2
                                 Output: t2.c1
                                 Node: postgres_srv / Status: Alive
                                   Remote SQL: SELECT c1 FROM "S 1"."T 4"
                           ->  Hash
                                 Output: t1.c1
                                 ->  Foreign Scan on public.ft4 t1
                                       Output: t1.c1
                                       Node: postgres_srv / Status: Alive
                                         Remote SQL: SELECT c1 FROM "S 1"."T 3" WHERE ((c1 >= 50)) AND ((c1 <= 60))
(27 rows)

SELECT t1.c1, t2.c1, t3.c1 FROM ft4 t1 INNER JOIN ft5 t2 ON (t1.c1 = t2.c1 + 1 and t1.c1 between 50 and 60) FULL JOIN ft4 t3 ON (t2.c1 = t3.c1) ORDER BY t1.c1, t2.c1, t3.c1 LIMIT 10;
 c1 | c1 | c1 
----+----+----
 52 | 51 |   
 58 | 57 |   
    |    |  2
    |    |  4
    |    |  6
    |    |  8
    |    | 10
    |    | 12
    |    | 14
    |    | 16
(10 rows)

-- full outer join three tables
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 FULL JOIN ft2 t2 ON (t1.c1 = t2.c1) FULL JOIN ft4 t3 ON (t2.c1 = t3.c1) OFFSET 10 LIMIT 10;
                                QUERY PLAN                                 
---------------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c2, t3.c3
   ->  Hash Full Join
         Output: t1.c1, t2.c2, t3.c3
         Hash Cond: (t2.c1 = t3.c1)
         ->  Hash Full Join
               Output: t1.c1, t2.c2, t2.c1
               Hash Cond: (t1.c1 = t2.c1)
               ->  Foreign Scan on public.ft2 t1
                     Output: t1.c1
                     Node: postgres_srv / Status: Alive
                       Remote SQL: SELECT "C 1" FROM "S 1"."T 1"
               ->  Hash
                     Output: t2.c2, t2.c1
                     ->  Foreign Scan on public.ft2 t2
                           Output: t2.c2, t2.c1
                           Node: postgres_srv / Status: Alive
                             Remote SQL: SELECT "C 1", c2 FROM "S 1"."T 1"
         ->  Hash
               Output: t3.c3, t3.c1
               ->  Foreign Scan on public.ft4 t3
                     Output: t3.c3, t3.c1
                     Node: postgres_srv / Status: Alive
                       Remote SQL: SELECT c1, c3 FROM "S 1"."T 3"
(24 rows)

SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 FULL JOIN ft2 t2 ON (t1.c1 = t2.c1) FULL JOIN ft4 t3 ON (t2.c1 = t3.c1) OFFSET 10 LIMIT 10;
 c1 | c2 |   c3   
----+----+--------
 11 |  1 | 
 12 |  2 | AAA012
 13 |  3 | 
 14 |  4 | AAA014
 15 |  5 | 
 16 |  6 | AAA016
 17 |  7 | 
 18 |  8 | AAA018
 19 |  9 | 
 20 |  0 | AAA020
(10 rows)

-- full outer join + right outer join
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 FULL JOIN ft2 t2 ON (t1.c1 = t2.c1) RIGHT JOIN ft4 t3 ON (t2.c1 = t3.c1) OFFSET 10 LIMIT 10;
                                QUERY PLAN                                 
---------------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c2, t3.c3
   ->  Nested Loop Left Join
         Output: t1.c1, t2.c2, t3.c3
         Join Filter: (t1.c1 = t2.c1)
         ->  Nested Loop Left Join
               Output: t3.c3, t2.c2, t2.c1
               Join Filter: (t2.c1 = t3.c1)
               ->  Foreign Scan on public.ft4 t3
                     Output: t3.c3, t3.c1
                     Node: postgres_srv / Status: Alive
                       Remote SQL: SELECT c1, c3 FROM "S 1"."T 3"
               ->  Materialize
                     Output: t2.c2, t2.c1
                     ->  Foreign Scan on public.ft2 t2
                           Output: t2.c2, t2.c1
                           Node: postgres_srv / Status: Alive
                             Remote SQL: SELECT "C 1", c2 FROM "S 1"."T 1"
         ->  Materialize
               Output: t1.c1
               ->  Foreign Scan on public.ft2 t1
                     Output: t1.c1
                     Node: postgres_srv / Status: Alive
                       Remote SQL: SELECT "C 1" FROM "S 1"."T 1"
(24 rows)

SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 FULL JOIN ft2 t2 ON (t1.c1 = t2.c1) RIGHT JOIN ft4 t3 ON (t2.c1 = t3.c1) OFFSET 10 LIMIT 10;
 c1 | c2 |   c3   
----+----+--------
 22 |  2 | AAA022
 24 |  4 | AAA024
 26 |  6 | AAA026
 28 |  8 | AAA028
 30 |  0 | AAA030
 32 |  2 | AAA032
 34 |  4 | AAA034
 36 |  6 | AAA036
 38 |  8 | AAA038
 40 |  0 | AAA040
(10 rows)

-- right outer join + full outer join
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 RIGHT JOIN ft2 t2 ON (t1.c1 = t2.c1) FULL JOIN ft4 t3 ON (t2.c1 = t3.c1) OFFSET 10 LIMIT 10;
                              QUERY PLAN                               
-----------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c2, t3.c3
   ->  Hash Full Join
         Output: t1.c1, t2.c2, t3.c3
         Hash Cond: (t2.c1 = t3.c1)
         ->  Nested Loop Left Join
               Output: t2.c2, t2.c1, t1.c1
               Join Filter: (t1.c1 = t2.c1)
               ->  Foreign Scan on public.ft2 t2
                     Output: t2.c2, t2.c1
                     Node: postgres_srv / Status: Alive
                       Remote SQL: SELECT "C 1", c2 FROM "S 1"."T 1"
               ->  Materialize
                     Output: t1.c1
                     ->  Foreign Scan on public.ft2 t1
                           Output: t1.c1
                           Node: postgres_srv / Status: Alive
                             Remote SQL: SELECT "C 1" FROM "S 1"."T 1"
         ->  Hash
               Output: t3.c3, t3.c1
               ->  Foreign Scan on public.ft4 t3
                     Output: t3.c3, t3.c1
                     Node: postgres_srv / Status: Alive
                       Remote SQL: SELECT c1, c3 FROM "S 1"."T 3"
(24 rows)

SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 RIGHT JOIN ft2 t2 ON (t1.c1 = t2.c1) FULL JOIN ft4 t3 ON (t2.c1 = t3.c1) OFFSET 10 LIMIT 10;
 c1 | c2 |   c3   
----+----+--------
 11 |  1 | 
 12 |  2 | AAA012
 13 |  3 | 
 14 |  4 | AAA014
 15 |  5 | 
 16 |  6 | AAA016
 17 |  7 | 
 18 |  8 | AAA018
 19 |  9 | 
 20 |  0 | AAA020
(10 rows)

-- full outer join + left outer join
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 FULL JOIN ft2 t2 ON (t1.c1 = t2.c1) LEFT JOIN ft4 t3 ON (t2.c1 = t3.c1) OFFSET 10 LIMIT 10;
                                QUERY PLAN                                 
---------------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c2, t3.c3
   ->  Nested Loop Left Join
         Output: t1.c1, t2.c2, t3.c3
         Join Filter: (t2.c1 = t3.c1)
         ->  Hash Full Join
               Output: t1.c1, t2.c2, t2.c1
               Hash Cond: (t1.c1 = t2.c1)
               ->  Foreign Scan on public.ft2 t1
                     Output: t1.c1
                     Node: postgres_srv / Status: Alive
                       Remote SQL: SELECT "C 1" FROM "S 1"."T 1"
               ->  Hash
                     Output: t2.c2, t2.c1
                     ->  Foreign Scan on public.ft2 t2
                           Output: t2.c2, t2.c1
                           Node: postgres_srv / Status: Alive
                             Remote SQL: SELECT "C 1", c2 FROM "S 1"."T 1"
         ->  Materialize
               Output: t3.c3, t3.c1
               ->  Foreign Scan on public.ft4 t3
                     Output: t3.c3, t3.c1
                     Node: postgres_srv / Status: Alive
                       Remote SQL: SELECT c1, c3 FROM "S 1"."T 3"
(24 rows)

SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 FULL JOIN ft2 t2 ON (t1.c1 = t2.c1) LEFT JOIN ft4 t3 ON (t2.c1 = t3.c1) OFFSET 10 LIMIT 10;
 c1 | c2 |   c3   
----+----+--------
 11 |  1 | 
 12 |  2 | AAA012
 13 |  3 | 
 14 |  4 | AAA014
 15 |  5 | 
 16 |  6 | AAA016
 17 |  7 | 
 18 |  8 | AAA018
 19 |  9 | 
 20 |  0 | AAA020
(10 rows)

-- left outer join + full outer join
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 LEFT JOIN ft2 t2 ON (t1.c1 = t2.c1) FULL JOIN ft4 t3 ON (t2.c1 = t3.c1) OFFSET 10 LIMIT 10;
                                QUERY PLAN                                 
---------------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c2, t3.c3
   ->  Hash Full Join
         Output: t1.c1, t2.c2, t3.c3
         Hash Cond: (t2.c1 = t3.c1)
         ->  Nested Loop Left Join
               Output: t1.c1, t2.c2, t2.c1
               Join Filter: (t1.c1 = t2.c1)
               ->  Foreign Scan on public.ft2 t1
                     Output: t1.c1
                     Node: postgres_srv / Status: Alive
                       Remote SQL: SELECT "C 1" FROM "S 1"."T 1"
               ->  Materialize
                     Output: t2.c2, t2.c1
                     ->  Foreign Scan on public.ft2 t2
                           Output: t2.c2, t2.c1
                           Node: postgres_srv / Status: Alive
                             Remote SQL: SELECT "C 1", c2 FROM "S 1"."T 1"
         ->  Hash
               Output: t3.c3, t3.c1
               ->  Foreign Scan on public.ft4 t3
                     Output: t3.c3, t3.c1
                     Node: postgres_srv / Status: Alive
                       Remote SQL: SELECT c1, c3 FROM "S 1"."T 3"
(24 rows)

SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 LEFT JOIN ft2 t2 ON (t1.c1 = t2.c1) FULL JOIN ft4 t3 ON (t2.c1 = t3.c1) OFFSET 10 LIMIT 10;
 c1 | c2 |   c3   
----+----+--------
 11 |  1 | 
 12 |  2 | AAA012
 13 |  3 | 
 14 |  4 | AAA014
 15 |  5 | 
 16 |  6 | AAA016
 17 |  7 | 
 18 |  8 | AAA018
 19 |  9 | 
 20 |  0 | AAA020
(10 rows)

-- right outer join + left outer join
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 RIGHT JOIN ft2 t2 ON (t1.c1 = t2.c1) LEFT JOIN ft4 t3 ON (t2.c1 = t3.c1) OFFSET 10 LIMIT 10;
                              QUERY PLAN                               
-----------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c2, t3.c3
   ->  Nested Loop Left Join
         Output: t1.c1, t2.c2, t3.c3
         Join Filter: (t2.c1 = t3.c1)
         ->  Nested Loop Left Join
               Output: t2.c2, t2.c1, t1.c1
               Join Filter: (t1.c1 = t2.c1)
               ->  Foreign Scan on public.ft2 t2
                     Output: t2.c2, t2.c1
                     Node: postgres_srv / Status: Alive
                       Remote SQL: SELECT "C 1", c2 FROM "S 1"."T 1"
               ->  Materialize
                     Output: t1.c1
                     ->  Foreign Scan on public.ft2 t1
                           Output: t1.c1
                           Node: postgres_srv / Status: Alive
                             Remote SQL: SELECT "C 1" FROM "S 1"."T 1"
         ->  Materialize
               Output: t3.c3, t3.c1
               ->  Foreign Scan on public.ft4 t3
                     Output: t3.c3, t3.c1
                     Node: postgres_srv / Status: Alive
                       Remote SQL: SELECT c1, c3 FROM "S 1"."T 3"
(24 rows)

SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 RIGHT JOIN ft2 t2 ON (t1.c1 = t2.c1) LEFT JOIN ft4 t3 ON (t2.c1 = t3.c1) OFFSET 10 LIMIT 10;
 c1 | c2 |   c3   
----+----+--------
 11 |  1 | 
 12 |  2 | AAA012
 13 |  3 | 
 14 |  4 | AAA014
 15 |  5 | 
 16 |  6 | AAA016
 17 |  7 | 
 18 |  8 | AAA018
 19 |  9 | 
 20 |  0 | AAA020
(10 rows)

-- left outer join + right outer join
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 LEFT JOIN ft2 t2 ON (t1.c1 = t2.c1) RIGHT JOIN ft4 t3 ON (t2.c1 = t3.c1) OFFSET 10 LIMIT 10;
                                QUERY PLAN                                 
---------------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c2, t3.c3
   ->  Hash Right Join
         Output: t1.c1, t2.c2, t3.c3
         Hash Cond: (t2.c1 = t3.c1)
         ->  Nested Loop
               Output: t1.c1, t2.c2, t2.c1
               Join Filter: (t1.c1 = t2.c1)
               ->  Foreign Scan on public.ft2 t1
                     Output: t1.c1
                     Node: postgres_srv / Status: Alive
                       Remote SQL: SELECT "C 1" FROM "S 1"."T 1"
               ->  Materialize
                     Output: t2.c2, t2.c1
                     ->  Foreign Scan on public.ft2 t2
                           Output: t2.c2, t2.c1
                           Node: postgres_srv / Status: Alive
                             Remote SQL: SELECT "C 1", c2 FROM "S 1"."T 1"
         ->  Hash
               Output: t3.c3, t3.c1
               ->  Foreign Scan on public.ft4 t3
                     Output: t3.c3, t3.c1
                     Node: postgres_srv / Status: Alive
                       Remote SQL: SELECT c1, c3 FROM "S 1"."T 3"
(24 rows)

SELECT t1.c1, t2.c2, t3.c3 FROM ft2 t1 LEFT JOIN ft2 t2 ON (t1.c1 = t2.c1) RIGHT JOIN ft4 t3 ON (t2.c1 = t3.c1) OFFSET 10 LIMIT 10;
 c1 | c2 |   c3   
----+----+--------
 22 |  2 | AAA022
 24 |  4 | AAA024
 26 |  6 | AAA026
 28 |  8 | AAA028
 30 |  0 | AAA030
 32 |  2 | AAA032
 34 |  4 | AAA034
 36 |  6 | AAA036
 38 |  8 | AAA038
 40 |  0 | AAA040
(10 rows)

-- full outer join + WHERE clause, only matched rows
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1 FROM ft4 t1 FULL JOIN ft5 t2 ON (t1.c1 = t2.c1) WHERE (t1.c1 = t2.c1 OR t1.c1 IS NULL) ORDER BY t1.c1, t2.c1 OFFSET 10 LIMIT 10;
                             QUERY PLAN                             
--------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c1
   ->  Sort
         Output: t1.c1, t2.c1
         Sort Key: t1.c1, t2.c1
         ->  Merge Full Join
               Output: t1.c1, t2.c1
               Merge Cond: (t1.c1 = t2.c1)
               Filter: ((t1.c1 = t2.c1) OR (t1.c1 IS NULL))
               ->  Sort
                     Output: t1.c1
                     Sort Key: t1.c1
                     ->  Foreign Scan on public.ft4 t1
                           Output: t1.c1
                           Node: postgres_srv / Status: Alive
                             Remote SQL: SELECT c1 FROM "S 1"."T 3"
               ->  Sort
                     Output: t2.c1
                     Sort Key: t2.c1
                     ->  Foreign Scan on public.ft5 t2
                           Output: t2.c1
                           Node: postgres_srv / Status: Alive
                             Remote SQL: SELECT c1 FROM "S 1"."T 4"
(23 rows)

SELECT t1.c1, t2.c1 FROM ft4 t1 FULL JOIN ft5 t2 ON (t1.c1 = t2.c1) WHERE (t1.c1 = t2.c1 OR t1.c1 IS NULL) ORDER BY t1.c1, t2.c1 OFFSET 10 LIMIT 10;
 c1 | c1 
----+----
 66 | 66
 72 | 72
 78 | 78
 84 | 84
 90 | 90
 96 | 96
    |  3
    |  9
    | 15
    | 21
(10 rows)

-- full outer join + WHERE clause with shippable extensions set
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2, t1.c3 FROM ft1 t1 FULL JOIN ft2 t2 ON (t1.c1 = t2.c1) WHERE postgres_fdw_abs(t1.c1) > 0 OFFSET 10 LIMIT 10;
                             QUERY PLAN                              
---------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c2, t1.c3
   ->  Hash Full Join
         Output: t1.c1, t2.c2, t1.c3
         Hash Cond: (t1.c1 = t2.c1)
         Filter: (postgres_fdw_abs(t1.c1) > 0)
         ->  Foreign Scan on public.ft1 t1
               Output: t1.c1, t1.c3
               Node: postgres_srv / Status: Alive
                 Remote SQL: SELECT "C 1", c3 FROM "S 1"."T 1"
         ->  Hash
               Output: t2.c2, t2.c1
               ->  Foreign Scan on public.ft2 t2
                     Output: t2.c2, t2.c1
                     Node: postgres_srv / Status: Alive
                       Remote SQL: SELECT "C 1", c2 FROM "S 1"."T 1"
(16 rows)

ALTER SERVER postgres_srv OPTIONS (DROP extensions);
-- full outer join + WHERE clause with shippable extensions not set
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2, t1.c3 FROM ft1 t1 FULL JOIN ft2 t2 ON (t1.c1 = t2.c1) WHERE postgres_fdw_abs(t1.c1) > 0 OFFSET 10 LIMIT 10;
                             QUERY PLAN                              
---------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c2, t1.c3
   ->  Hash Full Join
         Output: t1.c1, t2.c2, t1.c3
         Hash Cond: (t1.c1 = t2.c1)
         Filter: (postgres_fdw_abs(t1.c1) > 0)
         ->  Foreign Scan on public.ft1 t1
               Output: t1.c1, t1.c3
               Node: postgres_srv / Status: Alive
                 Remote SQL: SELECT "C 1", c3 FROM "S 1"."T 1"
         ->  Hash
               Output: t2.c2, t2.c1
               ->  Foreign Scan on public.ft2 t2
                     Output: t2.c2, t2.c1
                     Node: postgres_srv / Status: Alive
                       Remote SQL: SELECT "C 1", c2 FROM "S 1"."T 1"
(16 rows)

ALTER SERVER postgres_srv OPTIONS (ADD extensions 'postgres_fdw');
-- join two tables with FOR UPDATE clause
-- tests whole-row reference for row marks
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10 FOR UPDATE OF t1;
                                               QUERY PLAN                                                
---------------------------------------------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c1, t1.c3, t1.*, t2.*
   ->  LockRows
         Output: t1.c1, t2.c1, t1.c3, t1.*, t2.*
         ->  Sort
               Output: t1.c1, t2.c1, t1.c3, t1.*, t2.*
               Sort Key: t1.c3, t1.c1
               ->  Merge Join
                     Output: t1.c1, t2.c1, t1.c3, t1.*, t2.*
                     Merge Cond: (t1.c1 = t2.c1)
                     ->  Sort
                           Output: t1.c1, t1.c3, t1.*
                           Sort Key: t1.c1
                           ->  Foreign Scan on public.ft1 t1
                                 Output: t1.c1, t1.c3, t1.*
                                 Node: postgres_srv / Status: Alive
                                   Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1"
                     ->  Sort
                           Output: t2.c1, t2.*
                           Sort Key: t2.c1
                           ->  Foreign Scan on public.ft2 t2
                                 Output: t2.c1, t2.*
                                 Node: postgres_srv / Status: Alive
                                   Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1"
(24 rows)

SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10 FOR UPDATE OF t1;
 c1  | c1  
-----+-----
 101 | 101
 102 | 102
 103 | 103
 104 | 104
 105 | 105
 106 | 106
 107 | 107
 108 | 108
 109 | 109
 110 | 110
(10 rows)

EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10 FOR UPDATE;
                                               QUERY PLAN                                                
---------------------------------------------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c1, t1.c3, t1.*, t2.*
   ->  LockRows
         Output: t1.c1, t2.c1, t1.c3, t1.*, t2.*
         ->  Sort
               Output: t1.c1, t2.c1, t1.c3, t1.*, t2.*
               Sort Key: t1.c3, t1.c1
               ->  Merge Join
                     Output: t1.c1, t2.c1, t1.c3, t1.*, t2.*
                     Merge Cond: (t1.c1 = t2.c1)
                     ->  Sort
                           Output: t1.c1, t1.c3, t1.*
                           Sort Key: t1.c1
                           ->  Foreign Scan on public.ft1 t1
                                 Output: t1.c1, t1.c3, t1.*
                                 Node: postgres_srv / Status: Alive
                                   Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1"
                     ->  Sort
                           Output: t2.c1, t2.*
                           Sort Key: t2.c1
                           ->  Foreign Scan on public.ft2 t2
                                 Output: t2.c1, t2.*
                                 Node: postgres_srv / Status: Alive
                                   Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1"
(24 rows)

SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10 FOR UPDATE;
 c1  | c1  
-----+-----
 101 | 101
 102 | 102
 103 | 103
 104 | 104
 105 | 105
 106 | 106
 107 | 107
 108 | 108
 109 | 109
 110 | 110
(10 rows)

-- join two tables with FOR SHARE clause
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10 FOR SHARE OF t1;
                                               QUERY PLAN                                                
---------------------------------------------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c1, t1.c3, t1.*, t2.*
   ->  LockRows
         Output: t1.c1, t2.c1, t1.c3, t1.*, t2.*
         ->  Sort
               Output: t1.c1, t2.c1, t1.c3, t1.*, t2.*
               Sort Key: t1.c3, t1.c1
               ->  Merge Join
                     Output: t1.c1, t2.c1, t1.c3, t1.*, t2.*
                     Merge Cond: (t1.c1 = t2.c1)
                     ->  Sort
                           Output: t1.c1, t1.c3, t1.*
                           Sort Key: t1.c1
                           ->  Foreign Scan on public.ft1 t1
                                 Output: t1.c1, t1.c3, t1.*
                                 Node: postgres_srv / Status: Alive
                                   Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1"
                     ->  Sort
                           Output: t2.c1, t2.*
                           Sort Key: t2.c1
                           ->  Foreign Scan on public.ft2 t2
                                 Output: t2.c1, t2.*
                                 Node: postgres_srv / Status: Alive
                                   Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1"
(24 rows)

SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10 FOR SHARE OF t1;
 c1  | c1  
-----+-----
 101 | 101
 102 | 102
 103 | 103
 104 | 104
 105 | 105
 106 | 106
 107 | 107
 108 | 108
 109 | 109
 110 | 110
(10 rows)

EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10 FOR SHARE;
                                               QUERY PLAN                                                
---------------------------------------------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c1, t1.c3, t1.*, t2.*
   ->  LockRows
         Output: t1.c1, t2.c1, t1.c3, t1.*, t2.*
         ->  Sort
               Output: t1.c1, t2.c1, t1.c3, t1.*, t2.*
               Sort Key: t1.c3, t1.c1
               ->  Merge Join
                     Output: t1.c1, t2.c1, t1.c3, t1.*, t2.*
                     Merge Cond: (t1.c1 = t2.c1)
                     ->  Sort
                           Output: t1.c1, t1.c3, t1.*
                           Sort Key: t1.c1
                           ->  Foreign Scan on public.ft1 t1
                                 Output: t1.c1, t1.c3, t1.*
                                 Node: postgres_srv / Status: Alive
                                   Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1"
                     ->  Sort
                           Output: t2.c1, t2.*
                           Sort Key: t2.c1
                           ->  Foreign Scan on public.ft2 t2
                                 Output: t2.c1, t2.*
                                 Node: postgres_srv / Status: Alive
                                   Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1"
(24 rows)

SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10 FOR SHARE;
 c1  | c1  
-----+-----
 101 | 101
 102 | 102
 103 | 103
 104 | 104
 105 | 105
 106 | 106
 107 | 107
 108 | 108
 109 | 109
 110 | 110
(10 rows)

-- join in CTE
EXPLAIN (VERBOSE, COSTS OFF)
WITH t (c1_1, c1_3, c2_1) AS MATERIALIZED (SELECT t1.c1, t1.c3, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1)) SELECT c1_1, c2_1 FROM t ORDER BY c1_3, c1_1 OFFSET 100 LIMIT 10;
                              QUERY PLAN                               
-----------------------------------------------------------------------
 Limit
   Output: t.c1_1, t.c2_1, t.c1_3
   CTE t
     ->  Merge Join
           Output: t1.c1, t1.c3, t2.c1
           Merge Cond: (t1.c1 = t2.c1)
           ->  Sort
                 Output: t1.c1, t1.c3
                 Sort Key: t1.c1
                 ->  Foreign Scan on public.ft1 t1
                       Output: t1.c1, t1.c3
                       Node: postgres_srv / Status: Alive
                         Remote SQL: SELECT "C 1", c3 FROM "S 1"."T 1"
           ->  Sort
                 Output: t2.c1
                 Sort Key: t2.c1
                 ->  Foreign Scan on public.ft2 t2
                       Output: t2.c1
                       Node: postgres_srv / Status: Alive
                         Remote SQL: SELECT "C 1" FROM "S 1"."T 1"
   ->  Sort
         Output: t.c1_1, t.c2_1, t.c1_3
         Sort Key: t.c1_3, t.c1_1
         ->  CTE Scan on t
               Output: t.c1_1, t.c2_1, t.c1_3
(25 rows)

WITH t (c1_1, c1_3, c2_1) AS MATERIALIZED (SELECT t1.c1, t1.c3, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1)) SELECT c1_1, c2_1 FROM t ORDER BY c1_3, c1_1 OFFSET 100 LIMIT 10;
 c1_1 | c2_1 
------+------
  101 |  101
  102 |  102
  103 |  103
  104 |  104
  105 |  105
  106 |  106
  107 |  107
  108 |  108
  109 |  109
  110 |  110
(10 rows)

-- ctid with whole-row reference
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.ctid, t1, t2, t1.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10;
                                               QUERY PLAN                                                
---------------------------------------------------------------------------------------------------------
 Limit
   Output: t1.ctid, t1.*, t2.*, t1.c1, t1.c3
   ->  Sort
         Output: t1.ctid, t1.*, t2.*, t1.c1, t1.c3
         Sort Key: t1.c3, t1.c1
         ->  Merge Join
               Output: t1.ctid, t1.*, t2.*, t1.c1, t1.c3
               Merge Cond: (t1.c1 = t2.c1)
               ->  Sort
                     Output: t1.ctid, t1.*, t1.c1, t1.c3
                     Sort Key: t1.c1
                     ->  Foreign Scan on public.ft1 t1
                           Output: t1.ctid, t1.*, t1.c1, t1.c3
                           Node: postgres_srv / Status: Alive
                             Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8, ctid FROM "S 1"."T 1"
               ->  Sort
                     Output: t2.*, t2.c1
                     Sort Key: t2.c1
                     ->  Foreign Scan on public.ft2 t2
                           Output: t2.*, t2.c1
                           Node: postgres_srv / Status: Alive
                             Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1"
(22 rows)

-- SEMI JOIN, not pushed down
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1 FROM ft1 t1 WHERE EXISTS (SELECT 1 FROM ft2 t2 WHERE t1.c1 = t2.c1) ORDER BY t1.c1 OFFSET 100 LIMIT 10;
                                 QUERY PLAN                                  
-----------------------------------------------------------------------------
 Limit
   Output: t1.c1
   ->  Sort
         Output: t1.c1
         Sort Key: t1.c1
         ->  Hash Join
               Output: t1.c1
               Inner Unique: true
               Hash Cond: (t1.c1 = t2.c1)
               ->  Foreign Scan on public.ft1 t1
                     Output: t1.c1
                     Node: postgres_srv / Status: Alive
                       Remote SQL: SELECT "C 1" FROM "S 1"."T 1"
               ->  Hash
                     Output: t2.c1
                     ->  HashAggregate
                           Output: t2.c1
                           Group Key: t2.c1
                           ->  Foreign Scan on public.ft2 t2
                                 Output: t2.c1
                                 Node: postgres_srv / Status: Alive
                                   Remote SQL: SELECT "C 1" FROM "S 1"."T 1"
(22 rows)

SELECT t1.c1 FROM ft1 t1 WHERE EXISTS (SELECT 1 FROM ft2 t2 WHERE t1.c1 = t2.c1) ORDER BY t1.c1 OFFSET 100 LIMIT 10;
 c1  
-----
 101
 102
 103
 104
 105
 106
 107
 108
 109
 110
(10 rows)

-- ANTI JOIN, not pushed down
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1 FROM ft1 t1 WHERE NOT EXISTS (SELECT 1 FROM ft2 t2 WHERE t1.c1 = t2.c2) ORDER BY t1.c1 OFFSET 100 LIMIT 10;
                             QUERY PLAN                             
--------------------------------------------------------------------
 Limit
   Output: t1.c1
   ->  Sort
         Output: t1.c1
         Sort Key: t1.c1
         ->  Hash Anti Join
               Output: t1.c1
               Hash Cond: (t1.c1 = t2.c2)
               ->  Foreign Scan on public.ft1 t1
                     Output: t1.c1
                     Node: postgres_srv / Status: Alive
                       Remote SQL: SELECT "C 1" FROM "S 1"."T 1"
               ->  Hash
                     Output: t2.c2
                     ->  Foreign Scan on public.ft2 t2
                           Output: t2.c2
                           Node: postgres_srv / Status: Alive
                             Remote SQL: SELECT c2 FROM "S 1"."T 1"
(18 rows)

SELECT t1.c1 FROM ft1 t1 WHERE NOT EXISTS (SELECT 1 FROM ft2 t2 WHERE t1.c1 = t2.c2) ORDER BY t1.c1 OFFSET 100 LIMIT 10;
 c1  
-----
 110
 111
 112
 113
 114
 115
 116
 117
 118
 119
(10 rows)

-- CROSS JOIN can be pushed down
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1 FROM ft1 t1 CROSS JOIN ft2 t2 ORDER BY t1.c1, t2.c1 OFFSET 100 LIMIT 10;
                              QUERY PLAN                               
-----------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c1
   ->  Sort
         Output: t1.c1, t2.c1
         Sort Key: t1.c1, t2.c1
         ->  Nested Loop
               Output: t1.c1, t2.c1
               ->  Foreign Scan on public.ft1 t1
                     Output: t1.c1
                     Node: postgres_srv / Status: Alive
                       Remote SQL: SELECT "C 1" FROM "S 1"."T 1"
               ->  Materialize
                     Output: t2.c1
                     ->  Foreign Scan on public.ft2 t2
                           Output: t2.c1
                           Node: postgres_srv / Status: Alive
                             Remote SQL: SELECT "C 1" FROM "S 1"."T 1"
(17 rows)

SELECT t1.c1, t2.c1 FROM ft1 t1 CROSS JOIN ft2 t2 ORDER BY t1.c1, t2.c1 OFFSET 100 LIMIT 10;
 c1 | c1  
----+-----
  1 | 101
  1 | 102
  1 | 103
  1 | 104
  1 | 105
  1 | 106
  1 | 107
  1 | 108
  1 | 109
  1 | 110
(10 rows)

-- different server, not pushed down. No result expected.
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1 FROM ft5 t1 JOIN ft6 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1 OFFSET 100 LIMIT 10;
                          QUERY PLAN                          
--------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c1
   ->  Merge Join
         Output: t1.c1, t2.c1
         Merge Cond: (t1.c1 = t2.c1)
         ->  Sort
               Output: t1.c1
               Sort Key: t1.c1
               ->  Foreign Scan on public.ft5 t1
                     Output: t1.c1
                     Node: postgres_srv / Status: Alive
                       Remote SQL: SELECT c1 FROM "S 1"."T 4"
         ->  Sort
               Output: t2.c1
               Sort Key: t2.c1
               ->  Foreign Scan on public.ft6 t2
                     Output: t2.c1
                     Node: postgres_srv2 / Status: Alive
                       Remote SQL: SELECT c1 FROM "S 1"."T 4"
(19 rows)

SELECT t1.c1, t2.c1 FROM ft5 t1 JOIN ft6 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1 OFFSET 100 LIMIT 10;
 c1 | c1 
----+----
(0 rows)

-- unsafe join conditions (c8 has a UDT), not pushed down. Practically a CROSS
-- JOIN since c8 in both tables has same value.
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1 FROM ft1 t1 LEFT JOIN ft2 t2 ON (t1.c8 = t2.c8) ORDER BY t1.c1, t2.c1 OFFSET 100 LIMIT 10;
                                QUERY PLAN                                 
---------------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c1
   ->  Sort
         Output: t1.c1, t2.c1
         Sort Key: t1.c1, t2.c1
         ->  Merge Left Join
               Output: t1.c1, t2.c1
               Merge Cond: (t1.c8 = t2.c8)
               ->  Sort
                     Output: t1.c1, t1.c8
                     Sort Key: t1.c8
                     ->  Foreign Scan on public.ft1 t1
                           Output: t1.c1, t1.c8
                           Node: postgres_srv / Status: Alive
                             Remote SQL: SELECT "C 1", c8 FROM "S 1"."T 1"
               ->  Sort
                     Output: t2.c1, t2.c8
                     Sort Key: t2.c8
                     ->  Foreign Scan on public.ft2 t2
                           Output: t2.c1, t2.c8
                           Node: postgres_srv / Status: Alive
                             Remote SQL: SELECT "C 1", c8 FROM "S 1"."T 1"
(22 rows)

-- SELECT t1.c1, t2.c1 FROM ft1 t1 LEFT JOIN ft2 t2 ON (t1.c8 = t2.c8) ORDER BY t1.c1, t2.c1 OFFSET 100 LIMIT 10;
-- unsafe conditions on one side (c8 has a UDT), not pushed down.
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1 FROM ft1 t1 LEFT JOIN ft2 t2 ON (t1.c1 = t2.c1) WHERE t1.c8 = 'foo' ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10;
                                  QUERY PLAN                                   
-------------------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c1, t1.c3
   ->  Sort
         Output: t1.c1, t2.c1, t1.c3
         Sort Key: t1.c3, t1.c1
         ->  Hash Right Join
               Output: t1.c1, t2.c1, t1.c3
               Hash Cond: (t2.c1 = t1.c1)
               ->  Foreign Scan on public.ft2 t2
                     Output: t2.c1
                     Node: postgres_srv / Status: Alive
                       Remote SQL: SELECT "C 1" FROM "S 1"."T 1"
               ->  Hash
                     Output: t1.c1, t1.c3
                     ->  Foreign Scan on public.ft1 t1
                           Output: t1.c1, t1.c3
                           Filter: (t1.c8 = 'foo'::user_enum)
                           Node: postgres_srv / Status: Alive
                             Remote SQL: SELECT "C 1", c3, c8 FROM "S 1"."T 1"
(19 rows)

SELECT t1.c1, t2.c1 FROM ft1 t1 LEFT JOIN ft2 t2 ON (t1.c1 = t2.c1) WHERE t1.c8 = 'foo' ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10;
 c1  | c1  
-----+-----
 101 | 101
 102 | 102
 103 | 103
 104 | 104
 105 | 105
 106 | 106
 107 | 107
 108 | 108
 109 | 109
 110 | 110
(10 rows)

-- join where unsafe to pushdown condition in WHERE clause has a column not
-- in the SELECT clause. In this test unsafe clause needs to have column
-- references from both joining sides so that the clause is not pushed down
-- into one of the joining sides.
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) WHERE t1.c8 = t2.c8 ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10;
                                  QUERY PLAN                                   
-------------------------------------------------------------------------------
 Limit
   Output: t1.c1, t2.c1, t1.c3
   ->  Sort
         Output: t1.c1, t2.c1, t1.c3
         Sort Key: t1.c3, t1.c1
         ->  Merge Join
               Output: t1.c1, t2.c1, t1.c3
               Merge Cond: ((t1.c1 = t2.c1) AND (t1.c8 = t2.c8))
               ->  Sort
                     Output: t1.c1, t1.c3, t1.c8
                     Sort Key: t1.c1, t1.c8
                     ->  Foreign Scan on public.ft1 t1
                           Output: t1.c1, t1.c3, t1.c8
                           Node: postgres_srv / Status: Alive
                             Remote SQL: SELECT "C 1", c3, c8 FROM "S 1"."T 1"
               ->  Sort
                     Output: t2.c1, t2.c8
                     Sort Key: t2.c1, t2.c8
                     ->  Foreign Scan on public.ft2 t2
                           Output: t2.c1, t2.c8
                           Node: postgres_srv / Status: Alive
                             Remote SQL: SELECT "C 1", c8 FROM "S 1"."T 1"
(22 rows)

SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) WHERE t1.c8 = t2.c8 ORDER BY t1.c3, t1.c1 OFFSET 100 LIMIT 10;
 c1  | c1  
-----+-----
 101 | 101
 102 | 102
 103 | 103
 104 | 104
 105 | 105
 106 | 106
 107 | 107
 108 | 108
 109 | 109
 110 | 110
(10 rows)

-- Aggregate after UNION, for testing setrefs
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1c1, avg(t1c1 + t2c1) FROM (SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) UNION SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1)) AS t (t1c1, t2c1) GROUP BY t1c1 ORDER BY t1c1 OFFSET 100 LIMIT 10;
                                       QUERY PLAN                                        
-----------------------------------------------------------------------------------------
 Limit
   Output: t1.c1, (avg((t1.c1 + t2.c1)))
   ->  Sort
         Output: t1.c1, (avg((t1.c1 + t2.c1)))
         Sort Key: t1.c1
         ->  HashAggregate
               Output: t1.c1, avg((t1.c1 + t2.c1))
               Group Key: t1.c1
               ->  HashAggregate
                     Output: t1.c1, t2.c1
                     Group Key: t1.c1, t2.c1
                     ->  Append
                           ->  Merge Join
                                 Output: t1.c1, t2.c1
                                 Merge Cond: (t1.c1 = t2.c1)
                                 ->  Sort
                                       Output: t1.c1
                                       Sort Key: t1.c1
                                       ->  Foreign Scan on public.ft1 t1
                                             Output: t1.c1
                                             Node: postgres_srv / Status: Alive
                                               Remote SQL: SELECT "C 1" FROM "S 1"."T 1"
                                 ->  Sort
                                       Output: t2.c1
                                       Sort Key: t2.c1
                                       ->  Foreign Scan on public.ft2 t2
                                             Output: t2.c1
                                             Node: postgres_srv / Status: Alive
                                               Remote SQL: SELECT "C 1" FROM "S 1"."T 1"
                           ->  Merge Join
                                 Output: t1_1.c1, t2_1.c1
                                 Merge Cond: (t1_1.c1 = t2_1.c1)
                                 ->  Sort
                                       Output: t1_1.c1
                                       Sort Key: t1_1.c1
                                       ->  Foreign Scan on public.ft1 t1_1
                                             Output: t1_1.c1
                                             Node: postgres_srv / Status: Alive
                                               Remote SQL: SELECT "C 1" FROM "S 1"."T 1"
                                 ->  Sort
                                       Output: t2_1.c1
                                       Sort Key: t2_1.c1
                                       ->  Foreign Scan on public.ft2 t2_1
                                             Output: t2_1.c1
                                             Node: postgres_srv / Status: Alive
                                               Remote SQL: SELECT "C 1" FROM "S 1"."T 1"
(46 rows)

SELECT t1c1, avg(t1c1 + t2c1) FROM (SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1) UNION SELECT t1.c1, t2.c1 FROM ft1 t1 JOIN ft2 t2 ON (t1.c1 = t2.c1)) AS t (t1c1, t2c1) GROUP BY t1c1 ORDER BY t1c1 OFFSET 100 LIMIT 10;
 t1c1 |         avg          
------+----------------------
  101 | 202.0000000000000000
  102 | 204.0000000000000000
  103 | 206.0000000000000000
  104 | 208.0000000000000000
  105 | 210.0000000000000000
  106 | 212.0000000000000000
  107 | 214.0000000000000000
  108 | 216.0000000000000000
  109 | 218.0000000000000000
  110 | 220.0000000000000000
(10 rows)

-- join with lateral reference
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1."C 1" FROM "S 1"."T 1" t1, LATERAL (SELECT DISTINCT t2.c1, t3.c1 FROM ft1 t2, ft2 t3 WHERE t2.c1 = t3.c1 AND t2.c2 = t1.c2) q ORDER BY t1."C 1" OFFSET 10 LIMIT 10;
                                                 QUERY PLAN                                                 
------------------------------------------------------------------------------------------------------------
 Limit
   Output: t1."C 1"
   ->  Nested Loop
         Output: t1."C 1"
         ->  Foreign Scan on "S 1"."T 1" t1
               Output: t1."C 1", t1.c2
               Remote SQL: SELECT "C 1", c2 FROM "S 1"."T 1" ORDER BY "C 1" ASC NULLS LAST
         ->  HashAggregate
               Output: t2.c1, t3.c1
               Group Key: t2.c1, t3.c1
               ->  Hash Join
                     Output: t2.c1, t3.c1
                     Hash Cond: (t3.c1 = t2.c1)
                     ->  Foreign Scan on public.ft2 t3
                           Output: t3.c1
                           Node: postgres_srv / Status: Alive
                             Remote SQL: SELECT "C 1" FROM "S 1"."T 1"
                     ->  Hash
                           Output: t2.c1
                           ->  Foreign Scan on public.ft1 t2
                                 Output: t2.c1
                                 Node: postgres_srv / Status: Alive
                                   Remote SQL: SELECT "C 1", c2 FROM "S 1"."T 1" WHERE ((c2 = $1::integer))
(23 rows)

-- SELECT t1."C 1" FROM "S 1"."T 1" t1, LATERAL (SELECT DISTINCT t2.c1, t3.c1 FROM ft1 t2, ft2 t3 WHERE t2.c1 = t3.c1 AND t2.c2 = t1.c2) q ORDER BY t1."C 1" OFFSET 10 LIMIT 10;
-- non-Var items in targetlist of the nullable rel of a join preventing
-- push-down in some cases
-- unable to push {ft1, ft2}
EXPLAIN (VERBOSE, COSTS OFF)
SELECT q.a, ft2.c1 FROM (SELECT 13 FROM ft1 WHERE c1 = 13) q(a) RIGHT JOIN ft2 ON (q.a = ft2.c1) WHERE ft2.c1 BETWEEN 10 AND 15;
WARNING:  GetForeignRelSize failed
ERROR:  PGSpider can not get data from child node : postgres_srv
-- SELECT q.a, ft2.c1 FROM (SELECT 13 FROM ft1 WHERE c1 = 13) q(a) RIGHT JOIN ft2 ON (q.a = ft2.c1) WHERE ft2.c1 BETWEEN 10 AND 15;
-- ok to push {ft1, ft2} but not {ft1, ft2, ft4}
EXPLAIN (VERBOSE, COSTS OFF)
SELECT ft4.c1, q.* FROM ft4 LEFT JOIN (SELECT 13, ft1.c1, ft2.c1 FROM ft1 RIGHT JOIN ft2 ON (ft1.c1 = ft2.c1) WHERE ft1.c1 = 12) q(a, b, c) ON (ft4.c1 = q.b) WHERE ft4.c1 BETWEEN 10 AND 15;
                                         QUERY PLAN                                         
--------------------------------------------------------------------------------------------
 Hash Right Join
   Output: ft4.c1, (13), ft1.c1, ft2.c1
   Hash Cond: (ft1.c1 = ft4.c1)
   ->  Nested Loop
         Output: ft1.c1, ft2.c1, 13
         ->  Foreign Scan on public.ft1
               Output: ft1.c1
               Node: postgres_srv / Status: Alive
                 Remote SQL: SELECT "C 1" FROM "S 1"."T 1" WHERE (("C 1" = 12))
         ->  Materialize
               Output: ft2.c1
               ->  Foreign Scan on public.ft2
                     Output: ft2.c1
                     Node: postgres_srv / Status: Alive
                       Remote SQL: SELECT "C 1" FROM "S 1"."T 1" WHERE (("C 1" = 12))
   ->  Hash
         Output: ft4.c1
         ->  Foreign Scan on public.ft4
               Output: ft4.c1
               Node: postgres_srv / Status: Alive
                 Remote SQL: SELECT c1 FROM "S 1"."T 3" WHERE ((c1 >= 10)) AND ((c1 <= 15))
(21 rows)

-- SELECT ft4.c1, q.* FROM ft4 LEFT JOIN (SELECT 13, ft1.c1, ft2.c1 FROM ft1 RIGHT JOIN ft2 ON (ft1.c1 = ft2.c1) WHERE ft1.c1 = 12) q(a, b, c) ON (ft4.c1 = q.b) WHERE ft4.c1 BETWEEN 10 AND 15;
-- join with nullable side with some columns with null values
-- UPDATE ft5 SET c3 = null where c1 % 9 = 0;
EXPLAIN (VERBOSE, COSTS OFF)
SELECT ft5, ft5.c1, ft5.c2, ft5.c3, ft4.c1, ft4.c2 FROM ft5 left join ft4 on ft5.c1 = ft4.c1 WHERE ft4.c1 BETWEEN 10 and 30 ORDER BY ft5.c1, ft4.c1;
                                              QUERY PLAN                                              
------------------------------------------------------------------------------------------------------
 Sort
   Output: ft5.*, ft5.c1, ft5.c2, ft5.c3, ft4.c1, ft4.c2
   Sort Key: ft5.c1
   ->  Hash Join
         Output: ft5.*, ft5.c1, ft5.c2, ft5.c3, ft4.c1, ft4.c2
         Hash Cond: (ft5.c1 = ft4.c1)
         ->  Foreign Scan on public.ft5
               Output: ft5.*, ft5.c1, ft5.c2, ft5.c3
               Node: postgres_srv / Status: Alive
                 Remote SQL: SELECT c1, c2, c3 FROM "S 1"."T 4"
         ->  Hash
               Output: ft4.c1, ft4.c2
               ->  Foreign Scan on public.ft4
                     Output: ft4.c1, ft4.c2
                     Node: postgres_srv / Status: Alive
                       Remote SQL: SELECT c1, c2 FROM "S 1"."T 3" WHERE ((c1 >= 10)) AND ((c1 <= 30))
(16 rows)

SELECT ft5, ft5.c1, ft5.c2, ft5.c3, ft4.c1, ft4.c2 FROM ft5 left join ft4 on ft5.c1 = ft4.c1 WHERE ft4.c1 BETWEEN 10 and 30 ORDER BY ft5.c1, ft4.c1;
              ft5              | c1 | c2 |   c3   | c1 | c2 
-------------------------------+----+----+--------+----+----
 (12,13,AAA012,/postgres_srv/) | 12 | 13 | AAA012 | 12 | 13
 (18,19,AAA018,/postgres_srv/) | 18 | 19 | AAA018 | 18 | 19
 (24,25,AAA024,/postgres_srv/) | 24 | 25 | AAA024 | 24 | 25
 (30,31,AAA030,/postgres_srv/) | 30 | 31 | AAA030 | 30 | 31
(4 rows)

-- multi-way join involving multiple merge joins
-- (this case used to have EPQ-related planning problems)
---CREATE TABLE local_tbl (c1 int NOT NULL, c2 int NOT NULL, c3 text, CONSTRAINT local_tbl_pkey PRIMARY KEY (c1));
---INSERT INTO local_tbl SELECT id, id % 10, to_char(id, 'FM0000') FROM generate_series(1, 1000) id;
CREATE FOREIGN TABLE local_tbl (c1 int NOT NULL, c2 int NOT NULL, c3 text, __spd_url text)
    SERVER pgspider_srv;
CREATE FOREIGN TABLE local_tbl__postgres_srv__0 (c1 int NOT NULL, c2 int NOT NULL, c3 text)
    SERVER postgres_srv OPTIONS(table_name 'local_tbl');
ANALYZE local_tbl;
WARNING:  skipping "local_tbl" --- cannot analyze this foreign table
SET enable_nestloop TO false;
SET enable_hashjoin TO false;
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM ft1, ft2, ft4, ft5, local_tbl WHERE ft1.c1 = ft2.c1 AND ft1.c2 = ft4.c1
    AND ft1.c2 = ft5.c1 AND ft1.c2 = local_tbl.c1 AND ft1.c1 < 100 AND ft2.c1 < 100 FOR UPDATE;
                                                                                                                                                                             QUERY PLAN                                                                                                                                                                             
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 LockRows
   Output: ft1.c1, ft1.c2, ft1.c3, ft1.c4, ft1.c5, ft1.c6, ft1.c7, ft1.c8, ft1.__spd_url, ft2.c1, ft2.c2, ft2.c3, ft2.c4, ft2.c5, ft2.c6, ft2.c7, ft2.c8, ft2.__spd_url, ft4.c1, ft4.c2, ft4.c3, ft4.__spd_url, ft5.c1, ft5.c2, ft5.c3, ft5.__spd_url, local_tbl.c1, local_tbl.c2, local_tbl.c3, local_tbl.__spd_url, ft1.*, ft2.*, ft4.*, ft5.*, local_tbl.*
   ->  Merge Join
         Output: ft1.c1, ft1.c2, ft1.c3, ft1.c4, ft1.c5, ft1.c6, ft1.c7, ft1.c8, ft1.__spd_url, ft2.c1, ft2.c2, ft2.c3, ft2.c4, ft2.c5, ft2.c6, ft2.c7, ft2.c8, ft2.__spd_url, ft4.c1, ft4.c2, ft4.c3, ft4.__spd_url, ft5.c1, ft5.c2, ft5.c3, ft5.__spd_url, local_tbl.c1, local_tbl.c2, local_tbl.c3, local_tbl.__spd_url, ft1.*, ft2.*, ft4.*, ft5.*, local_tbl.*
         Merge Cond: (ft4.c1 = ft1.c2)
         ->  Merge Join
               Output: ft4.c1, ft4.c2, ft4.c3, ft4.__spd_url, ft4.*, ft5.c1, ft5.c2, ft5.c3, ft5.__spd_url, ft5.*
               Merge Cond: (ft4.c1 = ft5.c1)
               ->  Sort
                     Output: ft4.c1, ft4.c2, ft4.c3, ft4.__spd_url, ft4.*
                     Sort Key: ft4.c1
                     ->  Foreign Scan on public.ft4
                           Output: ft4.c1, ft4.c2, ft4.c3, ft4.__spd_url, ft4.*
                           Node: postgres_srv / Status: Alive
                             Remote SQL: SELECT c1, c2, c3 FROM "S 1"."T 3"
               ->  Sort
                     Output: ft5.c1, ft5.c2, ft5.c3, ft5.__spd_url, ft5.*
                     Sort Key: ft5.c1
                     ->  Foreign Scan on public.ft5
                           Output: ft5.c1, ft5.c2, ft5.c3, ft5.__spd_url, ft5.*
                           Node: postgres_srv / Status: Alive
                             Remote SQL: SELECT c1, c2, c3 FROM "S 1"."T 4"
         ->  Materialize
               Output: ft1.c1, ft1.c2, ft1.c3, ft1.c4, ft1.c5, ft1.c6, ft1.c7, ft1.c8, ft1.__spd_url, ft1.*, ft2.c1, ft2.c2, ft2.c3, ft2.c4, ft2.c5, ft2.c6, ft2.c7, ft2.c8, ft2.__spd_url, ft2.*, local_tbl.c1, local_tbl.c2, local_tbl.c3, local_tbl.__spd_url, local_tbl.*
               ->  Merge Join
                     Output: ft1.c1, ft1.c2, ft1.c3, ft1.c4, ft1.c5, ft1.c6, ft1.c7, ft1.c8, ft1.__spd_url, ft1.*, ft2.c1, ft2.c2, ft2.c3, ft2.c4, ft2.c5, ft2.c6, ft2.c7, ft2.c8, ft2.__spd_url, ft2.*, local_tbl.c1, local_tbl.c2, local_tbl.c3, local_tbl.__spd_url, local_tbl.*
                     Merge Cond: (ft1.c2 = local_tbl.c1)
                     ->  Sort
                           Output: ft1.c1, ft1.c2, ft1.c3, ft1.c4, ft1.c5, ft1.c6, ft1.c7, ft1.c8, ft1.__spd_url, ft1.*, ft2.c1, ft2.c2, ft2.c3, ft2.c4, ft2.c5, ft2.c6, ft2.c7, ft2.c8, ft2.__spd_url, ft2.*
                           Sort Key: ft1.c2
                           ->  Merge Join
                                 Output: ft1.c1, ft1.c2, ft1.c3, ft1.c4, ft1.c5, ft1.c6, ft1.c7, ft1.c8, ft1.__spd_url, ft1.*, ft2.c1, ft2.c2, ft2.c3, ft2.c4, ft2.c5, ft2.c6, ft2.c7, ft2.c8, ft2.__spd_url, ft2.*
                                 Merge Cond: (ft1.c1 = ft2.c1)
                                 ->  Sort
                                       Output: ft1.c1, ft1.c2, ft1.c3, ft1.c4, ft1.c5, ft1.c6, ft1.c7, ft1.c8, ft1.__spd_url, ft1.*
                                       Sort Key: ft1.c1
                                       ->  Foreign Scan on public.ft1
                                             Output: ft1.c1, ft1.c2, ft1.c3, ft1.c4, ft1.c5, ft1.c6, ft1.c7, ft1.c8, ft1.__spd_url, ft1.*
                                             Node: postgres_srv / Status: Alive
                                               Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE (("C 1" < 100))
                                 ->  Sort
                                       Output: ft2.c1, ft2.c2, ft2.c3, ft2.c4, ft2.c5, ft2.c6, ft2.c7, ft2.c8, ft2.__spd_url, ft2.*
                                       Sort Key: ft2.c1
                                       ->  Foreign Scan on public.ft2
                                             Output: ft2.c1, ft2.c2, ft2.c3, ft2.c4, ft2.c5, ft2.c6, ft2.c7, ft2.c8, ft2.__spd_url, ft2.*
                                             Node: postgres_srv / Status: Alive
                                               Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE (("C 1" < 100))
                     ->  Sort
                           Output: local_tbl.c1, local_tbl.c2, local_tbl.c3, local_tbl.__spd_url, local_tbl.*
                           Sort Key: local_tbl.c1
                           ->  Foreign Scan on public.local_tbl
                                 Output: local_tbl.c1, local_tbl.c2, local_tbl.c3, local_tbl.__spd_url, local_tbl.*
                                 Node: postgres_srv / Status: Alive
                                   Remote SQL: SELECT c1, c2, c3 FROM public.local_tbl
(54 rows)

SELECT * FROM ft1, ft2, ft4, ft5, local_tbl WHERE ft1.c1 = ft2.c1 AND ft1.c2 = ft4.c1
    AND ft1.c2 = ft5.c1 AND ft1.c2 = local_tbl.c1 AND ft1.c1 < 100 AND ft2.c1 < 100 FOR UPDATE;
 c1 | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8  |   __spd_url    | c1 | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8  |   __spd_url    | c1 | c2 |   c3   |   __spd_url    | c1 | c2 |   c3   |   __spd_url    | c1 | c2 |  c3  |   __spd_url    
----+----+-------+------------------------------+--------------------------+----+------------+-----+----------------+----+----+-------+------------------------------+--------------------------+----+------------+-----+----------------+----+----+--------+----------------+----+----+--------+----------------+----+----+------+----------------
 96 |  6 | 00096 | Tue Apr 07 00:00:00 1970 PST | Tue Apr 07 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 96 |  6 | 00096 | Tue Apr 07 00:00:00 1970 PST | Tue Apr 07 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ |  6 |  7 | AAA006 | /postgres_srv/ |  6 |  7 | AAA006 | /postgres_srv/ |  6 |  6 | 0006 | /postgres_srv/
 46 |  6 | 00046 | Mon Feb 16 00:00:00 1970 PST | Mon Feb 16 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 46 |  6 | 00046 | Mon Feb 16 00:00:00 1970 PST | Mon Feb 16 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ |  6 |  7 | AAA006 | /postgres_srv/ |  6 |  7 | AAA006 | /postgres_srv/ |  6 |  6 | 0006 | /postgres_srv/
 26 |  6 | 00026 | Tue Jan 27 00:00:00 1970 PST | Tue Jan 27 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 26 |  6 | 00026 | Tue Jan 27 00:00:00 1970 PST | Tue Jan 27 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ |  6 |  7 | AAA006 | /postgres_srv/ |  6 |  7 | AAA006 | /postgres_srv/ |  6 |  6 | 0006 | /postgres_srv/
 56 |  6 | 00056 | Thu Feb 26 00:00:00 1970 PST | Thu Feb 26 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 56 |  6 | 00056 | Thu Feb 26 00:00:00 1970 PST | Thu Feb 26 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ |  6 |  7 | AAA006 | /postgres_srv/ |  6 |  7 | AAA006 | /postgres_srv/ |  6 |  6 | 0006 | /postgres_srv/
 66 |  6 | 00066 | Sun Mar 08 00:00:00 1970 PST | Sun Mar 08 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 66 |  6 | 00066 | Sun Mar 08 00:00:00 1970 PST | Sun Mar 08 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ |  6 |  7 | AAA006 | /postgres_srv/ |  6 |  7 | AAA006 | /postgres_srv/ |  6 |  6 | 0006 | /postgres_srv/
 16 |  6 | 00016 | Sat Jan 17 00:00:00 1970 PST | Sat Jan 17 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 16 |  6 | 00016 | Sat Jan 17 00:00:00 1970 PST | Sat Jan 17 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ |  6 |  7 | AAA006 | /postgres_srv/ |  6 |  7 | AAA006 | /postgres_srv/ |  6 |  6 | 0006 | /postgres_srv/
 76 |  6 | 00076 | Wed Mar 18 00:00:00 1970 PST | Wed Mar 18 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 76 |  6 | 00076 | Wed Mar 18 00:00:00 1970 PST | Wed Mar 18 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ |  6 |  7 | AAA006 | /postgres_srv/ |  6 |  7 | AAA006 | /postgres_srv/ |  6 |  6 | 0006 | /postgres_srv/
 86 |  6 | 00086 | Sat Mar 28 00:00:00 1970 PST | Sat Mar 28 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 86 |  6 | 00086 | Sat Mar 28 00:00:00 1970 PST | Sat Mar 28 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ |  6 |  7 | AAA006 | /postgres_srv/ |  6 |  7 | AAA006 | /postgres_srv/ |  6 |  6 | 0006 | /postgres_srv/
  6 |  6 | 00006 | Wed Jan 07 00:00:00 1970 PST | Wed Jan 07 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ |  6 |  6 | 00006 | Wed Jan 07 00:00:00 1970 PST | Wed Jan 07 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ |  6 |  7 | AAA006 | /postgres_srv/ |  6 |  7 | AAA006 | /postgres_srv/ |  6 |  6 | 0006 | /postgres_srv/
 36 |  6 | 00036 | Fri Feb 06 00:00:00 1970 PST | Fri Feb 06 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ | 36 |  6 | 00036 | Fri Feb 06 00:00:00 1970 PST | Fri Feb 06 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/ |  6 |  7 | AAA006 | /postgres_srv/ |  6 |  7 | AAA006 | /postgres_srv/ |  6 |  6 | 0006 | /postgres_srv/
(10 rows)

RESET enable_nestloop;
RESET enable_hashjoin;
DROP FOREIGN TABLE local_tbl;
DROP FOREIGN TABLE local_tbl__postgres_srv__0;
-- check join pushdown in situations where multiple userids are involved
CREATE ROLE regress_view_owner SUPERUSER;
CREATE USER MAPPING FOR regress_view_owner SERVER postgres_srv;
GRANT SELECT ON ft4 TO regress_view_owner;
GRANT SELECT ON ft5 TO regress_view_owner;
CREATE VIEW v4 AS SELECT * FROM ft4;
CREATE VIEW v5 AS SELECT * FROM ft5;
ALTER VIEW v5 OWNER TO regress_view_owner;
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2 FROM v4 t1 LEFT JOIN v5 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1 OFFSET 10 LIMIT 10;  -- can't be pushed down, different view owners
                               QUERY PLAN                               
------------------------------------------------------------------------
 Limit
   Output: ft4.c1, ft5.c2, ft5.c1
   ->  Sort
         Output: ft4.c1, ft5.c2, ft5.c1
         Sort Key: ft4.c1, ft5.c1
         ->  Merge Left Join
               Output: ft4.c1, ft5.c2, ft5.c1
               Merge Cond: (ft4.c1 = ft5.c1)
               ->  Sort
                     Output: ft4.c1
                     Sort Key: ft4.c1
                     ->  Foreign Scan on public.ft4
                           Output: ft4.c1
                           Node: postgres_srv / Status: Alive
                             Remote SQL: SELECT c1 FROM "S 1"."T 3"
               ->  Sort
                     Output: ft5.c2, ft5.c1
                     Sort Key: ft5.c1
                     ->  Foreign Scan on public.ft5
                           Output: ft5.c2, ft5.c1
                           Node: postgres_srv / Status: Alive
                             Remote SQL: SELECT c1, c2 FROM "S 1"."T 4"
(22 rows)

SELECT t1.c1, t2.c2 FROM v4 t1 LEFT JOIN v5 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1 OFFSET 10 LIMIT 10;
 c1 | c2 
----+----
 22 |   
 24 | 25
 26 |   
 28 |   
 30 | 31
 32 |   
 34 |   
 36 | 37
 38 |   
 40 |   
(10 rows)

ALTER VIEW v4 OWNER TO regress_view_owner;
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2 FROM v4 t1 LEFT JOIN v5 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1 OFFSET 10 LIMIT 10;  -- can be pushed down
                               QUERY PLAN                               
------------------------------------------------------------------------
 Limit
   Output: ft4.c1, ft5.c2, ft5.c1
   ->  Sort
         Output: ft4.c1, ft5.c2, ft5.c1
         Sort Key: ft4.c1, ft5.c1
         ->  Merge Left Join
               Output: ft4.c1, ft5.c2, ft5.c1
               Merge Cond: (ft4.c1 = ft5.c1)
               ->  Sort
                     Output: ft4.c1
                     Sort Key: ft4.c1
                     ->  Foreign Scan on public.ft4
                           Output: ft4.c1
                           Node: postgres_srv / Status: Alive
                             Remote SQL: SELECT c1 FROM "S 1"."T 3"
               ->  Sort
                     Output: ft5.c2, ft5.c1
                     Sort Key: ft5.c1
                     ->  Foreign Scan on public.ft5
                           Output: ft5.c2, ft5.c1
                           Node: postgres_srv / Status: Alive
                             Remote SQL: SELECT c1, c2 FROM "S 1"."T 4"
(22 rows)

SELECT t1.c1, t2.c2 FROM v4 t1 LEFT JOIN v5 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1 OFFSET 10 LIMIT 10;
 c1 | c2 
----+----
 22 |   
 24 | 25
 26 |   
 28 |   
 30 | 31
 32 |   
 34 |   
 36 | 37
 38 |   
 40 |   
(10 rows)

EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2 FROM v4 t1 LEFT JOIN ft5 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1 OFFSET 10 LIMIT 10;  -- can't be pushed down, view owner not current user
                               QUERY PLAN                               
------------------------------------------------------------------------
 Limit
   Output: ft4.c1, t2.c2, t2.c1
   ->  Sort
         Output: ft4.c1, t2.c2, t2.c1
         Sort Key: ft4.c1, t2.c1
         ->  Merge Left Join
               Output: ft4.c1, t2.c2, t2.c1
               Merge Cond: (ft4.c1 = t2.c1)
               ->  Sort
                     Output: ft4.c1
                     Sort Key: ft4.c1
                     ->  Foreign Scan on public.ft4
                           Output: ft4.c1
                           Node: postgres_srv / Status: Alive
                             Remote SQL: SELECT c1 FROM "S 1"."T 3"
               ->  Sort
                     Output: t2.c2, t2.c1
                     Sort Key: t2.c1
                     ->  Foreign Scan on public.ft5 t2
                           Output: t2.c2, t2.c1
                           Node: postgres_srv / Status: Alive
                             Remote SQL: SELECT c1, c2 FROM "S 1"."T 4"
(22 rows)

SELECT t1.c1, t2.c2 FROM v4 t1 LEFT JOIN ft5 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1 OFFSET 10 LIMIT 10;
 c1 | c2 
----+----
 22 |   
 24 | 25
 26 |   
 28 |   
 30 | 31
 32 |   
 34 |   
 36 | 37
 38 |   
 40 |   
(10 rows)

ALTER VIEW v4 OWNER TO CURRENT_USER;
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.c1, t2.c2 FROM v4 t1 LEFT JOIN ft5 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1 OFFSET 10 LIMIT 10;  -- can be pushed down
                               QUERY PLAN                               
------------------------------------------------------------------------
 Limit
   Output: ft4.c1, t2.c2, t2.c1
   ->  Sort
         Output: ft4.c1, t2.c2, t2.c1
         Sort Key: ft4.c1, t2.c1
         ->  Merge Left Join
               Output: ft4.c1, t2.c2, t2.c1
               Merge Cond: (ft4.c1 = t2.c1)
               ->  Sort
                     Output: ft4.c1
                     Sort Key: ft4.c1
                     ->  Foreign Scan on public.ft4
                           Output: ft4.c1
                           Node: postgres_srv / Status: Alive
                             Remote SQL: SELECT c1 FROM "S 1"."T 3"
               ->  Sort
                     Output: t2.c2, t2.c1
                     Sort Key: t2.c1
                     ->  Foreign Scan on public.ft5 t2
                           Output: t2.c2, t2.c1
                           Node: postgres_srv / Status: Alive
                             Remote SQL: SELECT c1, c2 FROM "S 1"."T 4"
(22 rows)

SELECT t1.c1, t2.c2 FROM v4 t1 LEFT JOIN ft5 t2 ON (t1.c1 = t2.c1) ORDER BY t1.c1, t2.c1 OFFSET 10 LIMIT 10;
 c1 | c2 
----+----
 22 |   
 24 | 25
 26 |   
 28 |   
 30 | 31
 32 |   
 34 |   
 36 | 37
 38 |   
 40 |   
(10 rows)

ALTER VIEW v4 OWNER TO regress_view_owner;
-- cleanup
DROP OWNED BY regress_view_owner;
DROP ROLE regress_view_owner;
-- ===================================================================
-- Aggregate and grouping queries
-- ===================================================================
-- Simple aggregates
explain (verbose, costs off)
select count(c6), sum(c1), avg(c1), min(c2), max(c1), stddev(c2), sum(c1) * (random() <= 1)::int as sum2 from ft1 where c2 < 5 group by c2 order by 1, 2;
                                                                                    QUERY PLAN                                                                                    
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Result
   Output: (count(c6)), (sum(c1)), (avg(c1)), (min(c2)), (max(c1)), (stddev(c2)), ((sum(c1)) * ((random() <= '1'::double precision))::integer), c2
   ->  Sort
         Output: (count(c6)), (sum(c1)), (avg(c1)), (min(c2)), (max(c1)), (stddev(c2)), c2
         Sort Key: (count(ft1.c6)), (sum(ft1.c1))
         ->  Foreign Scan
               Output: (count(c6)), (sum(c1)), (avg(c1)), (min(c2)), (max(c1)), (stddev(c2)), c2
               Node: postgres_srv / Status: Alive
                 Agg push-down: yes
                 Relations: Aggregate on (public.ft1__postgres_srv__0)
                 Remote SQL: SELECT count(c6), sum("C 1"), count("C 1"), min(c2), max("C 1"), count(c2), sum(c2), sum((c2 * c2)), c2 FROM "S 1"."T 1" WHERE ((c2 < 5)) GROUP BY 9
(11 rows)

-- select count(c6), sum(c1), avg(c1), min(c2), max(c1), stddev(c2), sum(c1) * (random() <= 1)::int as sum2 from ft1 where c2 < 5 group by c2 order by 1, 2;
explain (verbose, costs off)
select count(c6), sum(c1), avg(c1), min(c2), max(c1), stddev(c2), sum(c1) * (random() <= 1)::int as sum2 from ft1 where c2 < 5 group by c2 order by 1, 2 limit 1;
                                                                                       QUERY PLAN                                                                                       
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit
   Output: (count(c6)), (sum(c1)), (avg(c1)), (min(c2)), (max(c1)), (stddev(c2)), (((sum(c1)) * ((random() <= '1'::double precision))::integer)), c2
   ->  Result
         Output: (count(c6)), (sum(c1)), (avg(c1)), (min(c2)), (max(c1)), (stddev(c2)), ((sum(c1)) * ((random() <= '1'::double precision))::integer), c2
         ->  Sort
               Output: (count(c6)), (sum(c1)), (avg(c1)), (min(c2)), (max(c1)), (stddev(c2)), c2
               Sort Key: (count(ft1.c6)), (sum(ft1.c1))
               ->  Foreign Scan
                     Output: (count(c6)), (sum(c1)), (avg(c1)), (min(c2)), (max(c1)), (stddev(c2)), c2
                     Node: postgres_srv / Status: Alive
                       Agg push-down: yes
                       Relations: Aggregate on (public.ft1__postgres_srv__0)
                       Remote SQL: SELECT count(c6), sum("C 1"), count("C 1"), min(c2), max("C 1"), count(c2), sum(c2), sum((c2 * c2)), c2 FROM "S 1"."T 1" WHERE ((c2 < 5)) GROUP BY 9
(13 rows)

select count(c6), sum(c1), avg(c1), min(c2), max(c1), stddev(c2), sum(c1) * (random() <= 1)::int as sum2 from ft1 where c2 < 5 group by c2 order by 1, 2 limit 1;
 count |  sum  | avg | min | max | stddev | sum2  
-------+-------+-----+-----+-----+--------+-------
   100 | 49600 | 496 |   1 | 991 |      0 | 49600
(1 row)

-- Aggregate is not pushed down as aggregation contains random()
explain (verbose, costs off)
select sum(c1 * (random() <= 1)::int) as sum, avg(c1) from ft1;
                                  QUERY PLAN                                   
-------------------------------------------------------------------------------
 Aggregate
   Output: sum((c1 * ((random() <= '1'::double precision))::integer)), avg(c1)
   ->  Foreign Scan on public.ft1
         Output: c1
         Node: postgres_srv / Status: Alive
           Remote SQL: SELECT "C 1" FROM "S 1"."T 1"
(6 rows)

-- Aggregate over join query
explain (verbose, costs off)
select count(*), sum(t1.c1), avg(t2.c1) from ft1 t1 inner join ft1 t2 on (t1.c2 = t2.c2) where t1.c2 = 6;
                                      QUERY PLAN                                      
--------------------------------------------------------------------------------------
 Aggregate
   Output: count(*), sum(t1.c1), avg(t2.c1)
   ->  Nested Loop
         Output: t1.c1, t2.c1
         ->  Foreign Scan on public.ft1 t1
               Output: t1.c1, t1.c2
               Node: postgres_srv / Status: Alive
                 Remote SQL: SELECT "C 1", c2 FROM "S 1"."T 1" WHERE ((c2 = 6))
         ->  Materialize
               Output: t2.c1, t2.c2
               ->  Foreign Scan on public.ft1 t2
                     Output: t2.c1, t2.c2
                     Node: postgres_srv / Status: Alive
                       Remote SQL: SELECT "C 1", c2 FROM "S 1"."T 1" WHERE ((c2 = 6))
(14 rows)

select count(*), sum(t1.c1), avg(t2.c1) from ft1 t1 inner join ft1 t2 on (t1.c2 = t2.c2) where t1.c2 = 6;
 count |   sum   |         avg          
-------+---------+----------------------
 10000 | 5010000 | 501.0000000000000000
(1 row)

-- Not pushed down due to local conditions present in underneath input rel
-- explain (verbose, costs off)
-- select sum(t1.c1), count(t2.c1) from ft1 t1 inner join ft2 t2 on (t1.c1 = t2.c1) where ((t1.c1 * t2.c1)/(t1.c1 * t2.c1)) * random() <= 1;
-- GROUP BY clause having expressions
explain (verbose, costs off)
select c2/2, sum(c2) * (c2/2) from ft1 group by c2/2 order by c2/2;
                                       QUERY PLAN                                        
-----------------------------------------------------------------------------------------
 Sort
   Output: ((c2 / 2)), ((sum(c2) * (c2 / 2)))
   Sort Key: ((ft1.c2 / 2))
   ->  Foreign Scan
         Output: ((c2 / 2)), ((sum(c2) * (c2 / 2)))
         Node: postgres_srv / Status: Alive
           Agg push-down: yes
           Relations: Aggregate on (public.ft1__postgres_srv__0)
           Remote SQL: SELECT (c2 / 2), (sum(c2) * (c2 / 2)) FROM "S 1"."T 1" GROUP BY 1
(9 rows)

select c2/2, sum(c2) * (c2/2) from ft1 group by c2/2 order by c2/2;
 ?column? | ?column? 
----------+----------
        0 |        0
        1 |      500
        2 |     1800
        3 |     3900
        4 |     6800
(5 rows)

-- Aggregates in subquery are pushed down.
explain (verbose, costs off)
select count(x.a), sum(x.a) from (select c2 a, sum(c1) b from ft1 group by c2, sqrt(c1) order by 1, 2) x;
                                          QUERY PLAN                                           
-----------------------------------------------------------------------------------------------
 Aggregate
   Output: count(ft1.c2), sum(ft1.c2)
   ->  Sort
         Output: ft1.c2, (sum(ft1.c1)), (sqrt((ft1.c1)::double precision))
         Sort Key: ft1.c2, (sum(ft1.c1))
         ->  Foreign Scan
               Output: ft1.c2, (sum(ft1.c1)), (sqrt((ft1.c1)::double precision))
               Node: postgres_srv / Status: Alive
                 Agg push-down: yes
                 Relations: Aggregate on (public.ft1__postgres_srv__0)
                 Remote SQL: SELECT c2, sum("C 1"), sqrt("C 1") FROM "S 1"."T 1" GROUP BY 1, 3
(11 rows)

select count(x.a), sum(x.a) from (select c2 a, sum(c1) b from ft1 group by c2, sqrt(c1) order by 1, 2) x;
 count | sum  
-------+------
  1000 | 4500
(1 row)

-- Aggregate is still pushed down by taking unshippable expression out
explain (verbose, costs off)
select c2 * (random() <= 1)::int as sum1, sum(c1) * c2 as sum2 from ft1 group by c2 order by 1, 2;
                                            QUERY PLAN                                             
---------------------------------------------------------------------------------------------------
 Sort
   Output: ((c2 * ((random() <= '1'::double precision))::integer)), ((sum(c1) * c2)), c2
   Sort Key: ((ft1.c2 * ((random() <= '1'::double precision))::integer)), ((sum(ft1.c1) * ft1.c2))
   ->  Foreign Scan
         Output: ((c2 * ((random() <= '1'::double precision))::integer)), ((sum(c1) * c2)), c2
         Node: postgres_srv / Status: Alive
           Agg push-down: yes
           Relations: Aggregate on (public.ft1__postgres_srv__0)
           Remote SQL: SELECT (sum("C 1") * c2), c2 FROM "S 1"."T 1" GROUP BY 2
(9 rows)

-- select c2 * (random() <= 1)::int as sum1, sum(c1) * c2 as sum2 from ft1 group by c2 order by 1, 2;
-- Aggregate with unshippable GROUP BY clause are not pushed
explain (verbose, costs off)
select c2 * (random() <= 1)::int as c2 from ft2 group by c2 * (random() <= 1)::int order by 1;
                                  QUERY PLAN                                  
------------------------------------------------------------------------------
 Sort
   Output: ((c2 * ((random() <= '1'::double precision))::integer))
   Sort Key: ((ft2.c2 * ((random() <= '1'::double precision))::integer))
   ->  HashAggregate
         Output: ((c2 * ((random() <= '1'::double precision))::integer))
         Group Key: (ft2.c2 * ((random() <= '1'::double precision))::integer)
         ->  Foreign Scan on public.ft2
               Output: (c2 * ((random() <= '1'::double precision))::integer)
               Node: postgres_srv / Status: Alive
                 Remote SQL: SELECT c2 FROM "S 1"."T 1"
(10 rows)

-- GROUP BY clause in various forms, cardinal, alias and constant expression
explain (verbose, costs off)
select count(c2) w, c2 x, 5 y, 7.0 z from ft1 group by 2, y, 9.0::int order by 2;
                                       QUERY PLAN                                        
-----------------------------------------------------------------------------------------
 Sort
   Output: (count(c2)), c2, 5, 7.0, 9
   Sort Key: ft1.c2
   ->  Foreign Scan
         Output: (count(c2)), c2, 5, 7.0, 9
         Node: postgres_srv / Status: Alive
           Agg push-down: yes
           Relations: Aggregate on (public.ft1__postgres_srv__0)
           Remote SQL: SELECT count(c2), c2, 5, 7.0, 9 FROM "S 1"."T 1" GROUP BY 2, 3, 5
(9 rows)

-- select count(c2) w, c2 x, 5 y, 7.0 z from ft1 group by 2, y, 9.0::int order by 2;
-- GROUP BY clause referring to same column multiple times
-- Also, ORDER BY contains an aggregate function
explain (verbose, costs off)
select c2, c2 from ft1 where c2 > 6 group by 1, 2 order by sum(c1);
ERROR:  targetlist item has multiple sortgroupref labels
-- select c2, c2 from ft1 where c2 > 6 group by 1, 2 order by sum(c1);
-- Testing HAVING clause shippability
explain (verbose, costs off)
select c2, sum(c1) from ft2 group by c2 having avg(c1) < 500 and sum(c1) < 49800 order by c2;
                                                               QUERY PLAN                                                                
-----------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: c2, (sum(c1))
   Sort Key: ft2.c2
   ->  Foreign Scan
         Output: c2, (sum(c1))
         Node: postgres_srv / Status: Alive
           Agg push-down: yes
           Relations: Aggregate on (public.ft2__postgres_srv__0)
           Remote SQL: SELECT c2, sum("C 1") FROM "S 1"."T 1" GROUP BY 1 HAVING ((avg("C 1") < 500::numeric)) AND ((sum("C 1") < 49800))
(9 rows)

select c2, sum(c1) from ft2 group by c2 having avg(c1) < 500 and sum(c1) < 49800 order by c2;
 c2 |  sum  
----+-------
  1 | 49600
  2 | 49700
(2 rows)

-- Unshippable HAVING clause will be evaluated locally, and other qual in HAVING clause is pushed down
explain (verbose, costs off)
select count(*) from (select c5, count(c1) from ft1 group by c5, sqrt(c2) having (avg(c1) / avg(c1)) * random() <= 1 and avg(c1) < 500) x;
                                                               QUERY PLAN                                                                
-----------------------------------------------------------------------------------------------------------------------------------------
 Aggregate
   Output: count(*)
   ->  Foreign Scan
         Output: ft1.c5, NULL::bigint, (sqrt((ft1.c2)::double precision))
         Node: postgres_srv / Status: Alive
           Agg push-down: yes
           Relations: Aggregate on (public.ft1__postgres_srv__0)
           Remote SQL: SELECT c5, NULL::bigint, sqrt(c2), avg("C 1") FROM "S 1"."T 1" GROUP BY 1, 3 HAVING ((avg("C 1") < 500::numeric))
(8 rows)

-- select count(*) from (select c5, count(c1) from ft1 group by c5, sqrt(c2) having (avg(c1) / avg(c1)) * random() <= 1 and avg(c1) < 500) x;
-- Aggregate in HAVING clause is not pushable, and thus aggregation is not pushed down
explain (verbose, costs off)
select sum(c1) from ft1 group by c2 having avg(c1 * (random() <= 1)::int) > 100 order by 1;
                                            QUERY PLAN                                             
---------------------------------------------------------------------------------------------------
 Sort
   Output: (sum(c1)), c2
   Sort Key: (sum(ft1.c1))
   ->  HashAggregate
         Output: sum(c1), c2
         Group Key: ft1.c2
         Filter: (avg((ft1.c1 * ((random() <= '1'::double precision))::integer)) > '100'::numeric)
         ->  Foreign Scan on public.ft1
               Output: c2, c1
               Node: postgres_srv / Status: Alive
                 Remote SQL: SELECT "C 1", c2 FROM "S 1"."T 1"
(11 rows)

-- Remote aggregate in combination with a local Param (for the output
-- of an initplan) can be trouble, per bug #15781
explain (verbose, costs off)
select exists(select 1 from pg_enum), sum(c1) from ft1;
                        QUERY PLAN                         
-----------------------------------------------------------
 Foreign Scan
   Output: ($0), (sum(ft1.c1))
   Node: postgres_srv / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (public.ft1__postgres_srv__0)
     Remote SQL: SELECT sum("C 1") FROM "S 1"."T 1"
   InitPlan 1 (returns $0)
     ->  Seq Scan on pg_catalog.pg_enum
(8 rows)

-- select exists(select 1 from pg_enum), sum(c1) from ft1;
explain (verbose, costs off)
select exists(select 1 from pg_enum), sum(c1) from ft1 group by 1;
                     QUERY PLAN                      
-----------------------------------------------------
 GroupAggregate
   Output: ($0), sum(ft1.c1)
   Group Key: $0
   InitPlan 1 (returns $0)
     ->  Seq Scan on pg_catalog.pg_enum
   ->  Foreign Scan on public.ft1
         Output: $0, ft1.c1
         Node: postgres_srv / Status: Alive
           Remote SQL: SELECT "C 1" FROM "S 1"."T 1"
(9 rows)

select exists(select 1 from pg_enum), sum(c1) from ft1 group by 1;
 exists |  sum   
--------+--------
 t      | 500500
(1 row)

-- Testing ORDER BY, DISTINCT, FILTER, Ordered-sets and VARIADIC within aggregates
-- ORDER BY within aggregate, same column used to order
explain (verbose, costs off)
select array_agg(c1 order by c1) from ft1 where c1 < 100 group by c2 order by 1;
                                                            QUERY PLAN                                                             
-----------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: (array_agg(c1 ORDER BY c1)), c2
   Sort Key: (array_agg(ft1.c1 ORDER BY ft1.c1))
   ->  Foreign Scan
         Output: (array_agg(c1 ORDER BY c1)), c2
         Node: postgres_srv / Status: Alive
           Agg push-down: yes
           Relations: Aggregate on (public.ft1__postgres_srv__0)
           Remote SQL: SELECT array_agg("C 1" ORDER BY "C 1" ASC NULLS LAST), c2 FROM "S 1"."T 1" WHERE (("C 1" < 100)) GROUP BY 2
(9 rows)

-- select array_agg(c1 order by c1) from ft1 where c1 < 100 group by c2 order by 1;
-- ORDER BY within aggregate, different column used to order also using DESC
explain (verbose, costs off)
select array_agg(c5 order by c1 desc) from ft2 where c2 = 6 and c1 < 50;
                                                        QUERY PLAN                                                         
---------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Output: (array_agg(c5 ORDER BY c1 DESC))
   Node: postgres_srv / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (public.ft2__postgres_srv__0)
     Remote SQL: SELECT array_agg(c5 ORDER BY "C 1" DESC NULLS FIRST) FROM "S 1"."T 1" WHERE (("C 1" < 50)) AND ((c2 = 6))
(6 rows)

-- select array_agg(c5 order by c1 desc) from ft2 where c2 = 6 and c1 < 50;
-- DISTINCT within aggregate
explain (verbose, costs off)
select array_agg(distinct (t1.c1)%5) from ft4 t1 full join ft5 t2 on (t1.c1 = t2.c1) where t1.c1 < 20 or (t1.c1 is null and t2.c1 < 5) group by (t2.c1)%3 order by 1;
                                   QUERY PLAN                                    
---------------------------------------------------------------------------------
 Sort
   Output: (array_agg(DISTINCT (t1.c1 % 5))), ((t2.c1 % 3))
   Sort Key: (array_agg(DISTINCT (t1.c1 % 5)))
   ->  GroupAggregate
         Output: array_agg(DISTINCT (t1.c1 % 5)), ((t2.c1 % 3))
         Group Key: ((t2.c1 % 3))
         ->  Sort
               Output: ((t2.c1 % 3)), t1.c1
               Sort Key: ((t2.c1 % 3))
               ->  Merge Full Join
                     Output: (t2.c1 % 3), t1.c1
                     Merge Cond: (t1.c1 = t2.c1)
                     Filter: ((t1.c1 < 20) OR ((t1.c1 IS NULL) AND (t2.c1 < 5)))
                     ->  Sort
                           Output: t1.c1
                           Sort Key: t1.c1
                           ->  Foreign Scan on public.ft4 t1
                                 Output: t1.c1
                                 Node: postgres_srv / Status: Alive
                                   Remote SQL: SELECT c1 FROM "S 1"."T 3"
                     ->  Sort
                           Output: t2.c1
                           Sort Key: t2.c1
                           ->  Foreign Scan on public.ft5 t2
                                 Output: t2.c1
                                 Node: postgres_srv / Status: Alive
                                   Remote SQL: SELECT c1 FROM "S 1"."T 4"
(27 rows)

select array_agg(distinct (t1.c1)%5) from ft4 t1 full join ft5 t2 on (t1.c1 = t2.c1) where t1.c1 < 20 or (t1.c1 is null and t2.c1 < 5) group by (t2.c1)%3 order by 1;
  array_agg   
--------------
 {0,1,2,3,4}
 {1,2,3,NULL}
(2 rows)

-- DISTINCT combined with ORDER BY within aggregate
explain (verbose, costs off)
select array_agg(distinct (t1.c1)%5 order by (t1.c1)%5) from ft4 t1 full join ft5 t2 on (t1.c1 = t2.c1) where t1.c1 < 20 or (t1.c1 is null and t2.c1 < 5) group by (t2.c1)%3 order by 1;
                                     QUERY PLAN                                      
-------------------------------------------------------------------------------------
 Sort
   Output: (array_agg(DISTINCT (t1.c1 % 5) ORDER BY (t1.c1 % 5))), ((t2.c1 % 3))
   Sort Key: (array_agg(DISTINCT (t1.c1 % 5) ORDER BY (t1.c1 % 5)))
   ->  GroupAggregate
         Output: array_agg(DISTINCT (t1.c1 % 5) ORDER BY (t1.c1 % 5)), ((t2.c1 % 3))
         Group Key: ((t2.c1 % 3))
         ->  Sort
               Output: ((t2.c1 % 3)), t1.c1
               Sort Key: ((t2.c1 % 3))
               ->  Merge Full Join
                     Output: (t2.c1 % 3), t1.c1
                     Merge Cond: (t1.c1 = t2.c1)
                     Filter: ((t1.c1 < 20) OR ((t1.c1 IS NULL) AND (t2.c1 < 5)))
                     ->  Sort
                           Output: t1.c1
                           Sort Key: t1.c1
                           ->  Foreign Scan on public.ft4 t1
                                 Output: t1.c1
                                 Node: postgres_srv / Status: Alive
                                   Remote SQL: SELECT c1 FROM "S 1"."T 3"
                     ->  Sort
                           Output: t2.c1
                           Sort Key: t2.c1
                           ->  Foreign Scan on public.ft5 t2
                                 Output: t2.c1
                                 Node: postgres_srv / Status: Alive
                                   Remote SQL: SELECT c1 FROM "S 1"."T 4"
(27 rows)

select array_agg(distinct (t1.c1)%5 order by (t1.c1)%5) from ft4 t1 full join ft5 t2 on (t1.c1 = t2.c1) where t1.c1 < 20 or (t1.c1 is null and t2.c1 < 5) group by (t2.c1)%3 order by 1;
  array_agg   
--------------
 {0,1,2,3,4}
 {1,2,3,NULL}
(2 rows)

explain (verbose, costs off)
select array_agg(distinct (t1.c1)%5 order by (t1.c1)%5 desc nulls last) from ft4 t1 full join ft5 t2 on (t1.c1 = t2.c1) where t1.c1 < 20 or (t1.c1 is null and t2.c1 < 5) group by (t2.c1)%3 order by 1;
                                             QUERY PLAN                                              
-----------------------------------------------------------------------------------------------------
 Sort
   Output: (array_agg(DISTINCT (t1.c1 % 5) ORDER BY (t1.c1 % 5) DESC NULLS LAST)), ((t2.c1 % 3))
   Sort Key: (array_agg(DISTINCT (t1.c1 % 5) ORDER BY (t1.c1 % 5) DESC NULLS LAST))
   ->  GroupAggregate
         Output: array_agg(DISTINCT (t1.c1 % 5) ORDER BY (t1.c1 % 5) DESC NULLS LAST), ((t2.c1 % 3))
         Group Key: ((t2.c1 % 3))
         ->  Sort
               Output: ((t2.c1 % 3)), t1.c1
               Sort Key: ((t2.c1 % 3))
               ->  Merge Full Join
                     Output: (t2.c1 % 3), t1.c1
                     Merge Cond: (t1.c1 = t2.c1)
                     Filter: ((t1.c1 < 20) OR ((t1.c1 IS NULL) AND (t2.c1 < 5)))
                     ->  Sort
                           Output: t1.c1
                           Sort Key: t1.c1
                           ->  Foreign Scan on public.ft4 t1
                                 Output: t1.c1
                                 Node: postgres_srv / Status: Alive
                                   Remote SQL: SELECT c1 FROM "S 1"."T 3"
                     ->  Sort
                           Output: t2.c1
                           Sort Key: t2.c1
                           ->  Foreign Scan on public.ft5 t2
                                 Output: t2.c1
                                 Node: postgres_srv / Status: Alive
                                   Remote SQL: SELECT c1 FROM "S 1"."T 4"
(27 rows)

select array_agg(distinct (t1.c1)%5 order by (t1.c1)%5 desc nulls last) from ft4 t1 full join ft5 t2 on (t1.c1 = t2.c1) where t1.c1 < 20 or (t1.c1 is null and t2.c1 < 5) group by (t2.c1)%3 order by 1;
  array_agg   
--------------
 {3,2,1,NULL}
 {4,3,2,1,0}
(2 rows)

-- FILTER within aggregate
explain (verbose, costs off)
select sum(c1) filter (where c1 < 100 and c2 > 5) from ft1 group by c2 order by 1 nulls last;
                                                     QUERY PLAN                                                      
---------------------------------------------------------------------------------------------------------------------
 Sort
   Output: (sum(c1) FILTER (WHERE ((c1 < 100) AND (c2 > 5)))), c2
   Sort Key: (sum(ft1.c1) FILTER (WHERE ((ft1.c1 < 100) AND (ft1.c2 > 5))))
   ->  Foreign Scan
         Output: (sum(c1) FILTER (WHERE ((c1 < 100) AND (c2 > 5)))), c2
         Node: postgres_srv / Status: Alive
           Agg push-down: yes
           Relations: Aggregate on (public.ft1__postgres_srv__0)
           Remote SQL: SELECT sum("C 1") FILTER (WHERE (("C 1" < 100) AND (c2 > 5))), c2 FROM "S 1"."T 1" GROUP BY 2
(9 rows)

select sum(c1) filter (where c1 < 100 and c2 > 5) from ft1 group by c2 order by 1 nulls last;
 sum 
-----
 510
 520
 530
 540
    
    
    
    
    
    
(10 rows)

-- DISTINCT, ORDER BY and FILTER within aggregate
explain (verbose, costs off)
select sum(c1%3), sum(distinct c1%3 order by c1%3) filter (where c1%3 < 2), c2 from ft1 where c2 = 6 group by c2;
                                                                                         QUERY PLAN                                                                                         
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Output: (sum((c1 % 3))), (sum(DISTINCT (c1 % 3) ORDER BY (c1 % 3)) FILTER (WHERE ((c1 % 3) < 2))), c2
   Node: postgres_srv / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (public.ft1__postgres_srv__0)
     Remote SQL: SELECT sum(("C 1" % 3)), sum(DISTINCT ("C 1" % 3) ORDER BY (("C 1" % 3)) ASC NULLS LAST) FILTER (WHERE (("C 1" % 3) < 2)), c2 FROM "S 1"."T 1" WHERE ((c2 = 6)) GROUP BY 3
(6 rows)

select sum(c1%3), sum(distinct c1%3 order by c1%3) filter (where c1%3 < 2), c2 from ft1 where c2 = 6 group by c2;
 sum | sum | c2 
-----+-----+----
  99 |   1 |  6
(1 row)

-- Outer query is aggregation query
-- explain (verbose, costs off)
-- select distinct (select count(*) filter (where t2.c2 = 6 and t2.c1 < 10) from ft1 t1 where t1.c1 = 6) from ft2 t2 where t2.c2 % 6 = 0 order by 1;
-- select distinct (select count(*) filter (where t2.c2 = 6 and t2.c1 < 10) from ft1 t1 where t1.c1 = 6) from ft2 t2 where t2.c2 % 6 = 0 order by 1;
-- Inner query is aggregation query
explain (verbose, costs off)
select distinct (select count(t1.c1) filter (where t2.c2 = 6 and t2.c1 < 10) from ft1 t1 where t1.c1 = 6) from ft2 t2 where t2.c2 % 6 = 0 order by 1;
                                                                       QUERY PLAN                                                                       
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Unique
   Output: ((SubPlan 1))
   ->  Sort
         Output: ((SubPlan 1))
         Sort Key: ((SubPlan 1))
         ->  Foreign Scan on public.ft2 t2
               Output: (SubPlan 1)
               Node: postgres_srv / Status: Alive
                 Remote SQL: SELECT "C 1", c2 FROM "S 1"."T 1" WHERE (((c2 % 6) = 0))
               SubPlan 1
                 ->  Foreign Scan
                       Output: (count(t1.c1) FILTER (WHERE ((t2.c2 = 6) AND (t2.c1 < 10))))
                       Node: postgres_srv / Status: Alive
                         Agg push-down: yes
                         Relations: Aggregate on (public.ft1__postgres_srv__0)
                         Remote SQL: SELECT count("C 1") FILTER (WHERE (($1::integer = 6) AND ($2::integer < 10))) FROM "S 1"."T 1" WHERE (("C 1" = 6))
(16 rows)

-- select distinct (select count(t1.c1) filter (where t2.c2 = 6 and t2.c1 < 10) from ft1 t1 where t1.c1 = 6) from ft2 t2 where t2.c2 % 6 = 0 order by 1;
-- Aggregate not pushed down as FILTER condition is not pushable
explain (verbose, costs off)
select sum(c1) filter (where (c1 / c1) * random() <= 1) from ft1 group by c2 order by 1;
                                                       QUERY PLAN                                                       
------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: (sum(c1) FILTER (WHERE ((((c1 / c1))::double precision * random()) <= '1'::double precision))), c2
   Sort Key: (sum(ft1.c1) FILTER (WHERE ((((ft1.c1 / ft1.c1))::double precision * random()) <= '1'::double precision)))
   ->  HashAggregate
         Output: sum(c1) FILTER (WHERE ((((c1 / c1))::double precision * random()) <= '1'::double precision)), c2
         Group Key: ft1.c2
         ->  Foreign Scan on public.ft1
               Output: c2, c1
               Node: postgres_srv / Status: Alive
                 Remote SQL: SELECT "C 1", c2 FROM "S 1"."T 1"
(10 rows)

explain (verbose, costs off)
select sum(c2) filter (where c2 in (select c2 from ft1 where c2 < 5)) from ft1;
                             QUERY PLAN                              
---------------------------------------------------------------------
 Aggregate
   Output: sum(ft1.c2) FILTER (WHERE (hashed SubPlan 1))
   ->  Foreign Scan on public.ft1
         Output: ft1.c2
         Node: postgres_srv / Status: Alive
           Remote SQL: SELECT c2 FROM "S 1"."T 1"
   SubPlan 1
     ->  Foreign Scan on public.ft1 ft1_1
           Output: ft1_1.c2
           Node: postgres_srv / Status: Alive
             Remote SQL: SELECT c2 FROM "S 1"."T 1" WHERE ((c2 < 5))
(11 rows)

-- Ordered-sets within aggregate
explain (verbose, costs off)
select c2, rank('10'::varchar) within group (order by c6), percentile_cont(c2/10::numeric) within group (order by c1) from ft1 where c2 < 10 group by c2 having percentile_cont(c2/10::numeric) within group (order by c1) < 500 order by c2;
                                                                                                                                                                            QUERY PLAN                                                                                                                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: c2, (rank('10'::character varying) WITHIN GROUP (ORDER BY c6)), (percentile_cont((((c2)::numeric / '10'::numeric))::double precision) WITHIN GROUP (ORDER BY ((c1)::double precision)))
   Sort Key: ft1.c2
   ->  Foreign Scan
         Output: c2, (rank('10'::character varying) WITHIN GROUP (ORDER BY c6)), (percentile_cont((((c2)::numeric / '10'::numeric))::double precision) WITHIN GROUP (ORDER BY ((c1)::double precision)))
         Node: postgres_srv / Status: Alive
           Agg push-down: yes
           Relations: Aggregate on (public.ft1__postgres_srv__0)
           Remote SQL: SELECT c2, rank('10'::character varying) WITHIN GROUP (ORDER BY c6 ASC NULLS LAST), percentile_cont((c2 / 10::numeric)) WITHIN GROUP (ORDER BY ("C 1") ASC NULLS LAST) FROM "S 1"."T 1" WHERE ((c2 < 10)) GROUP BY 1 HAVING ((percentile_cont((c2 / 10::numeric)) WITHIN GROUP (ORDER BY ("C 1") ASC NULLS LAST) < 500::double precision))
(9 rows)

-- select c2, rank('10'::varchar) within group (order by c6), percentile_cont(c2/10::numeric) within group (order by c1) from ft1 where c2 < 10 group by c2 having percentile_cont(c2/10::numeric) within group (order by c1) < 500 order by c2;
-- Using multiple arguments within aggregates
explain (verbose, costs off)
select c1, rank(c1, c2) within group (order by c1, c2) from ft1 group by c1, c2 having c1 = 6 order by 1;
                                                                              QUERY PLAN                                                                              
----------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Output: c1, (rank(c1, c2) WITHIN GROUP (ORDER BY c1, c2)), c2
   Node: postgres_srv / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (public.ft1__postgres_srv__0)
     Remote SQL: SELECT "C 1", rank("C 1", c2) WITHIN GROUP (ORDER BY "C 1" ASC NULLS LAST, c2 ASC NULLS LAST), c2 FROM "S 1"."T 1" WHERE (("C 1" = 6)) GROUP BY 1, 3
(6 rows)

select c1, rank(c1, c2) within group (order by c1, c2) from ft1 group by c1, c2 having c1 = 6 order by 1;
 c1 | rank 
----+------
  6 |    1
(1 row)

-- User defined function for user defined aggregate, VARIADIC
create function least_accum(anyelement, variadic anyarray)
returns anyelement language sql as
  'select least($1, min($2[i])) from generate_subscripts($2,1) g(i)';
create aggregate least_agg(variadic items anyarray) (
  stype = anyelement, sfunc = least_accum
);
-- Disable hash aggregation for plan stability.
set enable_hashagg to false;
-- Not pushed down due to user defined aggregate
explain (verbose, costs off)
select c2, least_agg(c1) from ft1 group by c2 order by c2;
                          QUERY PLAN                           
---------------------------------------------------------------
 GroupAggregate
   Output: c2, least_agg(VARIADIC ARRAY[c1])
   Group Key: ft1.c2
   ->  Sort
         Output: c2, c1
         Sort Key: ft1.c2
         ->  Foreign Scan on public.ft1
               Output: c2, c1
               Node: postgres_srv / Status: Alive
                 Remote SQL: SELECT "C 1", c2 FROM "S 1"."T 1"
(10 rows)

-- Add function and aggregate into extension
alter extension postgres_fdw add function least_accum(anyelement, variadic anyarray);
alter extension postgres_fdw add aggregate least_agg(variadic items anyarray);
alter server postgres_srv options (set extensions 'postgres_fdw');
-- Now aggregate will be pushed.  Aggregate will display VARIADIC argument.
explain (verbose, costs off)
select c2, least_agg(c1) from ft1 where c2 < 100 group by c2 order by c2;
                                                       QUERY PLAN                                                        
-------------------------------------------------------------------------------------------------------------------------
 Sort
   Output: c2, (least_agg(VARIADIC ARRAY[c1]))
   Sort Key: ft1.c2
   ->  Foreign Scan
         Output: c2, (least_agg(VARIADIC ARRAY[c1]))
         Node: postgres_srv / Status: Alive
           Agg push-down: yes
           Relations: Aggregate on (public.ft1__postgres_srv__0)
           Remote SQL: SELECT c2, public.least_agg(VARIADIC ARRAY["C 1"]) FROM "S 1"."T 1" WHERE ((c2 < 100)) GROUP BY 1
(9 rows)

-- select c2, least_agg(c1) from ft1 where c2 < 100 group by c2 order by c2;
-- Remove function and aggregate from extension
alter extension postgres_fdw drop function least_accum(anyelement, variadic anyarray);
alter extension postgres_fdw drop aggregate least_agg(variadic items anyarray);
alter server postgres_srv options (set extensions 'postgres_fdw');
-- Not pushed down as we have dropped objects from extension.
explain (verbose, costs off)
select c2, least_agg(c1) from ft1 group by c2 order by c2;
                          QUERY PLAN                           
---------------------------------------------------------------
 GroupAggregate
   Output: c2, least_agg(VARIADIC ARRAY[c1])
   Group Key: ft1.c2
   ->  Sort
         Output: c2, c1
         Sort Key: ft1.c2
         ->  Foreign Scan on public.ft1
               Output: c2, c1
               Node: postgres_srv / Status: Alive
                 Remote SQL: SELECT "C 1", c2 FROM "S 1"."T 1"
(10 rows)

-- Cleanup
reset enable_hashagg;
drop aggregate least_agg(variadic items anyarray);
drop function least_accum(anyelement, variadic anyarray);
-- Testing USING OPERATOR() in ORDER BY within aggregate.
-- For this, we need user defined operators along with operator family and
-- operator class.  Create those and then add them in extension.  Note that
-- user defined objects are considered unshippable unless they are part of
-- the extension.
create operator public.<^ (
 leftarg = int4,
 rightarg = int4,
 procedure = int4eq
);
create operator public.=^ (
 leftarg = int4,
 rightarg = int4,
 procedure = int4lt
);
create operator public.>^ (
 leftarg = int4,
 rightarg = int4,
 procedure = int4gt
);
create operator family my_op_family using btree;
create function my_op_cmp(a int, b int) returns int as
  $$begin return btint4cmp(a, b); end $$ language plpgsql;
create operator class my_op_class for type int using btree family my_op_family as
 operator 1 public.<^,
 operator 3 public.=^,
 operator 5 public.>^,
 function 1 my_op_cmp(int, int);
-- This will not be pushed as user defined sort operator is not part of the
-- extension yet.
explain (verbose, costs off)
select array_agg(c1 order by c1 using operator(public.<^)) from ft2 where c2 = 6 and c1 < 100 group by c2;
                                          QUERY PLAN                                          
----------------------------------------------------------------------------------------------
 GroupAggregate
   Output: array_agg(c1 ORDER BY c1 USING <^ NULLS LAST), c2
   Group Key: ft2.c2
   ->  Foreign Scan on public.ft2
         Output: c2, c1
         Node: postgres_srv / Status: Alive
           Remote SQL: SELECT "C 1", c2 FROM "S 1"."T 1" WHERE (("C 1" < 100)) AND ((c2 = 6))
(7 rows)

-- Update local stats on ft2
ANALYZE ft2;
WARNING:  skipping "ft2" --- cannot analyze this foreign table
-- Add into extension
alter extension postgres_fdw add operator class my_op_class using btree;
alter extension postgres_fdw add function my_op_cmp(a int, b int);
alter extension postgres_fdw add operator family my_op_family using btree;
alter extension postgres_fdw add operator public.<^(int, int);
alter extension postgres_fdw add operator public.=^(int, int);
alter extension postgres_fdw add operator public.>^(int, int);
alter server postgres_srv options (set extensions 'postgres_fdw');
-- Now this will be pushed as sort operator is part of the extension.
explain (verbose, costs off)
select array_agg(c1 order by c1 using operator(public.<^)) from ft2 where c2 = 6 and c1 < 100 group by c2;
                                                                            QUERY PLAN                                                                            
------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Output: (array_agg(c1 ORDER BY c1 USING <^ NULLS LAST)), c2
   Node: postgres_srv / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (public.ft2__postgres_srv__0)
     Remote SQL: SELECT array_agg("C 1" ORDER BY "C 1" USING OPERATOR(public.<^) NULLS LAST), c2 FROM "S 1"."T 1" WHERE (("C 1" < 100)) AND ((c2 = 6)) GROUP BY 2
(6 rows)

-- select array_agg(c1 order by c1 using operator(public.<^)) from ft2 where c2 = 6 and c1 < 100 group by c2;
-- Remove from extension
alter extension postgres_fdw drop operator class my_op_class using btree;
alter extension postgres_fdw drop function my_op_cmp(a int, b int);
alter extension postgres_fdw drop operator family my_op_family using btree;
alter extension postgres_fdw drop operator public.<^(int, int);
alter extension postgres_fdw drop operator public.=^(int, int);
alter extension postgres_fdw drop operator public.>^(int, int);
alter server postgres_srv options (set extensions 'postgres_fdw');
-- This will not be pushed as sort operator is now removed from the extension.
explain (verbose, costs off)
select array_agg(c1 order by c1 using operator(public.<^)) from ft2 where c2 = 6 and c1 < 100 group by c2;
                                          QUERY PLAN                                          
----------------------------------------------------------------------------------------------
 GroupAggregate
   Output: array_agg(c1 ORDER BY c1 USING <^ NULLS LAST), c2
   Group Key: ft2.c2
   ->  Foreign Scan on public.ft2
         Output: c2, c1
         Node: postgres_srv / Status: Alive
           Remote SQL: SELECT "C 1", c2 FROM "S 1"."T 1" WHERE (("C 1" < 100)) AND ((c2 = 6))
(7 rows)

-- Cleanup
drop operator class my_op_class using btree;
drop function my_op_cmp(a int, b int);
drop operator family my_op_family using btree;
drop operator public.>^(int, int);
drop operator public.=^(int, int);
drop operator public.<^(int, int);
-- Input relation to aggregate push down hook is not safe to pushdown and thus
-- the aggregate cannot be pushed down to foreign server.
explain (verbose, costs off)
select count(t1.c3) from ft2 t1 left join ft2 t2 on (t1.c1 = random() * t2.c2);
                                        QUERY PLAN                                         
-------------------------------------------------------------------------------------------
 Aggregate
   Output: count(t1.c3)
   ->  Nested Loop Left Join
         Output: t1.c3
         Join Filter: ((t1.c1)::double precision = (random() * (t2.c2)::double precision))
         ->  Foreign Scan on public.ft2 t1
               Output: t1.c3, t1.c1
               Node: postgres_srv / Status: Alive
                 Remote SQL: SELECT "C 1", c3 FROM "S 1"."T 1"
         ->  Materialize
               Output: t2.c2
               ->  Foreign Scan on public.ft2 t2
                     Output: t2.c2
                     Node: postgres_srv / Status: Alive
                       Remote SQL: SELECT c2 FROM "S 1"."T 1"
(15 rows)

-- Subquery in FROM clause having aggregate
explain (verbose, costs off)
select count(*), x.b from ft1, (select c2 a, sum(c1) b from ft1 group by c2) x where ft1.c2 = x.a group by x.b order by 1, 2;
                                              QUERY PLAN                                               
-------------------------------------------------------------------------------------------------------
 Sort
   Output: (count(*)), x.b
   Sort Key: (count(*)), x.b
   ->  GroupAggregate
         Output: count(*), x.b
         Group Key: x.b
         ->  Sort
               Output: x.b
               Sort Key: x.b
               ->  Hash Join
                     Output: x.b
                     Inner Unique: true
                     Hash Cond: (ft1.c2 = x.a)
                     ->  Foreign Scan on public.ft1
                           Output: ft1.c2
                           Node: postgres_srv / Status: Alive
                             Remote SQL: SELECT c2 FROM "S 1"."T 1"
                     ->  Hash
                           Output: x.b, x.a
                           ->  Subquery Scan on x
                                 Output: x.b, x.a
                                 ->  Foreign Scan
                                       Output: ft1_1.c2, (sum(ft1_1.c1))
                                       Node: postgres_srv / Status: Alive
                                         Agg push-down: yes
                                         Relations: Aggregate on (public.ft1__postgres_srv__0)
                                         Remote SQL: SELECT c2, sum("C 1") FROM "S 1"."T 1" GROUP BY 1
(27 rows)

select count(*), x.b from ft1, (select c2 a, sum(c1) b from ft1 group by c2) x where ft1.c2 = x.a group by x.b order by 1, 2;
 count |   b   
-------+-------
   100 | 49600
   100 | 49700
   100 | 49800
   100 | 49900
   100 | 50000
   100 | 50100
   100 | 50200
   100 | 50300
   100 | 50400
   100 | 50500
(10 rows)

-- FULL join with IS NULL check in HAVING
explain (verbose, costs off)
select avg(t1.c1), sum(t2.c1) from ft4 t1 full join ft5 t2 on (t1.c1 = t2.c1) group by t2.c1 having (avg(t1.c1) is null and sum(t2.c1) < 10) or sum(t2.c1) is null order by 1 nulls last, 2;
                                       QUERY PLAN                                       
----------------------------------------------------------------------------------------
 Sort
   Output: (avg(t1.c1)), (sum(t2.c1)), t2.c1
   Sort Key: (avg(t1.c1)), (sum(t2.c1))
   ->  HashAggregate
         Output: avg(t1.c1), sum(t2.c1), t2.c1
         Group Key: t2.c1
         Filter: (((avg(t1.c1) IS NULL) AND (sum(t2.c1) < 10)) OR (sum(t2.c1) IS NULL))
         ->  Merge Full Join
               Output: t2.c1, t1.c1
               Merge Cond: (t1.c1 = t2.c1)
               ->  Sort
                     Output: t1.c1
                     Sort Key: t1.c1
                     ->  Foreign Scan on public.ft4 t1
                           Output: t1.c1
                           Node: postgres_srv / Status: Alive
                             Remote SQL: SELECT c1 FROM "S 1"."T 3"
               ->  Sort
                     Output: t2.c1
                     Sort Key: t2.c1
                     ->  Foreign Scan on public.ft5 t2
                           Output: t2.c1
                           Node: postgres_srv / Status: Alive
                             Remote SQL: SELECT c1 FROM "S 1"."T 4"
(24 rows)

select avg(t1.c1), sum(t2.c1) from ft4 t1 full join ft5 t2 on (t1.c1 = t2.c1) group by t2.c1 having (avg(t1.c1) is null and sum(t2.c1) < 10) or sum(t2.c1) is null order by 1 nulls last, 2;
         avg         | sum 
---------------------+-----
 51.0000000000000000 |    
                     |   3
                     |   9
(3 rows)

-- Aggregate over FULL join needing to deparse the joining relations as
-- subqueries.
explain (verbose, costs off)
select count(*), sum(t1.c1), avg(t2.c1) from (select c1 from ft4 where c1 between 50 and 60) t1 full join (select c1 from ft5 where c1 between 50 and 60) t2 on (t1.c1 = t2.c1);
                                            QUERY PLAN                                            
--------------------------------------------------------------------------------------------------
 Aggregate
   Output: count(*), sum(ft4.c1), avg(ft5.c1)
   ->  Hash Full Join
         Output: ft4.c1, ft5.c1
         Hash Cond: (ft4.c1 = ft5.c1)
         ->  Foreign Scan on public.ft4
               Output: ft4.c1
               Node: postgres_srv / Status: Alive
                 Remote SQL: SELECT c1 FROM "S 1"."T 3" WHERE ((c1 >= 50)) AND ((c1 <= 60))
         ->  Hash
               Output: ft5.c1
               ->  Foreign Scan on public.ft5
                     Output: ft5.c1
                     Node: postgres_srv / Status: Alive
                       Remote SQL: SELECT c1 FROM "S 1"."T 4" WHERE ((c1 >= 50)) AND ((c1 <= 60))
(15 rows)

select count(*), sum(t1.c1), avg(t2.c1) from (select c1 from ft4 where c1 between 50 and 60) t1 full join (select c1 from ft5 where c1 between 50 and 60) t2 on (t1.c1 = t2.c1);
 count | sum |         avg         
-------+-----+---------------------
     8 | 330 | 55.5000000000000000
(1 row)

-- ORDER BY expression is part of the target list but not pushed down to
-- foreign server.
explain (verbose, costs off)
select sum(c2) * (random() <= 1)::int as sum from ft1 order by 1;
                                  QUERY PLAN                                  
------------------------------------------------------------------------------
 Sort
   Output: ((sum(c2) * ((random() <= '1'::double precision))::integer))
   Sort Key: ((sum(ft1.c2) * ((random() <= '1'::double precision))::integer))
   ->  Foreign Scan
         Output: ((sum(c2) * ((random() <= '1'::double precision))::integer))
         Node: postgres_srv / Status: Alive
           Agg push-down: yes
           Relations: Aggregate on (public.ft1__postgres_srv__0)
           Remote SQL: SELECT sum(c2) FROM "S 1"."T 1"
(9 rows)

select sum(c2) * (random() <= 1)::int as sum from ft1 order by 1;
 sum  
------
 4500
(1 row)

-- LATERAL join, with parameterization
set enable_hashagg to false;
explain (verbose, costs off)
select c2, sum from "S 1"."T 1" t1, lateral (select sum(t2.c1 + t1."C 1") sum from ft2 t2 group by t2.c1) qry where t1.c2 * 2 = qry.sum and t1.c2 < 3 and t1."C 1" < 100 order by 1;
                                               QUERY PLAN                                               
--------------------------------------------------------------------------------------------------------
 Sort
   Output: t1.c2, qry.sum
   Sort Key: t1.c2
   ->  Nested Loop
         Output: t1.c2, qry.sum
         ->  Foreign Scan on "S 1"."T 1" t1
               Output: t1.c2, t1."C 1"
               Remote SQL: SELECT "C 1", c2 FROM "S 1"."T 1" WHERE ((c2 < 3)) AND (("C 1" < 100))
         ->  Subquery Scan on qry
               Output: qry.sum, t2.c1
               Filter: ((t1.c2 * 2) = qry.sum)
               ->  Foreign Scan
                     Output: (sum((t2.c1 + t1."C 1"))), t2.c1
                     Node: postgres_srv / Status: Alive
                       Agg push-down: yes
                       Relations: Aggregate on (public.ft2__postgres_srv__0)
                       Remote SQL: SELECT sum(("C 1" + $1::integer)), "C 1" FROM "S 1"."T 1" GROUP BY 2
(17 rows)

-- select c2, sum from "S 1"."T 1" t1, lateral (select sum(t2.c1 + t1."C 1") sum from ft2 t2 group by t2.c1) qry where t1.c2 * 2 = qry.sum and t1.c2 < 3 and t1."C 1" < 100 order by 1;
reset enable_hashagg;
-- bug #15613: bad plan for foreign table scan with lateral reference
-- EXPLAIN (VERBOSE, COSTS OFF)
-- SELECT ref_0.c2, subq_1.*
-- FROM
--     "S 1"."T 1" AS ref_0,
--     LATERAL (
--         SELECT ref_0."C 1" c1, subq_0.*
--         FROM (SELECT ref_0.c2, ref_1.c3
--               FROM ft1 AS ref_1) AS subq_0
--              RIGHT JOIN ft2 AS ref_3 ON (subq_0.c3 = ref_3.c3)
--     ) AS subq_1
-- WHERE ref_0."C 1" < 10 AND subq_1.c3 = '00001'
-- ORDER BY ref_0."C 1";
-- SELECT ref_0.c2, subq_1.*
-- FROM
--     "S 1"."T 1" AS ref_0,
--     LATERAL (
--         SELECT ref_0."C 1" c1, subq_0.*
--         FROM (SELECT ref_0.c2, ref_1.c3
--               FROM ft1 AS ref_1) AS subq_0
--              RIGHT JOIN ft2 AS ref_3 ON (subq_0.c3 = ref_3.c3)
--     ) AS subq_1
-- WHERE ref_0."C 1" < 10 AND subq_1.c3 = '00001'
-- ORDER BY ref_0."C 1";
-- Check with placeHolderVars
explain (verbose, costs off)
select sum(q.a), count(q.b) from ft4 left join (select 13, avg(ft1.c1), sum(ft2.c1) from ft1 right join ft2 on (ft1.c1 = ft2.c1)) q(a, b, c) on (ft4.c1 <= q.b);
                                       QUERY PLAN                                        
-----------------------------------------------------------------------------------------
 Aggregate
   Output: sum(q.a), count(q.b)
   ->  Nested Loop Left Join
         Output: q.a, q.b
         Inner Unique: true
         Join Filter: ((ft4.c1)::numeric <= q.b)
         ->  Foreign Scan on public.ft4
               Output: ft4.c1
               Node: postgres_srv / Status: Alive
                 Remote SQL: SELECT c1 FROM "S 1"."T 3"
         ->  Materialize
               Output: q.a, q.b
               ->  Subquery Scan on q
                     Output: q.a, q.b
                     ->  Aggregate
                           Output: 13, avg(ft1.c1), NULL::bigint
                           ->  Merge Left Join
                                 Output: ft1.c1
                                 Merge Cond: (ft2.c1 = ft1.c1)
                                 ->  Sort
                                       Output: ft2.c1
                                       Sort Key: ft2.c1
                                       ->  Foreign Scan on public.ft2
                                             Output: ft2.c1
                                             Node: postgres_srv / Status: Alive
                                               Remote SQL: SELECT "C 1" FROM "S 1"."T 1"
                                 ->  Sort
                                       Output: ft1.c1
                                       Sort Key: ft1.c1
                                       ->  Foreign Scan on public.ft1
                                             Output: ft1.c1
                                             Node: postgres_srv / Status: Alive
                                               Remote SQL: SELECT "C 1" FROM "S 1"."T 1"
(33 rows)

select sum(q.a), count(q.b) from ft4 left join (select 13, avg(ft1.c1), sum(ft2.c1) from ft1 right join ft2 on (ft1.c1 = ft2.c1)) q(a, b, c) on (ft4.c1 <= q.b);
 sum | count 
-----+-------
 650 |    50
(1 row)

-- Not supported cases
-- Grouping sets
explain (verbose, costs off)
select c2, sum(c1) from ft1 where c2 < 3 group by rollup(c2) order by 1 nulls last;
                                   QUERY PLAN                                   
--------------------------------------------------------------------------------
 Sort
   Output: c2, (sum(c1))
   Sort Key: ft1.c2
   ->  MixedAggregate
         Output: c2, sum(c1)
         Hash Key: ft1.c2
         Group Key: ()
         ->  Foreign Scan on public.ft1
               Output: c2, c1
               Node: postgres_srv / Status: Alive
                 Remote SQL: SELECT "C 1", c2 FROM "S 1"."T 1" WHERE ((c2 < 3))
(11 rows)

select c2, sum(c1) from ft1 where c2 < 3 group by rollup(c2) order by 1 nulls last;
 c2 |  sum   
----+--------
  0 |  50500
  1 |  49600
  2 |  49700
    | 149800
(4 rows)

explain (verbose, costs off)
select c2, sum(c1) from ft1 where c2 < 3 group by cube(c2) order by 1 nulls last;
                                   QUERY PLAN                                   
--------------------------------------------------------------------------------
 Sort
   Output: c2, (sum(c1))
   Sort Key: ft1.c2
   ->  MixedAggregate
         Output: c2, sum(c1)
         Hash Key: ft1.c2
         Group Key: ()
         ->  Foreign Scan on public.ft1
               Output: c2, c1
               Node: postgres_srv / Status: Alive
                 Remote SQL: SELECT "C 1", c2 FROM "S 1"."T 1" WHERE ((c2 < 3))
(11 rows)

select c2, sum(c1) from ft1 where c2 < 3 group by cube(c2) order by 1 nulls last;
 c2 |  sum   
----+--------
  0 |  50500
  1 |  49600
  2 |  49700
    | 149800
(4 rows)

explain (verbose, costs off)
select c2, c6, sum(c1) from ft1 where c2 < 3 group by grouping sets(c2, c6) order by 1 nulls last, 2 nulls last;
                                     QUERY PLAN                                     
------------------------------------------------------------------------------------
 Sort
   Output: c2, c6, (sum(c1))
   Sort Key: ft1.c2, ft1.c6
   ->  HashAggregate
         Output: c2, c6, sum(c1)
         Hash Key: ft1.c2
         Hash Key: ft1.c6
         ->  Foreign Scan on public.ft1
               Output: c2, c6, c1
               Node: postgres_srv / Status: Alive
                 Remote SQL: SELECT "C 1", c2, c6 FROM "S 1"."T 1" WHERE ((c2 < 3))
(11 rows)

select c2, c6, sum(c1) from ft1 where c2 < 3 group by grouping sets(c2, c6) order by 1 nulls last, 2 nulls last;
 c2 | c6 |  sum  
----+----+-------
  0 |    | 50500
  1 |    | 49600
  2 |    | 49700
    | 0  | 50500
    | 1  | 49600
    | 2  | 49700
(6 rows)

explain (verbose, costs off)
select c2, sum(c1), grouping(c2) from ft1 where c2 < 3 group by c2 order by 1 nulls last;
                                   QUERY PLAN                                   
--------------------------------------------------------------------------------
 Sort
   Output: c2, (sum(c1)), (GROUPING(c2))
   Sort Key: ft1.c2
   ->  HashAggregate
         Output: c2, sum(c1), GROUPING(c2)
         Group Key: ft1.c2
         ->  Foreign Scan on public.ft1
               Output: c2, c1
               Node: postgres_srv / Status: Alive
                 Remote SQL: SELECT "C 1", c2 FROM "S 1"."T 1" WHERE ((c2 < 3))
(10 rows)

select c2, sum(c1), grouping(c2) from ft1 where c2 < 3 group by c2 order by 1 nulls last;
 c2 |  sum  | grouping 
----+-------+----------
  0 | 50500 |        0
  1 | 49600 |        0
  2 | 49700 |        0
(3 rows)

-- DISTINCT itself is not pushed down, whereas underneath aggregate is pushed
-- explain (verbose, costs off)
--select distinct sum(c1)/1000 s from ft2 where c2 < 6 group by c2 order by 1;
-- select distinct sum(c1)/1000 s from ft2 where c2 < 6 group by c2 order by 1;
-- WindowAgg
explain (verbose, costs off)
select c2, sum(c2), count(c2) over (partition by c2%2) from ft2 where c2 < 10 group by c2 order by 1;
                                                  QUERY PLAN                                                  
--------------------------------------------------------------------------------------------------------------
 Sort
   Output: c2, (sum(c2)), (count(c2) OVER (?)), ((c2 % 2))
   Sort Key: ft2.c2
   ->  WindowAgg
         Output: c2, (sum(c2)), count(c2) OVER (?), ((c2 % 2))
         ->  Sort
               Output: c2, ((c2 % 2)), (sum(c2))
               Sort Key: ((ft2.c2 % 2))
               ->  Foreign Scan
                     Output: c2, ((c2 % 2)), (sum(c2))
                     Node: postgres_srv / Status: Alive
                       Agg push-down: yes
                       Relations: Aggregate on (public.ft2__postgres_srv__0)
                       Remote SQL: SELECT c2, (c2 % 2), sum(c2) FROM "S 1"."T 1" WHERE ((c2 < 10)) GROUP BY 1
(14 rows)

-- select c2, sum(c2), count(c2) over (partition by c2%2) from ft2 where c2 < 10 group by c2 order by 1;
explain (verbose, costs off)
select c2, array_agg(c2) over (partition by c2%2 order by c2 desc) from ft1 where c2 < 10 group by c2 order by 1;
                                             QUERY PLAN                                              
-----------------------------------------------------------------------------------------------------
 Sort
   Output: c2, (array_agg(c2) OVER (?)), ((c2 % 2))
   Sort Key: ft1.c2
   ->  WindowAgg
         Output: c2, array_agg(c2) OVER (?), ((c2 % 2))
         ->  Sort
               Output: c2, ((c2 % 2))
               Sort Key: ((ft1.c2 % 2)), ft1.c2 DESC
               ->  Foreign Scan
                     Output: c2, ((c2 % 2))
                     Node: postgres_srv / Status: Alive
                       Agg push-down: yes
                       Relations: Aggregate on (public.ft1__postgres_srv__0)
                       Remote SQL: SELECT c2, (c2 % 2) FROM "S 1"."T 1" WHERE ((c2 < 10)) GROUP BY 1
(14 rows)

-- select c2, array_agg(c2) over (partition by c2%2 order by c2 desc) from ft1 where c2 < 10 group by c2 order by 1;
explain (verbose, costs off)
select c2, array_agg(c2) over (partition by c2%2 order by c2 range between current row and unbounded following) from ft1 where c2 < 10 group by c2 order by 1;
                                             QUERY PLAN                                              
-----------------------------------------------------------------------------------------------------
 Sort
   Output: c2, (array_agg(c2) OVER (?)), ((c2 % 2))
   Sort Key: ft1.c2
   ->  WindowAgg
         Output: c2, array_agg(c2) OVER (?), ((c2 % 2))
         ->  Sort
               Output: c2, ((c2 % 2))
               Sort Key: ((ft1.c2 % 2)), ft1.c2
               ->  Foreign Scan
                     Output: c2, ((c2 % 2))
                     Node: postgres_srv / Status: Alive
                       Agg push-down: yes
                       Relations: Aggregate on (public.ft1__postgres_srv__0)
                       Remote SQL: SELECT c2, (c2 % 2) FROM "S 1"."T 1" WHERE ((c2 < 10)) GROUP BY 1
(14 rows)

-- select c2, array_agg(c2) over (partition by c2%2 order by c2 range between current row and unbounded following) from ft1 where c2 < 10 group by c2 order by 1;
-- ===================================================================
-- parameterized queries
-- ===================================================================
-- simple join
PREPARE st1(int, int) AS SELECT t1.c3, t2.c3 FROM ft1 t1, ft2 t2 WHERE t1.c1 = $1 AND t2.c1 = $2;
-- EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st1(1, 2);
EXECUTE st1(1, 1);
  c3   |  c3   
-------+-------
 00001 | 00001
(1 row)

EXECUTE st1(101, 101);
  c3   |  c3   
-------+-------
 00101 | 00101
(1 row)

-- subquery using stable function (can't be sent to remote)
PREPARE st2(int) AS SELECT * FROM ft1 t1 WHERE t1.c1 < $2 AND t1.c3 IN (SELECT c3 FROM ft2 t2 WHERE c1 > $1 AND date(c4) = '1970-01-17'::date) ORDER BY c1;
-- EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st2(10, 20);
EXECUTE st2(10, 20);
 c1 | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8  |   __spd_url    
----+----+-------+------------------------------+--------------------------+----+------------+-----+----------------
 16 |  6 | 00016 | Sat Jan 17 00:00:00 1970 PST | Sat Jan 17 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
(1 row)

EXECUTE st2(101, 121);
 c1  | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8  |   __spd_url    
-----+----+-------+------------------------------+--------------------------+----+------------+-----+----------------
 116 |  6 | 00116 | Sat Jan 17 00:00:00 1970 PST | Sat Jan 17 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
(1 row)

-- subquery using immutable function (can be sent to remote)
PREPARE st3(int) AS SELECT * FROM ft1 t1 WHERE t1.c1 < $2 AND t1.c3 IN (SELECT c3 FROM ft2 t2 WHERE c1 > $1 AND date(c5) = '1970-01-17'::date) ORDER BY c1;
-- EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st3(10, 20);
EXECUTE st3(10, 20);
 c1 | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8  |   __spd_url    
----+----+-------+------------------------------+--------------------------+----+------------+-----+----------------
 16 |  6 | 00016 | Sat Jan 17 00:00:00 1970 PST | Sat Jan 17 00:00:00 1970 | 6  | 6          | foo | /postgres_srv/
(1 row)

EXECUTE st3(20, 30);
 c1 | c2 | c3 | c4 | c5 | c6 | c7 | c8 | __spd_url 
----+----+----+----+----+----+----+----+-----------
(0 rows)

-- custom plan should be chosen initially
PREPARE st4(int) AS SELECT * FROM ft1 t1 WHERE t1.c1 = $1;
EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st4(1);
                                          QUERY PLAN                                           
-----------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: c1, c2, c3, c4, c5, c6, c7, c8, __spd_url
   Node: postgres_srv / Status: Alive
     Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE (("C 1" = 1))
(4 rows)

EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st4(1);
                                          QUERY PLAN                                           
-----------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: c1, c2, c3, c4, c5, c6, c7, c8, __spd_url
   Node: postgres_srv / Status: Alive
     Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE (("C 1" = 1))
(4 rows)

EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st4(1);
                                          QUERY PLAN                                           
-----------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: c1, c2, c3, c4, c5, c6, c7, c8, __spd_url
   Node: postgres_srv / Status: Alive
     Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE (("C 1" = 1))
(4 rows)

EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st4(1);
                                          QUERY PLAN                                           
-----------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: c1, c2, c3, c4, c5, c6, c7, c8, __spd_url
   Node: postgres_srv / Status: Alive
     Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE (("C 1" = 1))
(4 rows)

EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st4(1);
                                          QUERY PLAN                                           
-----------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: c1, c2, c3, c4, c5, c6, c7, c8, __spd_url
   Node: postgres_srv / Status: Alive
     Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE (("C 1" = 1))
(4 rows)

-- once we try it enough times, should switch to generic plan
EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st4(1);
                                               QUERY PLAN                                                
---------------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: c1, c2, c3, c4, c5, c6, c7, c8, __spd_url
   Node: postgres_srv / Status: Alive
     Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE (("C 1" = $1::integer))
(4 rows)

-- value of $1 should not be sent to remote
PREPARE st5(user_enum,int) AS SELECT * FROM ft1 t1 WHERE c8 = $1 and c1 = $2;
EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st5('foo', 1);
                                          QUERY PLAN                                           
-----------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: c1, c2, c3, c4, c5, c6, c7, c8, __spd_url
   Filter: (t1.c8 = 'foo'::user_enum)
   Node: postgres_srv / Status: Alive
     Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE (("C 1" = 1))
(5 rows)

EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st5('foo', 1);
                                          QUERY PLAN                                           
-----------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: c1, c2, c3, c4, c5, c6, c7, c8, __spd_url
   Filter: (t1.c8 = 'foo'::user_enum)
   Node: postgres_srv / Status: Alive
     Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE (("C 1" = 1))
(5 rows)

EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st5('foo', 1);
                                          QUERY PLAN                                           
-----------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: c1, c2, c3, c4, c5, c6, c7, c8, __spd_url
   Filter: (t1.c8 = 'foo'::user_enum)
   Node: postgres_srv / Status: Alive
     Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE (("C 1" = 1))
(5 rows)

EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st5('foo', 1);
                                          QUERY PLAN                                           
-----------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: c1, c2, c3, c4, c5, c6, c7, c8, __spd_url
   Filter: (t1.c8 = 'foo'::user_enum)
   Node: postgres_srv / Status: Alive
     Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE (("C 1" = 1))
(5 rows)

EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st5('foo', 1);
                                          QUERY PLAN                                           
-----------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: c1, c2, c3, c4, c5, c6, c7, c8, __spd_url
   Filter: (t1.c8 = 'foo'::user_enum)
   Node: postgres_srv / Status: Alive
     Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE (("C 1" = 1))
(5 rows)

EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st5('foo', 1);
                                               QUERY PLAN                                                
---------------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: c1, c2, c3, c4, c5, c6, c7, c8, __spd_url
   Filter: (t1.c8 = $1)
   Node: postgres_srv / Status: Alive
     Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE (("C 1" = $1::integer))
(5 rows)

-- EXECUTE st5('foo', 1);
-- altering FDW options requires replanning
PREPARE st6 AS SELECT * FROM ft1 t1 WHERE t1.c1 = t1.c2;
EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st6;
                                           QUERY PLAN                                           
------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: c1, c2, c3, c4, c5, c6, c7, c8, __spd_url
   Node: postgres_srv / Status: Alive
     Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE (("C 1" = c2))
(4 rows)

PREPARE st7 AS INSERT INTO ft1 (c1,c2,c3) VALUES (1001,101,'foo');
-- EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st7;
ALTER TABLE "S 1"."T 1" RENAME TO "T 0";
-- ALTER FOREIGN TABLE ft1 OPTIONS (SET table_name 'T 0');
-- EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st6;
-- EXECUTE st6;
-- EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st7;
ALTER TABLE "S 1"."T 0" RENAME TO "T 1";
ALTER FOREIGN TABLE ft1__postgres_srv__0 OPTIONS (SET table_name 'T 1');
PREPARE st8 AS SELECT count(c3) FROM ft1 t1 WHERE t1.c1 === t1.c2;
EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st8;
                                        QUERY PLAN                                         
-------------------------------------------------------------------------------------------
 Foreign Scan
   Output: (count(c3))
   Node: postgres_srv / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (public.ft1__postgres_srv__0)
     Remote SQL: SELECT count(c3) FROM "S 1"."T 1" WHERE (("C 1" OPERATOR(public.===) c2))
(6 rows)

ALTER SERVER postgres_srv OPTIONS (DROP extensions);
EXPLAIN (VERBOSE, COSTS OFF) EXECUTE st8;
                         QUERY PLAN                          
-------------------------------------------------------------
 Aggregate
   Output: count(c3)
   ->  Foreign Scan on public.ft1 t1
         Output: c3
         Filter: (t1.c1 === t1.c2)
         Node: postgres_srv / Status: Alive
           Remote SQL: SELECT "C 1", c2, c3 FROM "S 1"."T 1"
(7 rows)

-- EXECUTE st8;
ALTER SERVER postgres_srv OPTIONS (ADD extensions 'postgres_fdw');
-- cleanup
DEALLOCATE st1;
DEALLOCATE st2;
DEALLOCATE st3;
DEALLOCATE st4;
DEALLOCATE st5;
DEALLOCATE st6;
DEALLOCATE st7;
DEALLOCATE st8;
-- System columns, except ctid and oid, should not be sent to remote
EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM ft1 t1 WHERE t1.tableoid = 'pg_class'::regclass LIMIT 1;
                                   QUERY PLAN                                    
---------------------------------------------------------------------------------
 Limit
   Output: c1, c2, c3, c4, c5, c6, c7, c8, __spd_url
   ->  Foreign Scan on public.ft1 t1
         Output: c1, c2, c3, c4, c5, c6, c7, c8, __spd_url
         Filter: (t1.tableoid = '1259'::oid)
         Node: postgres_srv / Status: Alive
           Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1"
(7 rows)

SELECT * FROM ft1 t1 WHERE t1.tableoid = 'ft1'::regclass LIMIT 1;
 c1 | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8  |   __spd_url    
----+----+-------+------------------------------+--------------------------+----+------------+-----+----------------
  1 |  1 | 00001 | Fri Jan 02 00:00:00 1970 PST | Fri Jan 02 00:00:00 1970 | 1  | 1          | foo | /postgres_srv/
(1 row)

EXPLAIN (VERBOSE, COSTS OFF)
SELECT tableoid::regclass, * FROM ft1 t1 LIMIT 1;
                                   QUERY PLAN                                    
---------------------------------------------------------------------------------
 Limit
   Output: ((tableoid)::regclass), c1, c2, c3, c4, c5, c6, c7, c8, __spd_url
   ->  Foreign Scan on public.ft1 t1
         Output: (tableoid)::regclass, c1, c2, c3, c4, c5, c6, c7, c8, __spd_url
         Node: postgres_srv / Status: Alive
           Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1"
(6 rows)

SELECT tableoid::regclass, * FROM ft1 t1 LIMIT 1;
 tableoid | c1 | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8  |   __spd_url    
----------+----+----+-------+------------------------------+--------------------------+----+------------+-----+----------------
 ft1      |  1 |  1 | 00001 | Fri Jan 02 00:00:00 1970 PST | Fri Jan 02 00:00:00 1970 | 1  | 1          | foo | /postgres_srv/
(1 row)

EXPLAIN (VERBOSE, COSTS OFF)
SELECT * FROM ft1 t1 WHERE t1.ctid = '(0,2)';
                                                  QUERY PLAN                                                   
---------------------------------------------------------------------------------------------------------------
 Foreign Scan on public.ft1 t1
   Output: c1, c2, c3, c4, c5, c6, c7, c8, __spd_url
   Node: postgres_srv / Status: Alive
     Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8, ctid FROM "S 1"."T 1" WHERE ((ctid = '(0,2)'::tid))
(4 rows)

SELECT * FROM ft1 t1 WHERE t1.ctid = '(0,2)';
 c1 | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8  |   __spd_url    
----+----+-------+------------------------------+--------------------------+----+------------+-----+----------------
  2 |  2 | 00002 | Sat Jan 03 00:00:00 1970 PST | Sat Jan 03 00:00:00 1970 | 2  | 2          | foo | /postgres_srv/
(1 row)

EXPLAIN (VERBOSE, COSTS OFF)
SELECT ctid, * FROM ft1 t1 LIMIT 1;
                                      QUERY PLAN                                       
---------------------------------------------------------------------------------------
 Limit
   Output: ctid, c1, c2, c3, c4, c5, c6, c7, c8, __spd_url
   ->  Foreign Scan on public.ft1 t1
         Output: ctid, c1, c2, c3, c4, c5, c6, c7, c8, __spd_url
         Node: postgres_srv / Status: Alive
           Remote SQL: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8, ctid FROM "S 1"."T 1"
(6 rows)

SELECT ctid, * FROM ft1 t1 LIMIT 1;
 ctid  | c1 | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8  |   __spd_url    
-------+----+----+-------+------------------------------+--------------------------+----+------------+-----+----------------
 (0,1) |  1 |  1 | 00001 | Fri Jan 02 00:00:00 1970 PST | Fri Jan 02 00:00:00 1970 | 1  | 1          | foo | /postgres_srv/
(1 row)

-- ===================================================================
-- used in PL/pgSQL function
-- ===================================================================
CREATE OR REPLACE FUNCTION f_test(p_c1 int) RETURNS int AS $$
DECLARE
	v_c1 int;
BEGIN
    SELECT c1 INTO v_c1 FROM ft1 WHERE c1 = p_c1 LIMIT 1;
    PERFORM c1 FROM ft1 WHERE c1 = p_c1 AND p_c1 = v_c1 LIMIT 1;
    RETURN v_c1;
END;
$$ LANGUAGE plpgsql;
SELECT f_test(100);
 f_test 
--------
    100
(1 row)

DROP FUNCTION f_test(int);
-- ===================================================================
-- conversion error
-- ===================================================================
-- ALTER FOREIGN TABLE ft1 ALTER COLUMN c8 TYPE int;
-- SELECT * FROM ft1 WHERE c1 = 1;  -- ERROR
-- SELECT  ft1.c1,  ft2.c2, ft1.c8 FROM ft1, ft2 WHERE ft1.c1 = ft2.c1 AND ft1.c1 = 1; -- ERROR
-- SELECT  ft1.c1,  ft2.c2, ft1 FROM ft1, ft2 WHERE ft1.c1 = ft2.c1 AND ft1.c1 = 1; -- ERROR
-- SELECT sum(c2), array_agg(c8) FROM ft1 GROUP BY c8; -- ERROR
-- ALTER FOREIGN TABLE ft1 ALTER COLUMN c8 TYPE user_enum;
-- ===================================================================
-- subtransaction
--  + local/remote error doesn't break cursor
-- ===================================================================
BEGIN;
DECLARE c CURSOR FOR SELECT * FROM ft1 ORDER BY c1;
FETCH c;
 c1 | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8  |   __spd_url    
----+----+-------+------------------------------+--------------------------+----+------------+-----+----------------
  1 |  1 | 00001 | Fri Jan 02 00:00:00 1970 PST | Fri Jan 02 00:00:00 1970 | 1  | 1          | foo | /postgres_srv/
(1 row)

SAVEPOINT s;
ERROR OUT;          -- ERROR
ERROR:  syntax error at or near "ERROR"
LINE 1: ERROR OUT;
        ^
ROLLBACK TO s;
FETCH c;
 c1 | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8  |   __spd_url    
----+----+-------+------------------------------+--------------------------+----+------------+-----+----------------
  2 |  2 | 00002 | Sat Jan 03 00:00:00 1970 PST | Sat Jan 03 00:00:00 1970 | 2  | 2          | foo | /postgres_srv/
(1 row)

SAVEPOINT s;
SELECT * FROM ft1 WHERE 1 / (c1 - 1) > 0;  -- ERROR
ERROR:  division by zero
CONTEXT:  remote SQL command: SELECT "C 1", c2, c3, c4, c5, c6, c7, c8 FROM "S 1"."T 1" WHERE (((1 / ("C 1" - 1)) > 0))
ERROR:  PGSpider can not get data from child node : postgres_srv
ROLLBACK TO s;
FETCH c;
 c1 | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8  |   __spd_url    
----+----+-------+------------------------------+--------------------------+----+------------+-----+----------------
  3 |  3 | 00003 | Sun Jan 04 00:00:00 1970 PST | Sun Jan 04 00:00:00 1970 | 3  | 3          | foo | /postgres_srv/
(1 row)

SELECT * FROM ft1 ORDER BY c1 LIMIT 1;
 c1 | c2 |  c3   |              c4              |            c5            | c6 |     c7     | c8  |   __spd_url    
----+----+-------+------------------------------+--------------------------+----+------------+-----+----------------
  1 |  1 | 00001 | Fri Jan 02 00:00:00 1970 PST | Fri Jan 02 00:00:00 1970 | 1  | 1          | foo | /postgres_srv/
(1 row)

COMMIT;
-- ===================================================================
-- test handling of collations
-- ===================================================================
---create table loct3 (f1 text collate "C" unique, f2 text, f3 varchar(10) unique);
create foreign table ft3 (f1 text collate "C", f2 text, f3 varchar(10), __spd_url text)
  server pgspider_srv;
create foreign table ft3__postgres_srv__0 (f1 text collate "C", f2 text, f3 varchar(10))
  server postgres_srv options (table_name 'loct3_1', use_remote_estimate 'true');
-- can be sent to remote
explain (verbose, costs off) select * from ft3 where f1 = 'foo';
                                    QUERY PLAN                                    
----------------------------------------------------------------------------------
 Foreign Scan on public.ft3
   Output: f1, f2, f3, __spd_url
   Node: postgres_srv / Status: Alive
     Remote SQL: SELECT f1, f2, f3 FROM public.loct3_1 WHERE ((f1 = 'foo'::text))
(4 rows)

explain (verbose, costs off) select * from ft3 where f1 COLLATE "C" = 'foo';
                                    QUERY PLAN                                    
----------------------------------------------------------------------------------
 Foreign Scan on public.ft3
   Output: f1, f2, f3, __spd_url
   Node: postgres_srv / Status: Alive
     Remote SQL: SELECT f1, f2, f3 FROM public.loct3_1 WHERE ((f1 = 'foo'::text))
(4 rows)

explain (verbose, costs off) select * from ft3 where f2 = 'foo';
                                    QUERY PLAN                                    
----------------------------------------------------------------------------------
 Foreign Scan on public.ft3
   Output: f1, f2, f3, __spd_url
   Node: postgres_srv / Status: Alive
     Remote SQL: SELECT f1, f2, f3 FROM public.loct3_1 WHERE ((f2 = 'foo'::text))
(4 rows)

explain (verbose, costs off) select * from ft3 where f3 = 'foo';
                                    QUERY PLAN                                    
----------------------------------------------------------------------------------
 Foreign Scan on public.ft3
   Output: f1, f2, f3, __spd_url
   Node: postgres_srv / Status: Alive
     Remote SQL: SELECT f1, f2, f3 FROM public.loct3_1 WHERE ((f3 = 'foo'::text))
(4 rows)

explain (verbose, costs off) select * from ft3 f, ft3 l
  where f.f3 = l.f3 and l.f1 = 'foo';
                                          QUERY PLAN                                          
----------------------------------------------------------------------------------------------
 Hash Join
   Output: f.f1, f.f2, f.f3, f.__spd_url, l.f1, l.f2, l.f3, l.__spd_url
   Hash Cond: ((f.f3)::text = (l.f3)::text)
   ->  Foreign Scan on public.ft3 f
         Output: f.f1, f.f2, f.f3, f.__spd_url
         Node: postgres_srv / Status: Alive
           Remote SQL: SELECT f1, f2, f3 FROM public.loct3_1
   ->  Hash
         Output: l.f1, l.f2, l.f3, l.__spd_url
         ->  Foreign Scan on public.ft3 l
               Output: l.f1, l.f2, l.f3, l.__spd_url
               Node: postgres_srv / Status: Alive
                 Remote SQL: SELECT f1, f2, f3 FROM public.loct3_1 WHERE ((f1 = 'foo'::text))
(13 rows)

-- can't be sent to remote
explain (verbose, costs off) select * from ft3 where f1 COLLATE "POSIX" = 'foo';
                      QUERY PLAN                       
-------------------------------------------------------
 Foreign Scan on public.ft3
   Output: f1, f2, f3, __spd_url
   Filter: ((ft3.f1)::text = 'foo'::text)
   Node: postgres_srv / Status: Alive
     Remote SQL: SELECT f1, f2, f3 FROM public.loct3_1
(5 rows)

explain (verbose, costs off) select * from ft3 where f1 = 'foo' COLLATE "C";
                      QUERY PLAN                       
-------------------------------------------------------
 Foreign Scan on public.ft3
   Output: f1, f2, f3, __spd_url
   Filter: (ft3.f1 = 'foo'::text COLLATE "C")
   Node: postgres_srv / Status: Alive
     Remote SQL: SELECT f1, f2, f3 FROM public.loct3_1
(5 rows)

explain (verbose, costs off) select * from ft3 where f2 COLLATE "C" = 'foo';
                      QUERY PLAN                       
-------------------------------------------------------
 Foreign Scan on public.ft3
   Output: f1, f2, f3, __spd_url
   Filter: ((ft3.f2)::text = 'foo'::text)
   Node: postgres_srv / Status: Alive
     Remote SQL: SELECT f1, f2, f3 FROM public.loct3_1
(5 rows)

explain (verbose, costs off) select * from ft3 where f2 = 'foo' COLLATE "C";
                      QUERY PLAN                       
-------------------------------------------------------
 Foreign Scan on public.ft3
   Output: f1, f2, f3, __spd_url
   Filter: (ft3.f2 = 'foo'::text COLLATE "C")
   Node: postgres_srv / Status: Alive
     Remote SQL: SELECT f1, f2, f3 FROM public.loct3_1
(5 rows)

explain (verbose, costs off) select * from ft3 f, ft3 l
  where f.f3 = l.f3 COLLATE "POSIX" and l.f1 = 'foo';
                                          QUERY PLAN                                          
----------------------------------------------------------------------------------------------
 Hash Join
   Output: f.f1, f.f2, f.f3, f.__spd_url, l.f1, l.f2, l.f3, l.__spd_url
   Hash Cond: ((f.f3)::text = (l.f3)::text)
   ->  Foreign Scan on public.ft3 f
         Output: f.f1, f.f2, f.f3, f.__spd_url
         Node: postgres_srv / Status: Alive
           Remote SQL: SELECT f1, f2, f3 FROM public.loct3_1
   ->  Hash
         Output: l.f1, l.f2, l.f3, l.__spd_url
         ->  Foreign Scan on public.ft3 l
               Output: l.f1, l.f2, l.f3, l.__spd_url
               Node: postgres_srv / Status: Alive
                 Remote SQL: SELECT f1, f2, f3 FROM public.loct3_1 WHERE ((f1 = 'foo'::text))
(13 rows)

-- ===================================================================
-- test writable foreign table stuff
-- ===================================================================
-- EXPLAIN (verbose, costs off)
-- INSERT INTO ft2 (c1,c2,c3) SELECT c1+1000,c2+100, c3 || c3 FROM ft2 LIMIT 20;
-- INSERT INTO ft2 (c1,c2,c3) SELECT c1+1000,c2+100, c3 || c3 FROM ft2 LIMIT 20;
INSERT INTO ft2__postgres_srv__0 (c1,c2,c3) SELECT c1+1000,c2+100, c3 || c3 FROM ft2 LIMIT 20;
-- INSERT INTO ft2 (c1,c2,c3)
--   VALUES (1101,201,'aaa'), (1102,202,'bbb'), (1103,203,'ccc') RETURNING *;
INSERT INTO ft2__postgres_srv__0 (c1,c2,c3)
  VALUES (1101,201,'aaa'), (1102,202,'bbb'), (1103,203,'ccc') RETURNING *;
  c1  | c2  | c3  | c4 | c5 | c6 |     c7     | c8 
------+-----+-----+----+----+----+------------+----
 1101 | 201 | aaa |    |    |    | ft2        | 
 1102 | 202 | bbb |    |    |    | ft2        | 
 1103 | 203 | ccc |    |    |    | ft2        | 
(3 rows)

-- INSERT INTO ft2 (c1,c2,c3) VALUES (1104,204,'ddd'), (1105,205,'eee');
INSERT INTO ft2__postgres_srv__0 (c1,c2,c3) VALUES (1104,204,'ddd'), (1105,205,'eee');
-- EXPLAIN (verbose, costs off)
-- UPDATE ft2 SET c2 = c2 + 300, c3 = c3 || '_update3' WHERE c1 % 10 = 3;              -- can be pushed down
-- UPDATE ft2 SET c2 = c2 + 300, c3 = c3 || '_update3' WHERE c1 % 10 = 3;
UPDATE ft2__postgres_srv__0 SET c2 = c2 + 300, c3 = c3 || '_update3' WHERE c1 % 10 = 3;
-- EXPLAIN (verbose, costs off)
-- UPDATE ft2 SET c2 = c2 + 400, c3 = c3 || '_update7' WHERE c1 % 10 = 7 RETURNING *;  -- can be pushed down
-- UPDATE ft2 SET c2 = c2 + 400, c3 = c3 || '_update7' WHERE c1 % 10 = 7 RETURNING *;
UPDATE ft2__postgres_srv__0 SET c2 = c2 + 400, c3 = c3 || '_update7' WHERE c1 % 10 = 7 RETURNING *;
  c1  | c2  |         c3         |              c4              |            c5            | c6 |     c7     | c8  
------+-----+--------------------+------------------------------+--------------------------+----+------------+-----
    7 | 407 | 00007_update7      | Thu Jan 08 00:00:00 1970 PST | Thu Jan 08 00:00:00 1970 | 7  | 7          | foo
   17 | 407 | 00017_update7      | Sun Jan 18 00:00:00 1970 PST | Sun Jan 18 00:00:00 1970 | 7  | 7          | foo
   27 | 407 | 00027_update7      | Wed Jan 28 00:00:00 1970 PST | Wed Jan 28 00:00:00 1970 | 7  | 7          | foo
   37 | 407 | 00037_update7      | Sat Feb 07 00:00:00 1970 PST | Sat Feb 07 00:00:00 1970 | 7  | 7          | foo
   47 | 407 | 00047_update7      | Tue Feb 17 00:00:00 1970 PST | Tue Feb 17 00:00:00 1970 | 7  | 7          | foo
   57 | 407 | 00057_update7      | Fri Feb 27 00:00:00 1970 PST | Fri Feb 27 00:00:00 1970 | 7  | 7          | foo
   67 | 407 | 00067_update7      | Mon Mar 09 00:00:00 1970 PST | Mon Mar 09 00:00:00 1970 | 7  | 7          | foo
   77 | 407 | 00077_update7      | Thu Mar 19 00:00:00 1970 PST | Thu Mar 19 00:00:00 1970 | 7  | 7          | foo
   87 | 407 | 00087_update7      | Sun Mar 29 00:00:00 1970 PST | Sun Mar 29 00:00:00 1970 | 7  | 7          | foo
   97 | 407 | 00097_update7      | Wed Apr 08 00:00:00 1970 PST | Wed Apr 08 00:00:00 1970 | 7  | 7          | foo
  107 | 407 | 00107_update7      | Thu Jan 08 00:00:00 1970 PST | Thu Jan 08 00:00:00 1970 | 7  | 7          | foo
  117 | 407 | 00117_update7      | Sun Jan 18 00:00:00 1970 PST | Sun Jan 18 00:00:00 1970 | 7  | 7          | foo
  127 | 407 | 00127_update7      | Wed Jan 28 00:00:00 1970 PST | Wed Jan 28 00:00:00 1970 | 7  | 7          | foo
  137 | 407 | 00137_update7      | Sat Feb 07 00:00:00 1970 PST | Sat Feb 07 00:00:00 1970 | 7  | 7          | foo
  147 | 407 | 00147_update7      | Tue Feb 17 00:00:00 1970 PST | Tue Feb 17 00:00:00 1970 | 7  | 7          | foo
  157 | 407 | 00157_update7      | Fri Feb 27 00:00:00 1970 PST | Fri Feb 27 00:00:00 1970 | 7  | 7          | foo
  167 | 407 | 00167_update7      | Mon Mar 09 00:00:00 1970 PST | Mon Mar 09 00:00:00 1970 | 7  | 7          | foo
  177 | 407 | 00177_update7      | Thu Mar 19 00:00:00 1970 PST | Thu Mar 19 00:00:00 1970 | 7  | 7          | foo
  187 | 407 | 00187_update7      | Sun Mar 29 00:00:00 1970 PST | Sun Mar 29 00:00:00 1970 | 7  | 7          | foo
  197 | 407 | 00197_update7      | Wed Apr 08 00:00:00 1970 PST | Wed Apr 08 00:00:00 1970 | 7  | 7          | foo
  207 | 407 | 00207_update7      | Thu Jan 08 00:00:00 1970 PST | Thu Jan 08 00:00:00 1970 | 7  | 7          | foo
  217 | 407 | 00217_update7      | Sun Jan 18 00:00:00 1970 PST | Sun Jan 18 00:00:00 1970 | 7  | 7          | foo
  227 | 407 | 00227_update7      | Wed Jan 28 00:00:00 1970 PST | Wed Jan 28 00:00:00 1970 | 7  | 7          | foo
  237 | 407 | 00237_update7      | Sat Feb 07 00:00:00 1970 PST | Sat Feb 07 00:00:00 1970 | 7  | 7          | foo
  247 | 407 | 00247_update7      | Tue Feb 17 00:00:00 1970 PST | Tue Feb 17 00:00:00 1970 | 7  | 7          | foo
  257 | 407 | 00257_update7      | Fri Feb 27 00:00:00 1970 PST | Fri Feb 27 00:00:00 1970 | 7  | 7          | foo
  267 | 407 | 00267_update7      | Mon Mar 09 00:00:00 1970 PST | Mon Mar 09 00:00:00 1970 | 7  | 7          | foo
  277 | 407 | 00277_update7      | Thu Mar 19 00:00:00 1970 PST | Thu Mar 19 00:00:00 1970 | 7  | 7          | foo
  287 | 407 | 00287_update7      | Sun Mar 29 00:00:00 1970 PST | Sun Mar 29 00:00:00 1970 | 7  | 7          | foo
  297 | 407 | 00297_update7      | Wed Apr 08 00:00:00 1970 PST | Wed Apr 08 00:00:00 1970 | 7  | 7          | foo
  307 | 407 | 00307_update7      | Thu Jan 08 00:00:00 1970 PST | Thu Jan 08 00:00:00 1970 | 7  | 7          | foo
  317 | 407 | 00317_update7      | Sun Jan 18 00:00:00 1970 PST | Sun Jan 18 00:00:00 1970 | 7  | 7          | foo
  327 | 407 | 00327_update7      | Wed Jan 28 00:00:00 1970 PST | Wed Jan 28 00:00:00 1970 | 7  | 7          | foo
  337 | 407 | 00337_update7      | Sat Feb 07 00:00:00 1970 PST | Sat Feb 07 00:00:00 1970 | 7  | 7          | foo
  347 | 407 | 00347_update7      | Tue Feb 17 00:00:00 1970 PST | Tue Feb 17 00:00:00 1970 | 7  | 7          | foo
  357 | 407 | 00357_update7      | Fri Feb 27 00:00:00 1970 PST | Fri Feb 27 00:00:00 1970 | 7  | 7          | foo
  367 | 407 | 00367_update7      | Mon Mar 09 00:00:00 1970 PST | Mon Mar 09 00:00:00 1970 | 7  | 7          | foo
  377 | 407 | 00377_update7      | Thu Mar 19 00:00:00 1970 PST | Thu Mar 19 00:00:00 1970 | 7  | 7          | foo
  387 | 407 | 00387_update7      | Sun Mar 29 00:00:00 1970 PST | Sun Mar 29 00:00:00 1970 | 7  | 7          | foo
  397 | 407 | 00397_update7      | Wed Apr 08 00:00:00 1970 PST | Wed Apr 08 00:00:00 1970 | 7  | 7          | foo
  407 | 407 | 00407_update7      | Thu Jan 08 00:00:00 1970 PST | Thu Jan 08 00:00:00 1970 | 7  | 7          | foo
  417 | 407 | 00417_update7      | Sun Jan 18 00:00:00 1970 PST | Sun Jan 18 00:00:00 1970 | 7  | 7          | foo
  427 | 407 | 00427_update7      | Wed Jan 28 00:00:00 1970 PST | Wed Jan 28 00:00:00 1970 | 7  | 7          | foo
  437 | 407 | 00437_update7      | Sat Feb 07 00:00:00 1970 PST | Sat Feb 07 00:00:00 1970 | 7  | 7          | foo
  447 | 407 | 00447_update7      | Tue Feb 17 00:00:00 1970 PST | Tue Feb 17 00:00:00 1970 | 7  | 7          | foo
  457 | 407 | 00457_update7      | Fri Feb 27 00:00:00 1970 PST | Fri Feb 27 00:00:00 1970 | 7  | 7          | foo
  467 | 407 | 00467_update7      | Mon Mar 09 00:00:00 1970 PST | Mon Mar 09 00:00:00 1970 | 7  | 7          | foo
  477 | 407 | 00477_update7      | Thu Mar 19 00:00:00 1970 PST | Thu Mar 19 00:00:00 1970 | 7  | 7          | foo
  487 | 407 | 00487_update7      | Sun Mar 29 00:00:00 1970 PST | Sun Mar 29 00:00:00 1970 | 7  | 7          | foo
  497 | 407 | 00497_update7      | Wed Apr 08 00:00:00 1970 PST | Wed Apr 08 00:00:00 1970 | 7  | 7          | foo
  507 | 407 | 00507_update7      | Thu Jan 08 00:00:00 1970 PST | Thu Jan 08 00:00:00 1970 | 7  | 7          | foo
  517 | 407 | 00517_update7      | Sun Jan 18 00:00:00 1970 PST | Sun Jan 18 00:00:00 1970 | 7  | 7          | foo
  527 | 407 | 00527_update7      | Wed Jan 28 00:00:00 1970 PST | Wed Jan 28 00:00:00 1970 | 7  | 7          | foo
  537 | 407 | 00537_update7      | Sat Feb 07 00:00:00 1970 PST | Sat Feb 07 00:00:00 1970 | 7  | 7          | foo
  547 | 407 | 00547_update7      | Tue Feb 17 00:00:00 1970 PST | Tue Feb 17 00:00:00 1970 | 7  | 7          | foo
  557 | 407 | 00557_update7      | Fri Feb 27 00:00:00 1970 PST | Fri Feb 27 00:00:00 1970 | 7  | 7          | foo
  567 | 407 | 00567_update7      | Mon Mar 09 00:00:00 1970 PST | Mon Mar 09 00:00:00 1970 | 7  | 7          | foo
  577 | 407 | 00577_update7      | Thu Mar 19 00:00:00 1970 PST | Thu Mar 19 00:00:00 1970 | 7  | 7          | foo
  587 | 407 | 00587_update7      | Sun Mar 29 00:00:00 1970 PST | Sun Mar 29 00:00:00 1970 | 7  | 7          | foo
  597 | 407 | 00597_update7      | Wed Apr 08 00:00:00 1970 PST | Wed Apr 08 00:00:00 1970 | 7  | 7          | foo
  607 | 407 | 00607_update7      | Thu Jan 08 00:00:00 1970 PST | Thu Jan 08 00:00:00 1970 | 7  | 7          | foo
  617 | 407 | 00617_update7      | Sun Jan 18 00:00:00 1970 PST | Sun Jan 18 00:00:00 1970 | 7  | 7          | foo
  627 | 407 | 00627_update7      | Wed Jan 28 00:00:00 1970 PST | Wed Jan 28 00:00:00 1970 | 7  | 7          | foo
  637 | 407 | 00637_update7      | Sat Feb 07 00:00:00 1970 PST | Sat Feb 07 00:00:00 1970 | 7  | 7          | foo
  647 | 407 | 00647_update7      | Tue Feb 17 00:00:00 1970 PST | Tue Feb 17 00:00:00 1970 | 7  | 7          | foo
  657 | 407 | 00657_update7      | Fri Feb 27 00:00:00 1970 PST | Fri Feb 27 00:00:00 1970 | 7  | 7          | foo
  667 | 407 | 00667_update7      | Mon Mar 09 00:00:00 1970 PST | Mon Mar 09 00:00:00 1970 | 7  | 7          | foo
  677 | 407 | 00677_update7      | Thu Mar 19 00:00:00 1970 PST | Thu Mar 19 00:00:00 1970 | 7  | 7          | foo
  687 | 407 | 00687_update7      | Sun Mar 29 00:00:00 1970 PST | Sun Mar 29 00:00:00 1970 | 7  | 7          | foo
  697 | 407 | 00697_update7      | Wed Apr 08 00:00:00 1970 PST | Wed Apr 08 00:00:00 1970 | 7  | 7          | foo
  707 | 407 | 00707_update7      | Thu Jan 08 00:00:00 1970 PST | Thu Jan 08 00:00:00 1970 | 7  | 7          | foo
  717 | 407 | 00717_update7      | Sun Jan 18 00:00:00 1970 PST | Sun Jan 18 00:00:00 1970 | 7  | 7          | foo
  727 | 407 | 00727_update7      | Wed Jan 28 00:00:00 1970 PST | Wed Jan 28 00:00:00 1970 | 7  | 7          | foo
  737 | 407 | 00737_update7      | Sat Feb 07 00:00:00 1970 PST | Sat Feb 07 00:00:00 1970 | 7  | 7          | foo
  747 | 407 | 00747_update7      | Tue Feb 17 00:00:00 1970 PST | Tue Feb 17 00:00:00 1970 | 7  | 7          | foo
  757 | 407 | 00757_update7      | Fri Feb 27 00:00:00 1970 PST | Fri Feb 27 00:00:00 1970 | 7  | 7          | foo
  767 | 407 | 00767_update7      | Mon Mar 09 00:00:00 1970 PST | Mon Mar 09 00:00:00 1970 | 7  | 7          | foo
  777 | 407 | 00777_update7      | Thu Mar 19 00:00:00 1970 PST | Thu Mar 19 00:00:00 1970 | 7  | 7          | foo
  787 | 407 | 00787_update7      | Sun Mar 29 00:00:00 1970 PST | Sun Mar 29 00:00:00 1970 | 7  | 7          | foo
  797 | 407 | 00797_update7      | Wed Apr 08 00:00:00 1970 PST | Wed Apr 08 00:00:00 1970 | 7  | 7          | foo
  807 | 407 | 00807_update7      | Thu Jan 08 00:00:00 1970 PST | Thu Jan 08 00:00:00 1970 | 7  | 7          | foo
  817 | 407 | 00817_update7      | Sun Jan 18 00:00:00 1970 PST | Sun Jan 18 00:00:00 1970 | 7  | 7          | foo
  827 | 407 | 00827_update7      | Wed Jan 28 00:00:00 1970 PST | Wed Jan 28 00:00:00 1970 | 7  | 7          | foo
  837 | 407 | 00837_update7      | Sat Feb 07 00:00:00 1970 PST | Sat Feb 07 00:00:00 1970 | 7  | 7          | foo
  847 | 407 | 00847_update7      | Tue Feb 17 00:00:00 1970 PST | Tue Feb 17 00:00:00 1970 | 7  | 7          | foo
  857 | 407 | 00857_update7      | Fri Feb 27 00:00:00 1970 PST | Fri Feb 27 00:00:00 1970 | 7  | 7          | foo
  867 | 407 | 00867_update7      | Mon Mar 09 00:00:00 1970 PST | Mon Mar 09 00:00:00 1970 | 7  | 7          | foo
  877 | 407 | 00877_update7      | Thu Mar 19 00:00:00 1970 PST | Thu Mar 19 00:00:00 1970 | 7  | 7          | foo
  887 | 407 | 00887_update7      | Sun Mar 29 00:00:00 1970 PST | Sun Mar 29 00:00:00 1970 | 7  | 7          | foo
  897 | 407 | 00897_update7      | Wed Apr 08 00:00:00 1970 PST | Wed Apr 08 00:00:00 1970 | 7  | 7          | foo
  907 | 407 | 00907_update7      | Thu Jan 08 00:00:00 1970 PST | Thu Jan 08 00:00:00 1970 | 7  | 7          | foo
  917 | 407 | 00917_update7      | Sun Jan 18 00:00:00 1970 PST | Sun Jan 18 00:00:00 1970 | 7  | 7          | foo
  927 | 407 | 00927_update7      | Wed Jan 28 00:00:00 1970 PST | Wed Jan 28 00:00:00 1970 | 7  | 7          | foo
  937 | 407 | 00937_update7      | Sat Feb 07 00:00:00 1970 PST | Sat Feb 07 00:00:00 1970 | 7  | 7          | foo
  947 | 407 | 00947_update7      | Tue Feb 17 00:00:00 1970 PST | Tue Feb 17 00:00:00 1970 | 7  | 7          | foo
  957 | 407 | 00957_update7      | Fri Feb 27 00:00:00 1970 PST | Fri Feb 27 00:00:00 1970 | 7  | 7          | foo
  967 | 407 | 00967_update7      | Mon Mar 09 00:00:00 1970 PST | Mon Mar 09 00:00:00 1970 | 7  | 7          | foo
  977 | 407 | 00977_update7      | Thu Mar 19 00:00:00 1970 PST | Thu Mar 19 00:00:00 1970 | 7  | 7          | foo
  987 | 407 | 00987_update7      | Sun Mar 29 00:00:00 1970 PST | Sun Mar 29 00:00:00 1970 | 7  | 7          | foo
  997 | 407 | 00997_update7      | Wed Apr 08 00:00:00 1970 PST | Wed Apr 08 00:00:00 1970 | 7  | 7          | foo
 1007 | 507 | 0000700007_update7 |                              |                          |    | ft2        | 
 1017 | 507 | 0001700017_update7 |                              |                          |    | ft2        | 
(102 rows)

-- EXPLAIN (verbose, costs off)
-- UPDATE ft2 SET c2 = ft2.c2 + 500, c3 = ft2.c3 || '_update9', c7 = DEFAULT
--   FROM ft1 WHERE ft1.c1 = ft2.c2 AND ft1.c1 % 10 = 9;                               -- can be pushed down
-- UPDATE ft2 SET c2 = ft2.c2 + 500, c3 = ft2.c3 || '_update9', c7 = DEFAULT
--   FROM ft1 WHERE ft1.c1 = ft2.c2 AND ft1.c1 % 10 = 9;
UPDATE ft2__postgres_srv__0 SET c2 = ft2__postgres_srv__0.c2 + 500, c3 = ft2__postgres_srv__0.c3 || '_update9', c7 = DEFAULT
  FROM ft1 WHERE ft1.c1 = ft2__postgres_srv__0.c2 AND ft1.c1 % 10 = 9;
-- EXPLAIN (verbose, costs off)
--   DELETE FROM ft2 WHERE c1 % 10 = 5 RETURNING c1, c4;                               -- can be pushed down
-- DELETE FROM ft2 WHERE c1 % 10 = 5 RETURNING c1, c4;
DELETE FROM ft2__postgres_srv__0 WHERE c1 % 10 = 5 RETURNING c1, c4;
  c1  |              c4              
------+------------------------------
    5 | Tue Jan 06 00:00:00 1970 PST
   15 | Fri Jan 16 00:00:00 1970 PST
   25 | Mon Jan 26 00:00:00 1970 PST
   35 | Thu Feb 05 00:00:00 1970 PST
   45 | Sun Feb 15 00:00:00 1970 PST
   55 | Wed Feb 25 00:00:00 1970 PST
   65 | Sat Mar 07 00:00:00 1970 PST
   75 | Tue Mar 17 00:00:00 1970 PST
   85 | Fri Mar 27 00:00:00 1970 PST
   95 | Mon Apr 06 00:00:00 1970 PST
  105 | Tue Jan 06 00:00:00 1970 PST
  115 | Fri Jan 16 00:00:00 1970 PST
  125 | Mon Jan 26 00:00:00 1970 PST
  135 | Thu Feb 05 00:00:00 1970 PST
  145 | Sun Feb 15 00:00:00 1970 PST
  155 | Wed Feb 25 00:00:00 1970 PST
  165 | Sat Mar 07 00:00:00 1970 PST
  175 | Tue Mar 17 00:00:00 1970 PST
  185 | Fri Mar 27 00:00:00 1970 PST
  195 | Mon Apr 06 00:00:00 1970 PST
  205 | Tue Jan 06 00:00:00 1970 PST
  215 | Fri Jan 16 00:00:00 1970 PST
  225 | Mon Jan 26 00:00:00 1970 PST
  235 | Thu Feb 05 00:00:00 1970 PST
  245 | Sun Feb 15 00:00:00 1970 PST
  255 | Wed Feb 25 00:00:00 1970 PST
  265 | Sat Mar 07 00:00:00 1970 PST
  275 | Tue Mar 17 00:00:00 1970 PST
  285 | Fri Mar 27 00:00:00 1970 PST
  295 | Mon Apr 06 00:00:00 1970 PST
  305 | Tue Jan 06 00:00:00 1970 PST
  315 | Fri Jan 16 00:00:00 1970 PST
  325 | Mon Jan 26 00:00:00 1970 PST
  335 | Thu Feb 05 00:00:00 1970 PST
  345 | Sun Feb 15 00:00:00 1970 PST
  355 | Wed Feb 25 00:00:00 1970 PST
  365 | Sat Mar 07 00:00:00 1970 PST
  375 | Tue Mar 17 00:00:00 1970 PST
  385 | Fri Mar 27 00:00:00 1970 PST
  395 | Mon Apr 06 00:00:00 1970 PST
  405 | Tue Jan 06 00:00:00 1970 PST
  415 | Fri Jan 16 00:00:00 1970 PST
  425 | Mon Jan 26 00:00:00 1970 PST
  435 | Thu Feb 05 00:00:00 1970 PST
  445 | Sun Feb 15 00:00:00 1970 PST
  455 | Wed Feb 25 00:00:00 1970 PST
  465 | Sat Mar 07 00:00:00 1970 PST
  475 | Tue Mar 17 00:00:00 1970 PST
  485 | Fri Mar 27 00:00:00 1970 PST
  495 | Mon Apr 06 00:00:00 1970 PST
  505 | Tue Jan 06 00:00:00 1970 PST
  515 | Fri Jan 16 00:00:00 1970 PST
  525 | Mon Jan 26 00:00:00 1970 PST
  535 | Thu Feb 05 00:00:00 1970 PST
  545 | Sun Feb 15 00:00:00 1970 PST
  555 | Wed Feb 25 00:00:00 1970 PST
  565 | Sat Mar 07 00:00:00 1970 PST
  575 | Tue Mar 17 00:00:00 1970 PST
  585 | Fri Mar 27 00:00:00 1970 PST
  595 | Mon Apr 06 00:00:00 1970 PST
  605 | Tue Jan 06 00:00:00 1970 PST
  615 | Fri Jan 16 00:00:00 1970 PST
  625 | Mon Jan 26 00:00:00 1970 PST
  635 | Thu Feb 05 00:00:00 1970 PST
  645 | Sun Feb 15 00:00:00 1970 PST
  655 | Wed Feb 25 00:00:00 1970 PST
  665 | Sat Mar 07 00:00:00 1970 PST
  675 | Tue Mar 17 00:00:00 1970 PST
  685 | Fri Mar 27 00:00:00 1970 PST
  695 | Mon Apr 06 00:00:00 1970 PST
  705 | Tue Jan 06 00:00:00 1970 PST
  715 | Fri Jan 16 00:00:00 1970 PST
  725 | Mon Jan 26 00:00:00 1970 PST
  735 | Thu Feb 05 00:00:00 1970 PST
  745 | Sun Feb 15 00:00:00 1970 PST
  755 | Wed Feb 25 00:00:00 1970 PST
  765 | Sat Mar 07 00:00:00 1970 PST
  775 | Tue Mar 17 00:00:00 1970 PST
  785 | Fri Mar 27 00:00:00 1970 PST
  795 | Mon Apr 06 00:00:00 1970 PST
  805 | Tue Jan 06 00:00:00 1970 PST
  815 | Fri Jan 16 00:00:00 1970 PST
  825 | Mon Jan 26 00:00:00 1970 PST
  835 | Thu Feb 05 00:00:00 1970 PST
  845 | Sun Feb 15 00:00:00 1970 PST
  855 | Wed Feb 25 00:00:00 1970 PST
  865 | Sat Mar 07 00:00:00 1970 PST
  875 | Tue Mar 17 00:00:00 1970 PST
  885 | Fri Mar 27 00:00:00 1970 PST
  895 | Mon Apr 06 00:00:00 1970 PST
  905 | Tue Jan 06 00:00:00 1970 PST
  915 | Fri Jan 16 00:00:00 1970 PST
  925 | Mon Jan 26 00:00:00 1970 PST
  935 | Thu Feb 05 00:00:00 1970 PST
  945 | Sun Feb 15 00:00:00 1970 PST
  955 | Wed Feb 25 00:00:00 1970 PST
  965 | Sat Mar 07 00:00:00 1970 PST
  975 | Tue Mar 17 00:00:00 1970 PST
  985 | Fri Mar 27 00:00:00 1970 PST
  995 | Mon Apr 06 00:00:00 1970 PST
 1005 | 
 1015 | 
 1105 | 
(103 rows)

-- EXPLAIN (verbose, costs off)
-- DELETE FROM ft2 USING ft1 WHERE ft1.c1 = ft2.c2 AND ft1.c1 % 10 = 2;                -- can be pushed down
-- DELETE FROM ft2 USING ft1 WHERE ft1.c1 = ft2.c2 AND ft1.c1 % 10 = 2;
DELETE FROM ft2__postgres_srv__0 USING ft1 WHERE ft1.c1 = ft2__postgres_srv__0.c2 AND ft1.c1 % 10 = 2;
-- SELECT c1,c2,c3,c4 FROM ft2 ORDER BY c1;
-- EXPLAIN (verbose, costs off)
-- INSERT INTO ft2 (c1,c2,c3) VALUES (1200,999,'foo') RETURNING tableoid::regclass;
-- INSERT INTO ft2 (c1,c2,c3) VALUES (1200,999,'foo') RETURNING tableoid::regclass;
INSERT INTO ft2__postgres_srv__0 (c1,c2,c3) VALUES (1200,999,'foo') RETURNING tableoid::regclass;
       tableoid       
----------------------
 ft2__postgres_srv__0
(1 row)

-- EXPLAIN (verbose, costs off)
-- UPDATE ft2 SET c3 = 'bar' WHERE c1 = 1200 RETURNING tableoid::regclass;             -- can be pushed down
-- UPDATE ft2 SET c3 = 'bar' WHERE c1 = 1200 RETURNING tableoid::regclass;
UPDATE ft2__postgres_srv__0 SET c3 = 'bar' WHERE c1 = 1200 RETURNING tableoid::regclass;
       tableoid       
----------------------
 ft2__postgres_srv__0
(1 row)

-- EXPLAIN (verbose, costs off)
-- DELETE FROM ft2 WHERE c1 = 1200 RETURNING tableoid::regclass;                       -- can be pushed down
-- DELETE FROM ft2 WHERE c1 = 1200 RETURNING tableoid::regclass;
DELETE FROM ft2__postgres_srv__0 WHERE c1 = 1200 RETURNING tableoid::regclass;
       tableoid       
----------------------
 ft2__postgres_srv__0
(1 row)

-- Test UPDATE/DELETE with RETURNING on a three-table join
-- INSERT INTO ft2 (c1,c2,c3)
--   SELECT id, id - 1200, to_char(id, 'FM00000') FROM generate_series(1201, 1300) id;
INSERT INTO ft2__postgres_srv__0 (c1,c2,c3)
  SELECT id, id - 1200, to_char(id, 'FM00000') FROM generate_series(1201, 1300) id;
-- EXPLAIN (verbose, costs off)
-- UPDATE ft2 SET c3 = 'foo'
--   FROM ft4 INNER JOIN ft5 ON (ft4.c1 = ft5.c1)
--   WHERE ft2.c1 > 1200 AND ft2.c2 = ft4.c1
--   RETURNING ft2, ft2.*, ft4, ft4.*;       -- can be pushed down
-- UPDATE ft2 SET c3 = 'foo'
--   FROM ft4 INNER JOIN ft5 ON (ft4.c1 = ft5.c1)
--   WHERE ft2.c1 > 1200 AND ft2.c2 = ft4.c1
--   RETURNING ft2, ft2.*, ft4, ft4.*;
UPDATE ft2__postgres_srv__0 SET c3 = 'foo'
  FROM ft4 INNER JOIN ft5 ON (ft4.c1 = ft5.c1)
  WHERE ft2__postgres_srv__0.c1 > 1200 AND ft2__postgres_srv__0.c2 = ft4.c1
  RETURNING ft2__postgres_srv__0, ft2__postgres_srv__0.*, ft4, ft4.*;
      ft2__postgres_srv__0      |  c1  | c2 | c3  | c4 | c5 | c6 |     c7     | c8 |              ft4              | c1 | c2 |   c3   |   __spd_url    
--------------------------------+------+----+-----+----+----+----+------------+----+-------------------------------+----+----+--------+----------------
 (1206,6,foo,,,,"ft2       ",)  | 1206 |  6 | foo |    |    |    | ft2        |    | (6,7,AAA006,/postgres_srv/)   |  6 |  7 | AAA006 | /postgres_srv/
 (1212,12,foo,,,,"ft2       ",) | 1212 | 12 | foo |    |    |    | ft2        |    | (12,13,AAA012,/postgres_srv/) | 12 | 13 | AAA012 | /postgres_srv/
 (1218,18,foo,,,,"ft2       ",) | 1218 | 18 | foo |    |    |    | ft2        |    | (18,19,AAA018,/postgres_srv/) | 18 | 19 | AAA018 | /postgres_srv/
 (1224,24,foo,,,,"ft2       ",) | 1224 | 24 | foo |    |    |    | ft2        |    | (24,25,AAA024,/postgres_srv/) | 24 | 25 | AAA024 | /postgres_srv/
 (1230,30,foo,,,,"ft2       ",) | 1230 | 30 | foo |    |    |    | ft2        |    | (30,31,AAA030,/postgres_srv/) | 30 | 31 | AAA030 | /postgres_srv/
 (1236,36,foo,,,,"ft2       ",) | 1236 | 36 | foo |    |    |    | ft2        |    | (36,37,AAA036,/postgres_srv/) | 36 | 37 | AAA036 | /postgres_srv/
 (1242,42,foo,,,,"ft2       ",) | 1242 | 42 | foo |    |    |    | ft2        |    | (42,43,AAA042,/postgres_srv/) | 42 | 43 | AAA042 | /postgres_srv/
 (1248,48,foo,,,,"ft2       ",) | 1248 | 48 | foo |    |    |    | ft2        |    | (48,49,AAA048,/postgres_srv/) | 48 | 49 | AAA048 | /postgres_srv/
 (1254,54,foo,,,,"ft2       ",) | 1254 | 54 | foo |    |    |    | ft2        |    | (54,55,AAA054,/postgres_srv/) | 54 | 55 | AAA054 | /postgres_srv/
 (1260,60,foo,,,,"ft2       ",) | 1260 | 60 | foo |    |    |    | ft2        |    | (60,61,AAA060,/postgres_srv/) | 60 | 61 | AAA060 | /postgres_srv/
 (1266,66,foo,,,,"ft2       ",) | 1266 | 66 | foo |    |    |    | ft2        |    | (66,67,AAA066,/postgres_srv/) | 66 | 67 | AAA066 | /postgres_srv/
 (1272,72,foo,,,,"ft2       ",) | 1272 | 72 | foo |    |    |    | ft2        |    | (72,73,AAA072,/postgres_srv/) | 72 | 73 | AAA072 | /postgres_srv/
 (1278,78,foo,,,,"ft2       ",) | 1278 | 78 | foo |    |    |    | ft2        |    | (78,79,AAA078,/postgres_srv/) | 78 | 79 | AAA078 | /postgres_srv/
 (1284,84,foo,,,,"ft2       ",) | 1284 | 84 | foo |    |    |    | ft2        |    | (84,85,AAA084,/postgres_srv/) | 84 | 85 | AAA084 | /postgres_srv/
 (1290,90,foo,,,,"ft2       ",) | 1290 | 90 | foo |    |    |    | ft2        |    | (90,91,AAA090,/postgres_srv/) | 90 | 91 | AAA090 | /postgres_srv/
 (1296,96,foo,,,,"ft2       ",) | 1296 | 96 | foo |    |    |    | ft2        |    | (96,97,AAA096,/postgres_srv/) | 96 | 97 | AAA096 | /postgres_srv/
(16 rows)

-- EXPLAIN (verbose, costs off)
-- DELETE FROM ft2
--   USING ft4 LEFT JOIN ft5 ON (ft4.c1 = ft5.c1)
--   WHERE ft2.c1 > 1200 AND ft2.c1 % 10 = 0 AND ft2.c2 = ft4.c1
--   RETURNING 100;                          -- can be pushed down
-- DELETE FROM ft2
--   USING ft4 LEFT JOIN ft5 ON (ft4.c1 = ft5.c1)
--   WHERE ft2.c1 > 1200 AND ft2.c1 % 10 = 0 AND ft2.c2 = ft4.c1
--   RETURNING 100;
DELETE FROM ft2__postgres_srv__0
  USING ft4 LEFT JOIN ft5 ON (ft4.c1 = ft5.c1)
  WHERE ft2__postgres_srv__0.c1 > 1200 AND ft2__postgres_srv__0.c1 % 10 = 0 AND ft2__postgres_srv__0.c2 = ft4.c1
  RETURNING 100;
 ?column? 
----------
      100
      100
      100
      100
      100
      100
      100
      100
      100
      100
(10 rows)

-- DELETE FROM ft2 WHERE ft2.c1 > 1200;
DELETE FROM ft2__postgres_srv__0 WHERE ft2__postgres_srv__0.c1 > 1200;
-- Test UPDATE/DELETE with WHERE or JOIN/ON conditions containing
-- user-defined operators/functions
ALTER SERVER postgres_srv OPTIONS (DROP extensions);
-- INSERT INTO ft2 (c1,c2,c3)
--   SELECT id, id % 10, to_char(id, 'FM00000') FROM generate_series(2001, 2010) id;
INSERT INTO ft2__postgres_srv__0 (c1,c2,c3)
  SELECT id, id % 10, to_char(id, 'FM00000') FROM generate_series(2001, 2010) id;
-- EXPLAIN (verbose, costs off)
-- UPDATE ft2 SET c3 = 'bar' WHERE postgres_fdw_abs(c1) > 2000 RETURNING *;            -- can't be pushed down
-- UPDATE ft2 SET c3 = 'bar' WHERE postgres_fdw_abs(c1) > 2000 RETURNING *;
UPDATE ft2__postgres_srv__0 SET c3 = 'bar' WHERE postgres_fdw_abs(c1) > 2000 RETURNING *;
  c1  | c2 | c3  | c4 | c5 | c6 |     c7     | c8 
------+----+-----+----+----+----+------------+----
 2001 |  1 | bar |    |    |    | ft2        | 
 2002 |  2 | bar |    |    |    | ft2        | 
 2003 |  3 | bar |    |    |    | ft2        | 
 2004 |  4 | bar |    |    |    | ft2        | 
 2005 |  5 | bar |    |    |    | ft2        | 
 2006 |  6 | bar |    |    |    | ft2        | 
 2007 |  7 | bar |    |    |    | ft2        | 
 2008 |  8 | bar |    |    |    | ft2        | 
 2009 |  9 | bar |    |    |    | ft2        | 
 2010 |  0 | bar |    |    |    | ft2        | 
(10 rows)

-- EXPLAIN (verbose, costs off)
-- UPDATE ft2 SET c3 = 'baz'
--   FROM ft4 INNER JOIN ft5 ON (ft4.c1 = ft5.c1)
--   WHERE ft2.c1 > 2000 AND ft2.c2 === ft4.c1
--   RETURNING ft2.*, ft4.*, ft5.*;                                                    -- can't be pushed down
-- UPDATE ft2 SET c3 = 'baz'
--   FROM ft4 INNER JOIN ft5 ON (ft4.c1 = ft5.c1)
--   WHERE ft2.c1 > 2000 AND ft2.c2 === ft4.c1
--   RETURNING ft2.*, ft4.*, ft5.*;
UPDATE ft2__postgres_srv__0 SET c3 = 'baz'
  FROM ft4 INNER JOIN ft5 ON (ft4.c1 = ft5.c1)
  WHERE ft2__postgres_srv__0.c1 > 2000 AND ft2__postgres_srv__0.c2 === ft4.c1
  RETURNING ft2__postgres_srv__0.*, ft4.*, ft5.*;
  c1  | c2 | c3  | c4 | c5 | c6 |     c7     | c8 | c1 | c2 |   c3   |   __spd_url    | c1 | c2 |   c3   |   __spd_url    
------+----+-----+----+----+----+------------+----+----+----+--------+----------------+----+----+--------+----------------
 2006 |  6 | baz |    |    |    | ft2        |    |  6 |  7 | AAA006 | /postgres_srv/ |  6 |  7 | AAA006 | /postgres_srv/
(1 row)

-- EXPLAIN (verbose, costs off)
-- DELETE FROM ft2
--   USING ft4 INNER JOIN ft5 ON (ft4.c1 === ft5.c1)
--   WHERE ft2.c1 > 2000 AND ft2.c2 = ft4.c1
--   RETURNING ft2.c1, ft2.c2, ft2.c3;       -- can't be pushed down
-- DELETE FROM ft2
--   USING ft4 INNER JOIN ft5 ON (ft4.c1 === ft5.c1)
--   WHERE ft2.c1 > 2000 AND ft2.c2 = ft4.c1
--   RETURNING ft2.c1, ft2.c2, ft2.c3;
DELETE FROM ft2__postgres_srv__0
  USING ft4 INNER JOIN ft5 ON (ft4.c1 === ft5.c1)
  WHERE ft2__postgres_srv__0.c1 > 2000 AND ft2__postgres_srv__0.c2 = ft4.c1
  RETURNING ft2__postgres_srv__0.c1, ft2__postgres_srv__0.c2, ft2__postgres_srv__0.c3;
  c1  | c2 | c3  
------+----+-----
 2006 |  6 | baz
(1 row)

-- DELETE FROM ft2 WHERE ft2.c1 > 2000;
DELETE FROM ft2__postgres_srv__0 WHERE ft2__postgres_srv__0.c1 > 2000;
ALTER SERVER postgres_srv OPTIONS (ADD extensions 'postgres_fdw');
-- Test that trigger on remote table works as expected
CREATE OR REPLACE FUNCTION "S 1".F_BRTRIG() RETURNS trigger AS $$
BEGIN
    NEW.c3 = NEW.c3 || '_trig_update';
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;
CREATE TRIGGER t1_br_insert BEFORE INSERT OR UPDATE
    ON "S 1"."T 1" FOR EACH ROW EXECUTE PROCEDURE "S 1".F_BRTRIG();
-- INSERT INTO ft2 (c1,c2,c3) VALUES (1208, 818, 'fff') RETURNING *;
-- INSERT INTO ft2 (c1,c2,c3,c6) VALUES (1218, 818, 'ggg', '(--;') RETURNING *;
-- UPDATE ft2 SET c2 = c2 + 600 WHERE c1 % 10 = 8 AND c1 < 1200 RETURNING *;
-- Test errors thrown on remote side during update
ALTER TABLE "S 1"."T 1" ADD CONSTRAINT c2positive CHECK (c2 >= 0);
-- INSERT INTO ft1(c1, c2) VALUES(11, 12);  -- duplicate key
-- INSERT INTO ft1(c1, c2) VALUES(11, 12) ON CONFLICT DO NOTHING; -- works
-- INSERT INTO ft1(c1, c2) VALUES(11, 12) ON CONFLICT (c1, c2) DO NOTHING; -- unsupported
-- INSERT INTO ft1(c1, c2) VALUES(11, 12) ON CONFLICT (c1, c2) DO UPDATE SET c3 = 'ffg'; -- unsupported
-- INSERT INTO ft1(c1, c2) VALUES(1111, -2);  -- c2positive
-- UPDATE ft1 SET c2 = -c2 WHERE c1 = 1;  -- c2positive
-- Test savepoint/rollback behavior
-- select c2, count(*) from ft2 where c2 < 500 group by 1 order by 1;
-- select c2, count(*) from "S 1"."T 1" where c2 < 500 group by 1 order by 1;
-- begin;
-- update ft2 set c2 = 42 where c2 = 0;
-- select c2, count(*) from ft2 where c2 < 500 group by 1 order by 1;
-- savepoint s1;
-- update ft2 set c2 = 44 where c2 = 4;
-- select c2, count(*) from ft2 where c2 < 500 group by 1 order by 1;
-- release savepoint s1;
-- select c2, count(*) from ft2 where c2 < 500 group by 1 order by 1;
-- savepoint s2;
-- update ft2 set c2 = 46 where c2 = 6;
-- select c2, count(*) from ft2 where c2 < 500 group by 1 order by 1;
-- rollback to savepoint s2;
-- select c2, count(*) from ft2 where c2 < 500 group by 1 order by 1;
-- release savepoint s2;
-- select c2, count(*) from ft2 where c2 < 500 group by 1 order by 1;
-- savepoint s3;
-- update ft2 set c2 = -2 where c2 = 42 and c1 = 10; -- fail on remote side
-- rollback to savepoint s3;
-- select c2, count(*) from ft2 where c2 < 500 group by 1 order by 1;
-- release savepoint s3;
-- select c2, count(*) from ft2 where c2 < 500 group by 1 order by 1;
-- none of the above is committed yet remotely
-- select c2, count(*) from "S 1"."T 1" where c2 < 500 group by 1 order by 1;
-- commit;
-- select c2, count(*) from ft2 where c2 < 500 group by 1 order by 1;
-- select c2, count(*) from "S 1"."T 1" where c2 < 500 group by 1 order by 1;
VACUUM ANALYZE "S 1"."T 1";
WARNING:  skipping "T 1" --- cannot vacuum non-tables or special system tables
-- Above DMLs add data with c6 as NULL in ft1, so test ORDER BY NULLS LAST and NULLs
-- FIRST behavior here.
-- ORDER BY DESC NULLS LAST options
-- EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 ORDER BY c6 DESC NULLS LAST, c1 OFFSET 795 LIMIT 10;
-- SELECT * FROM ft1 ORDER BY c6 DESC NULLS LAST, c1 OFFSET 795  LIMIT 10;
-- ORDER BY DESC NULLS FIRST options
-- EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 ORDER BY c6 DESC NULLS FIRST, c1 OFFSET 15 LIMIT 10;
-- SELECT * FROM ft1 ORDER BY c6 DESC NULLS FIRST, c1 OFFSET 15 LIMIT 10;
-- ORDER BY ASC NULLS FIRST options
-- EXPLAIN (VERBOSE, COSTS OFF) SELECT * FROM ft1 ORDER BY c6 ASC NULLS FIRST, c1 OFFSET 15 LIMIT 10;
-- SELECT * FROM ft1 ORDER BY c6 ASC NULLS FIRST, c1 OFFSET 15 LIMIT 10;
-- ===================================================================
-- test check constraints
-- ===================================================================
-- Consistent check constraints provide consistent results
ALTER FOREIGN TABLE ft1 ADD CONSTRAINT ft1_c2positive CHECK (c2 >= 0);
EXPLAIN (VERBOSE, COSTS OFF) SELECT count(*) FROM ft1 WHERE c2 < 0;
                            QUERY PLAN                             
-------------------------------------------------------------------
 Foreign Scan
   Output: (count(*))
   Node: postgres_srv / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (public.ft1__postgres_srv__0)
     Remote SQL: SELECT count(*) FROM "S 1"."T 1" WHERE ((c2 < 0))
(6 rows)

SELECT count(*) FROM ft1 WHERE c2 < 0;
 count 
-------
     0
(1 row)

SET constraint_exclusion = 'on';
EXPLAIN (VERBOSE, COSTS OFF) SELECT count(*) FROM ft1 WHERE c2 < 0;
           QUERY PLAN           
--------------------------------
 Aggregate
   Output: count(*)
   ->  Result
         One-Time Filter: false
(4 rows)

SELECT count(*) FROM ft1 WHERE c2 < 0;
 count 
-------
     0
(1 row)

RESET constraint_exclusion;
-- check constraint is enforced on the remote side, not locally
-- INSERT INTO ft1(c1, c2) VALUES(1111, -2);  -- c2positive
-- UPDATE ft1 SET c2 = -c2 WHERE c1 = 1;  -- c2positive
ALTER FOREIGN TABLE ft1 DROP CONSTRAINT ft1_c2positive;
-- But inconsistent check constraints provide inconsistent results
ALTER FOREIGN TABLE ft1 ADD CONSTRAINT ft1_c2negative CHECK (c2 < 0);
EXPLAIN (VERBOSE, COSTS OFF) SELECT count(*) FROM ft1 WHERE c2 >= 0;
                             QUERY PLAN                             
--------------------------------------------------------------------
 Foreign Scan
   Output: (count(*))
   Node: postgres_srv / Status: Alive
     Agg push-down: yes
     Relations: Aggregate on (public.ft1__postgres_srv__0)
     Remote SQL: SELECT count(*) FROM "S 1"."T 1" WHERE ((c2 >= 0))
(6 rows)

-- SELECT count(*) FROM ft1 WHERE c2 >= 0;
SET constraint_exclusion = 'on';
EXPLAIN (VERBOSE, COSTS OFF) SELECT count(*) FROM ft1 WHERE c2 >= 0;
           QUERY PLAN           
--------------------------------
 Aggregate
   Output: count(*)
   ->  Result
         One-Time Filter: false
(4 rows)

SELECT count(*) FROM ft1 WHERE c2 >= 0;
 count 
-------
     0
(1 row)

RESET constraint_exclusion;
-- local check constraint is not actually enforced
-- INSERT INTO ft1(c1, c2) VALUES(1111, 2);
-- UPDATE ft1 SET c2 = c2 + 1 WHERE c1 = 1;
ALTER FOREIGN TABLE ft1 DROP CONSTRAINT ft1_c2negative;
-- ===================================================================
-- test WITH CHECK OPTION constraints
-- ===================================================================
CREATE FUNCTION row_before_insupd_trigfunc() RETURNS trigger AS $$BEGIN NEW.a := NEW.a + 10; RETURN NEW; END$$ LANGUAGE plpgsql;
---CREATE TABLE base_tbl (a int, b int);
---ALTER TABLE base_tbl SET (autovacuum_enabled = 'false');
---CREATE TRIGGER row_before_insupd_trigger BEFORE INSERT OR UPDATE ON base_tbl FOR EACH ROW EXECUTE PROCEDURE row_before_insupd_trigfunc();
CREATE FOREIGN TABLE foreign_tbl (a int, b int, __spd_url text)
  SERVER pgspider_srv;
CREATE FOREIGN TABLE foreign_tbl__postgres_srv__0 (a int, b int)
  SERVER postgres_srv OPTIONS(table_name 'base_tbl');
CREATE TRIGGER row_before_insupd_trigger BEFORE INSERT OR UPDATE ON foreign_tbl FOR EACH ROW EXECUTE PROCEDURE row_before_insupd_trigfunc();
CREATE VIEW rw_view AS SELECT * FROM foreign_tbl
  WHERE a < b WITH CHECK OPTION;
\d+ rw_view
                             View "public.rw_view"
  Column   |  Type   | Collation | Nullable | Default | Storage  | Description 
-----------+---------+-----------+----------+---------+----------+-------------
 a         | integer |           |          |         | plain    | 
 b         | integer |           |          |         | plain    | 
 __spd_url | text    |           |          |         | extended | 
View definition:
 SELECT foreign_tbl.a,
    foreign_tbl.b,
    foreign_tbl.__spd_url
   FROM foreign_tbl
  WHERE foreign_tbl.a < foreign_tbl.b;
Options: check_option=cascaded

--EXPLAIN (VERBOSE, COSTS OFF)
--INSERT INTO rw_view VALUES (0, 5);
--INSERT INTO rw_view VALUES (0, 5); -- should fail
--EXPLAIN (VERBOSE, COSTS OFF)
--INSERT INTO rw_view VALUES (0, 15);
--INSERT INTO rw_view VALUES (0, 15); -- ok
--SELECT * FROM foreign_tbl;
--EXPLAIN (VERBOSE, COSTS OFF)
--UPDATE rw_view SET b = b + 5;
--UPDATE rw_view SET b = b + 5; -- should fail
--EXPLAIN (VERBOSE, COSTS OFF)
--UPDATE rw_view SET b = b + 15;
--UPDATE rw_view SET b = b + 15; -- ok
--SELECT * FROM foreign_tbl;
DROP FOREIGN TABLE foreign_tbl CASCADE;
NOTICE:  drop cascades to view rw_view
DROP FOREIGN TABLE foreign_tbl__postgres_srv__0 CASCADE;
--DROP TRIGGER row_before_insupd_trigger ON base_tbl;
--DROP TABLE base_tbl;
-- test WCO for partitions
--CREATE TABLE child_tbl (a int, b int);
--ALTER TABLE child_tbl SET (autovacuum_enabled = 'false');
--CREATE TRIGGER row_before_insupd_trigger BEFORE INSERT OR UPDATE ON child_tbl FOR EACH ROW EXECUTE PROCEDURE row_before_insupd_trigfunc();
CREATE FOREIGN TABLE foreign_tbl (a int, b int, __spd_url text)
  SERVER pgspider_srv;
CREATE FOREIGN TABLE foreign_tbl__postgres_srv__0 (a int, b int)
  SERVER postgres_srv OPTIONS(table_name 'child_tbl');
CREATE TRIGGER row_before_insupd_trigger BEFORE INSERT OR UPDATE ON foreign_tbl FOR EACH ROW EXECUTE PROCEDURE row_before_insupd_trigfunc();
CREATE TABLE parent_tbl (a int, b int, __spd_url text) PARTITION BY RANGE(a);
ALTER TABLE parent_tbl ATTACH PARTITION foreign_tbl FOR VALUES FROM (0) TO (100);
CREATE VIEW rw_view AS SELECT * FROM parent_tbl
  WHERE a < b WITH CHECK OPTION;
\d+ rw_view
                             View "public.rw_view"
  Column   |  Type   | Collation | Nullable | Default | Storage  | Description 
-----------+---------+-----------+----------+---------+----------+-------------
 a         | integer |           |          |         | plain    | 
 b         | integer |           |          |         | plain    | 
 __spd_url | text    |           |          |         | extended | 
View definition:
 SELECT parent_tbl.a,
    parent_tbl.b,
    parent_tbl.__spd_url
   FROM parent_tbl
  WHERE parent_tbl.a < parent_tbl.b;
Options: check_option=cascaded

--EXPLAIN (VERBOSE, COSTS OFF)
--INSERT INTO rw_view VALUES (0, 5);
--INSERT INTO rw_view VALUES (0, 5); -- should fail
--EXPLAIN (VERBOSE, COSTS OFF)
--INSERT INTO rw_view VALUES (0, 15);
--INSERT INTO rw_view VALUES (0, 15); -- ok
--SELECT * FROM foreign_tbl;
--EXPLAIN (VERBOSE, COSTS OFF)
--UPDATE rw_view SET b = b + 5;
--UPDATE rw_view SET b = b + 5; -- should fail
--EXPLAIN (VERBOSE, COSTS OFF)
--UPDATE rw_view SET b = b + 15;
--UPDATE rw_view SET b = b + 15; -- ok
--SELECT * FROM foreign_tbl;
DROP FOREIGN TABLE foreign_tbl CASCADE;
DROP FOREIGN TABLE foreign_tbl__postgres_srv__0 CASCADE;
--DROP TRIGGER row_before_insupd_trigger ON child_tbl;
--DROP TABLE parent_tbl CASCADE;
DROP FUNCTION row_before_insupd_trigfunc;
-- ===================================================================
-- test serial columns (ie, sequence-based defaults)
-- ===================================================================
---create table loc1 (f1 serial, f2 text);
---alter table loc1 set (autovacuum_enabled = 'false');
create foreign table loc1 (f1 serial, f2 text, __spd_url text)
  server pgspider_srv;
create foreign table loc1__postgres_srv__0 (f1 serial, f2 text)
  server postgres_srv options(table_name 'loc1_1');
create foreign table rem1 (f1 serial, f2 text, __spd_url text)
  server pgspider_srv;
create foreign table rem1__postgres_srv__0 (f1 serial, f2 text)
  server postgres_srv options(table_name 'loc1_1');
select pg_catalog.setval('rem1__postgres_srv__0_f1_seq', 10, false);
 setval 
--------
     10
(1 row)

insert into loc1__postgres_srv__0(f2) values('hi');
insert into rem1__postgres_srv__0(f2) values('hi remote');
insert into loc1__postgres_srv__0(f2) values('bye');
insert into rem1__postgres_srv__0(f2) values('bye remote');
select * from loc1;
ERROR:  error SPIexecute can not find datasource
select * from loc1__postgres_srv__0;
 f1 |     f2     
----+------------
  1 | hi
 10 | hi remote
  2 | bye
 11 | bye remote
(4 rows)

select * from rem1;
ERROR:  error SPIexecute can not find datasource
select * from rem1__postgres_srv__0;
 f1 |     f2     
----+------------
  1 | hi
 10 | hi remote
  2 | bye
 11 | bye remote
(4 rows)

-- ===================================================================
-- test generated columns
-- ===================================================================
---create table gloc1 (a int, b int);
---alter table gloc1 set (autovacuum_enabled = 'false');
create foreign table grem1 (
  a int,
  b int generated always as (a * 2) stored,
  __spd_url text)
  server pgspider_srv;
create foreign table grem1__postgres_srv__0 (
  a int,
  b int generated always as (a * 2) stored)
  server postgres_srv options(table_name 'gloc1');
---insert into grem1 (a) values (1), (2);
---update grem1 set a = 22 where a = 2;
insert into grem1__postgres_srv__0 (a) values (1), (2);
update grem1__postgres_srv__0 set a = 22 where a = 2;
---select * from gloc1;
select * from grem1;
 a  | b  |   __spd_url    
----+----+----------------
  1 |  2 | /postgres_srv/
 22 | 44 | /postgres_srv/
(2 rows)

-- ===================================================================
-- test local triggers
-- ===================================================================
-- Trigger functions "borrowed" from triggers regress test.
CREATE FUNCTION trigger_func() RETURNS trigger LANGUAGE plpgsql AS $$
BEGIN
	RAISE NOTICE 'trigger_func(%) called: action = %, when = %, level = %',
		TG_ARGV[0], TG_OP, TG_WHEN, TG_LEVEL;
	RETURN NULL;
END;$$;
CREATE TRIGGER trig_stmt_before BEFORE DELETE OR INSERT OR UPDATE ON rem1
	FOR EACH STATEMENT EXECUTE PROCEDURE trigger_func();
CREATE TRIGGER trig_stmt_after AFTER DELETE OR INSERT OR UPDATE ON rem1
	FOR EACH STATEMENT EXECUTE PROCEDURE trigger_func();
CREATE OR REPLACE FUNCTION trigger_data()  RETURNS trigger
LANGUAGE plpgsql AS $$

declare
	oldnew text[];
	relid text;
    argstr text;
begin

	relid := TG_relid::regclass;
	argstr := '';
	for i in 0 .. TG_nargs - 1 loop
		if i > 0 then
			argstr := argstr || ', ';
		end if;
		argstr := argstr || TG_argv[i];
	end loop;

    RAISE NOTICE '%(%) % % % ON %',
		tg_name, argstr, TG_when, TG_level, TG_OP, relid;
    oldnew := '{}'::text[];
	if TG_OP != 'INSERT' then
		oldnew := array_append(oldnew, format('OLD: %s', OLD));
	end if;

	if TG_OP != 'DELETE' then
		oldnew := array_append(oldnew, format('NEW: %s', NEW));
	end if;

    RAISE NOTICE '%', array_to_string(oldnew, ',');

	if TG_OP = 'DELETE' then
		return OLD;
	else
		return NEW;
	end if;
end;
$$;
-- Test basic functionality
CREATE TRIGGER trig_row_before
BEFORE INSERT OR UPDATE OR DELETE ON rem1
FOR EACH ROW EXECUTE PROCEDURE trigger_data(23,'skidoo');
CREATE TRIGGER trig_row_after
AFTER INSERT OR UPDATE OR DELETE ON rem1
FOR EACH ROW EXECUTE PROCEDURE trigger_data(23,'skidoo');
delete from rem1__postgres_srv__0;
insert into rem1__postgres_srv__0 values(1,'insert');
update rem1__postgres_srv__0 set f2  = 'update' where f1 = 1;
update rem1__postgres_srv__0 set f2 = f2 || f2;
-- cleanup
DROP TRIGGER trig_row_before ON rem1;
DROP TRIGGER trig_row_after ON rem1;
DROP TRIGGER trig_stmt_before ON rem1;
DROP TRIGGER trig_stmt_after ON rem1;
DELETE from rem1__postgres_srv__0;
-- Test WHEN conditions
CREATE TRIGGER trig_row_before_insupd
BEFORE INSERT OR UPDATE ON rem1
FOR EACH ROW
WHEN (NEW.f2 like '%update%')
EXECUTE PROCEDURE trigger_data(23,'skidoo');
CREATE TRIGGER trig_row_after_insupd
AFTER INSERT OR UPDATE ON rem1
FOR EACH ROW
WHEN (NEW.f2 like '%update%')
EXECUTE PROCEDURE trigger_data(23,'skidoo');
-- Insert or update not matching: nothing happens
INSERT INTO rem1__postgres_srv__0 values(1, 'insert');
UPDATE rem1__postgres_srv__0 set f2 = 'test';
-- Insert or update matching: triggers are fired
INSERT INTO rem1__postgres_srv__0 values(2, 'update');
UPDATE rem1__postgres_srv__0 set f2 = 'update update' where f1 = '2';
CREATE TRIGGER trig_row_before_delete
BEFORE DELETE ON rem1
FOR EACH ROW
WHEN (OLD.f2 like '%update%')
EXECUTE PROCEDURE trigger_data(23,'skidoo');
CREATE TRIGGER trig_row_after_delete
AFTER DELETE ON rem1
FOR EACH ROW
WHEN (OLD.f2 like '%update%')
EXECUTE PROCEDURE trigger_data(23,'skidoo');
-- Trigger is fired for f1=2, not for f1=1
DELETE FROM rem1__postgres_srv__0;
-- cleanup
DROP TRIGGER trig_row_before_insupd ON rem1;
DROP TRIGGER trig_row_after_insupd ON rem1;
DROP TRIGGER trig_row_before_delete ON rem1;
DROP TRIGGER trig_row_after_delete ON rem1;
-- Test various RETURN statements in BEFORE triggers.
CREATE FUNCTION trig_row_before_insupdate() RETURNS TRIGGER AS $$
  BEGIN
    NEW.f2 := NEW.f2 || ' triggered !';
    RETURN NEW;
  END
$$ language plpgsql;
CREATE TRIGGER trig_row_before_insupd
BEFORE INSERT OR UPDATE ON rem1
FOR EACH ROW EXECUTE PROCEDURE trig_row_before_insupdate();
-- The new values should have 'triggered' appended
-- INSERT INTO rem1__postgres_srv__0 values(1, 'insert');
-- SELECT * from rem1;
-- INSERT INTO rem1__postgres_srv__0 values(2, 'insert') RETURNING f2;
-- SELECT * from rem1;
-- UPDATE rem1__postgres_srv__0 set f2 = '';
-- SELECT * from rem1;
-- UPDATE rem1__postgres_srv__0 set f2 = 'skidoo' RETURNING f2;
-- SELECT * from rem1;
-- EXPLAIN (verbose, costs off)
-- UPDATE rem1__postgres_srv__0 set f1 = 10;          -- all columns should be transmitted
-- UPDATE rem1__postgres_srv__0 set f1 = 10;
-- SELECT * from rem1;
-- DELETE FROM rem1__postgres_srv__0;
-- Add a second trigger, to check that the changes are propagated correctly
-- from trigger to trigger
CREATE TRIGGER trig_row_before_insupd2
BEFORE INSERT OR UPDATE ON rem1
FOR EACH ROW EXECUTE PROCEDURE trig_row_before_insupdate();
-- INSERT INTO rem1__postgres_srv__0 values(1, 'insert');
-- SELECT * from rem1;
-- INSERT INTO rem1__postgres_srv__0 values(2, 'insert') RETURNING f2;
-- SELECT * from rem1;
-- UPDATE rem1__postgres_srv__0 set f2 = '';
-- SELECT * from rem1;
-- UPDATE rem1__postgres_srv__0 set f2 = 'skidoo' RETURNING f2;
-- SELECT * from rem1;
DROP TRIGGER trig_row_before_insupd ON rem1;
DROP TRIGGER trig_row_before_insupd2 ON rem1;
-- DELETE from rem1__postgres_srv__0;
-- INSERT INTO rem1__postgres_srv__0 VALUES (1, 'test');
-- Test with a trigger returning NULL
CREATE FUNCTION trig_null() RETURNS TRIGGER AS $$
  BEGIN
    RETURN NULL;
  END
$$ language plpgsql;
CREATE TRIGGER trig_null
BEFORE INSERT OR UPDATE OR DELETE ON rem1
FOR EACH ROW EXECUTE PROCEDURE trig_null();
-- Nothing should have changed.
INSERT INTO rem1__postgres_srv__0 VALUES (2, 'test2');
-- SELECT * from rem1;
UPDATE rem1__postgres_srv__0 SET f2 = 'test2';
-- SELECT * from rem1;
DELETE from rem1__postgres_srv__0;
-- SELECT * from rem1;
DROP TRIGGER trig_null ON rem1;
DELETE from rem1__postgres_srv__0;
-- Test a combination of local and remote triggers
CREATE TRIGGER trig_row_before
BEFORE INSERT OR UPDATE OR DELETE ON rem1
FOR EACH ROW EXECUTE PROCEDURE trigger_data(23,'skidoo');
CREATE TRIGGER trig_row_after
AFTER INSERT OR UPDATE OR DELETE ON rem1
FOR EACH ROW EXECUTE PROCEDURE trigger_data(23,'skidoo');
CREATE TRIGGER trig_local_before BEFORE INSERT OR UPDATE ON rem1
FOR EACH ROW EXECUTE PROCEDURE trig_row_before_insupdate();
INSERT INTO rem1__postgres_srv__0(f2) VALUES ('test');
UPDATE rem1__postgres_srv__0 SET f2 = 'testo';
-- Test returning a system attribute
-- INSERT INTO rem1__postgres_srv__0(f2) VALUES ('test') RETURNING ctid;
-- cleanup
DROP TRIGGER trig_row_before ON rem1;
DROP TRIGGER trig_row_after ON rem1;
DROP TRIGGER trig_local_before ON rem1;
-- Test direct foreign table modification functionality
-- Test with statement-level triggers
CREATE TRIGGER trig_stmt_before
	BEFORE DELETE OR INSERT OR UPDATE ON rem1
	FOR EACH STATEMENT EXECUTE PROCEDURE trigger_func();
-- EXPLAIN (verbose, costs off)
-- UPDATE rem1__postgres_srv__0 set f2 = '';          -- can be pushed down
-- EXPLAIN (verbose, costs off)
-- DELETE FROM rem1__postgres_srv__0;                 -- can be pushed down
DROP TRIGGER trig_stmt_before ON rem1;
CREATE TRIGGER trig_stmt_after
	AFTER DELETE OR INSERT OR UPDATE ON rem1
	FOR EACH STATEMENT EXECUTE PROCEDURE trigger_func();
-- EXPLAIN (verbose, costs off)
-- UPDATE rem1__postgres_srv__0 set f2 = '';          -- can be pushed down
-- EXPLAIN (verbose, costs off)
-- DELETE FROM rem1__postgres_srv__0;                 -- can be pushed down
DROP TRIGGER trig_stmt_after ON rem1;
-- Test with row-level ON INSERT triggers
CREATE TRIGGER trig_row_before_insert
BEFORE INSERT ON rem1
FOR EACH ROW EXECUTE PROCEDURE trigger_data(23,'skidoo');
-- EXPLAIN (verbose, costs off)
-- UPDATE rem1__postgres_srv__0 set f2 = '';          -- can be pushed down
-- EXPLAIN (verbose, costs off)
-- DELETE FROM rem1__postgres_srv__0;                 -- can be pushed down
DROP TRIGGER trig_row_before_insert ON rem1;
CREATE TRIGGER trig_row_after_insert
AFTER INSERT ON rem1
FOR EACH ROW EXECUTE PROCEDURE trigger_data(23,'skidoo');
-- EXPLAIN (verbose, costs off)
-- UPDATE rem1__postgres_srv__0 set f2 = '';          -- can be pushed down
-- EXPLAIN (verbose, costs off)
-- DELETE FROM rem1__postgres_srv__0;                 -- can be pushed down
DROP TRIGGER trig_row_after_insert ON rem1;
-- Test with row-level ON UPDATE triggers
CREATE TRIGGER trig_row_before_update
BEFORE UPDATE ON rem1
FOR EACH ROW EXECUTE PROCEDURE trigger_data(23,'skidoo');
-- EXPLAIN (verbose, costs off)
-- UPDATE rem1__postgres_srv__0 set f2 = '';          -- can't be pushed down
-- EXPLAIN (verbose, costs off)
-- DELETE FROM rem1__postgres_srv__0;                 -- can be pushed down
DROP TRIGGER trig_row_before_update ON rem1;
CREATE TRIGGER trig_row_after_update
AFTER UPDATE ON rem1
FOR EACH ROW EXECUTE PROCEDURE trigger_data(23,'skidoo');
-- EXPLAIN (verbose, costs off)
-- UPDATE rem1__postgres_srv__0 set f2 = '';          -- can't be pushed down
-- EXPLAIN (verbose, costs off)
-- DELETE FROM rem1__postgres_srv__0;                 -- can be pushed down
DROP TRIGGER trig_row_after_update ON rem1;
-- Test with row-level ON DELETE triggers
CREATE TRIGGER trig_row_before_delete
BEFORE DELETE ON rem1
FOR EACH ROW EXECUTE PROCEDURE trigger_data(23,'skidoo');
-- EXPLAIN (verbose, costs off)
-- UPDATE rem1__postgres_srv__0 set f2 = '';          -- can be pushed down
-- EXPLAIN (verbose, costs off)
-- DELETE FROM rem1__postgres_srv__0;                 -- can't be pushed down
DROP TRIGGER trig_row_before_delete ON rem1;
CREATE TRIGGER trig_row_after_delete
AFTER DELETE ON rem1
FOR EACH ROW EXECUTE PROCEDURE trigger_data(23,'skidoo');
-- EXPLAIN (verbose, costs off)
-- UPDATE rem1__postgres_srv__0 set f2 = '';          -- can be pushed down
-- EXPLAIN (verbose, costs off)
-- DELETE FROM rem1__postgres_srv__0;                 -- can't be pushed down
DROP TRIGGER trig_row_after_delete ON rem1;
-- ===================================================================
-- test inheritance features
-- ===================================================================
-- CREATE TABLE a (aa TEXT);
-- CREATE TABLE loct (aa TEXT, bb TEXT);
-- ALTER TABLE a SET (autovacuum_enabled = 'false');
-- ALTER TABLE loct SET (autovacuum_enabled = 'false');
CREATE FOREIGN TABLE a (aa TEXT)
  SERVER pgspider_srv;
CREATE FOREIGN TABLE a__postgres_srv__0 (aa TEXT)
  SERVER postgres_srv OPTIONS (table_name 'a');
CREATE FOREIGN TABLE b (bb TEXT) INHERITS (a)
  SERVER pgspider_srv;
ALTER FOREIGN TABLE a ADD COLUMN __spd_url TEXT;
CREATE FOREIGN TABLE b__postgres_srv__0 (bb TEXT) INHERITS (a__postgres_srv__0)
  SERVER postgres_srv OPTIONS (table_name 'loct_1');
INSERT INTO a__postgres_srv__0(aa) VALUES('aaa');
INSERT INTO a__postgres_srv__0(aa) VALUES('aaaa');
INSERT INTO a__postgres_srv__0(aa) VALUES('aaaaa');
INSERT INTO b__postgres_srv__0(aa) VALUES('bbb');
INSERT INTO b__postgres_srv__0(aa) VALUES('bbbb');
INSERT INTO b__postgres_srv__0(aa) VALUES('bbbbb');
SELECT tableoid::regclass, * FROM a;
 tableoid |  aa   |   __spd_url    
----------+-------+----------------
 a        | aaa   | /postgres_srv/
 a        | aaaa  | /postgres_srv/
 a        | aaaaa | /postgres_srv/
 b        | bbb   | /postgres_srv/
 b        | bbbb  | /postgres_srv/
 b        | bbbbb | /postgres_srv/
(6 rows)

SELECT tableoid::regclass, * FROM b;
 tableoid |  aa   | bb |   __spd_url    
----------+-------+----+----------------
 b        | bbb   |    | /postgres_srv/
 b        | bbbb  |    | /postgres_srv/
 b        | bbbbb |    | /postgres_srv/
(3 rows)

SELECT tableoid::regclass, * FROM ONLY a;
 tableoid |  aa   |   __spd_url    
----------+-------+----------------
 a        | aaa   | /postgres_srv/
 a        | aaaa  | /postgres_srv/
 a        | aaaaa | /postgres_srv/
(3 rows)

UPDATE a__postgres_srv__0 SET aa = 'zzzzzz' WHERE aa LIKE 'aaaa%';
SELECT tableoid::regclass, * FROM a;
 tableoid |   aa   |   __spd_url    
----------+--------+----------------
 a        | aaa    | /postgres_srv/
 a        | zzzzzz | /postgres_srv/
 a        | zzzzzz | /postgres_srv/
 b        | bbb    | /postgres_srv/
 b        | bbbb   | /postgres_srv/
 b        | bbbbb  | /postgres_srv/
(6 rows)

SELECT tableoid::regclass, * FROM b;
 tableoid |  aa   | bb |   __spd_url    
----------+-------+----+----------------
 b        | bbb   |    | /postgres_srv/
 b        | bbbb  |    | /postgres_srv/
 b        | bbbbb |    | /postgres_srv/
(3 rows)

SELECT tableoid::regclass, * FROM ONLY a;
 tableoid |   aa   |   __spd_url    
----------+--------+----------------
 a        | aaa    | /postgres_srv/
 a        | zzzzzz | /postgres_srv/
 a        | zzzzzz | /postgres_srv/
(3 rows)

UPDATE b__postgres_srv__0 SET aa = 'new';
SELECT tableoid::regclass, * FROM a;
 tableoid |   aa   |   __spd_url    
----------+--------+----------------
 a        | aaa    | /postgres_srv/
 a        | zzzzzz | /postgres_srv/
 a        | zzzzzz | /postgres_srv/
 b        | new    | /postgres_srv/
 b        | new    | /postgres_srv/
 b        | new    | /postgres_srv/
(6 rows)

SELECT tableoid::regclass, * FROM b;
 tableoid | aa  | bb |   __spd_url    
----------+-----+----+----------------
 b        | new |    | /postgres_srv/
 b        | new |    | /postgres_srv/
 b        | new |    | /postgres_srv/
(3 rows)

SELECT tableoid::regclass, * FROM ONLY a;
 tableoid |   aa   |   __spd_url    
----------+--------+----------------
 a        | aaa    | /postgres_srv/
 a        | zzzzzz | /postgres_srv/
 a        | zzzzzz | /postgres_srv/
(3 rows)

UPDATE a__postgres_srv__0 SET aa = 'newtoo';
SELECT tableoid::regclass, * FROM a;
 tableoid |   aa   |   __spd_url    
----------+--------+----------------
 a        | newtoo | /postgres_srv/
 a        | newtoo | /postgres_srv/
 a        | newtoo | /postgres_srv/
 b        | newtoo | /postgres_srv/
 b        | newtoo | /postgres_srv/
 b        | newtoo | /postgres_srv/
(6 rows)

SELECT tableoid::regclass, * FROM b;
 tableoid |   aa   | bb |   __spd_url    
----------+--------+----+----------------
 b        | newtoo |    | /postgres_srv/
 b        | newtoo |    | /postgres_srv/
 b        | newtoo |    | /postgres_srv/
(3 rows)

SELECT tableoid::regclass, * FROM ONLY a;
 tableoid |   aa   |   __spd_url    
----------+--------+----------------
 a        | newtoo | /postgres_srv/
 a        | newtoo | /postgres_srv/
 a        | newtoo | /postgres_srv/
(3 rows)

DELETE FROM a__postgres_srv__0;
SELECT tableoid::regclass, * FROM a;
 tableoid | aa | __spd_url 
----------+----+-----------
(0 rows)

SELECT tableoid::regclass, * FROM b;
 tableoid | aa | bb | __spd_url 
----------+----+----+-----------
(0 rows)

SELECT tableoid::regclass, * FROM ONLY a;
 tableoid | aa | __spd_url 
----------+----+-----------
(0 rows)

DROP FOREIGN TABLE a CASCADE;
NOTICE:  drop cascades to foreign table b
-- DROP TABLE loct;
DROP FOREIGN TABLE b__postgres_srv__0;
-- Check SELECT FOR UPDATE/SHARE with an inherited source table
--create table loct1 (f1 int, f2 int, f3 int);
--create table loct2 (f1 int, f2 int, f3 int);
--alter table loct1 set (autovacuum_enabled = 'false');
--alter table loct2 set (autovacuum_enabled = 'false');
---create table foo (f1 int, f2 int);
create foreign table foo (f1 int, f2 int)
  server pgspider_srv;
create foreign table foo__postgres_srv__0 (f1 int, f2 int)
  server postgres_srv options (table_name 'foo');
create foreign table foo2 (f3 int) inherits (foo)
  server pgspider_srv;
-- Add __spd_url for both foo and foo2
alter foreign table foo add column __spd_url text;
create foreign table foo2__postgres_srv__0 (f3 int) inherits (foo__postgres_srv__0)
  server postgres_srv options (table_name 'loct1_1');
---create table bar (f1 int, f2 int);
create foreign table bar (f1 int, f2 int)
  server pgspider_srv;
create foreign table bar__postgres_srv__0 (f1 int, f2 int)
  server postgres_srv options (table_name 'bar');
create foreign table bar2 (f3 int) inherits (bar)
  server pgspider_srv;
-- Add __spd_url for both bat and bar2
alter foreign table bar add column __spd_url text;
create foreign table bar2__postgres_srv__0 (f3 int) inherits (bar__postgres_srv__0)
  server postgres_srv options (table_name 'loct2_1');
--alter table foo set (autovacuum_enabled = 'false');
--alter table bar set (autovacuum_enabled = 'false');
insert into foo__postgres_srv__0 values(1,1);
insert into foo__postgres_srv__0 values(3,3);
insert into foo2__postgres_srv__0 values(2,2,2);
insert into foo2__postgres_srv__0 values(4,4,4);
insert into bar__postgres_srv__0 values(1,11);
insert into bar__postgres_srv__0 values(2,22);
insert into bar__postgres_srv__0 values(6,66);
insert into bar2__postgres_srv__0 values(3,33,33);
insert into bar2__postgres_srv__0 values(4,44,44);
insert into bar2__postgres_srv__0 values(7,77,77);
-- Add more test cases to check whether inheritance is correct or not
select * from bar;
 f1 | f2 |   __spd_url    
----+----+----------------
  1 | 11 | /postgres_srv/
  2 | 22 | /postgres_srv/
  6 | 66 | /postgres_srv/
  3 | 33 | /postgres_srv/
  4 | 44 | /postgres_srv/
  7 | 77 | /postgres_srv/
(6 rows)

select * from foo;
 f1 | f2 |   __spd_url    
----+----+----------------
  1 |  1 | /postgres_srv/
  3 |  3 | /postgres_srv/
  2 |  2 | /postgres_srv/
  4 |  4 | /postgres_srv/
(4 rows)

select * from bar2;
 f1 | f2 | f3 |   __spd_url    
----+----+----+----------------
  3 | 33 | 33 | /postgres_srv/
  4 | 44 | 44 | /postgres_srv/
  7 | 77 | 77 | /postgres_srv/
(3 rows)

select * from foo2;
 f1 | f2 | f3 |   __spd_url    
----+----+----+----------------
  2 |  2 |  2 | /postgres_srv/
  4 |  4 |  4 | /postgres_srv/
(2 rows)

--explain (verbose, costs off)
--select * from bar where f1 in (select f1 from foo) for update;
--select * from bar where f1 in (select f1 from foo) for update;
--explain (verbose, costs off)
--select * from bar where f1 in (select f1 from foo) for share;
--select * from bar where f1 in (select f1 from foo) for share;
-- Check UPDATE with inherited target and an inherited source table
--explain (verbose, costs off)
--update bar set f2 = f2 + 100 where f1 in (select f1 from foo);
--update bar set f2 = f2 + 100 where f1 in (select f1 from foo);
select tableoid::regclass, * from bar order by 1,2;
 tableoid | f1 | f2 |   __spd_url    
----------+----+----+----------------
 bar      |  1 | 11 | /postgres_srv/
 bar      |  2 | 22 | /postgres_srv/
 bar      |  6 | 66 | /postgres_srv/
 bar2     |  3 | 33 | /postgres_srv/
 bar2     |  4 | 44 | /postgres_srv/
 bar2     |  7 | 77 | /postgres_srv/
(6 rows)

-- Check UPDATE with inherited target and an appendrel subquery
--explain (verbose, costs off)
--update bar set f2 = f2 + 100
--from
--  ( select f1 from foo union all select f1+3 from foo ) ss
--where bar.f1 = ss.f1;
update bar__postgres_srv__0 set f2 = f2 + 100
from
  ( select f1 from foo union all select f1+3 from foo ) ss
where bar__postgres_srv__0.f1 = ss.f1;
select tableoid::regclass, * from bar order by 1,2;
 tableoid | f1 | f2  |   __spd_url    
----------+----+-----+----------------
 bar      |  1 | 111 | /postgres_srv/
 bar      |  2 | 122 | /postgres_srv/
 bar      |  6 | 166 | /postgres_srv/
 bar2     |  3 | 133 | /postgres_srv/
 bar2     |  4 | 144 | /postgres_srv/
 bar2     |  7 | 177 | /postgres_srv/
(6 rows)

-- Test forcing the remote server to produce sorted data for a merge join,
-- but the foreign table is an inheritance child.
delete from foo2__postgres_srv__0;
delete from foo__postgres_srv__0;
--truncate table loct1;
--truncate table only foo;
\set num_rows_foo 2000
--insert into loct1 select generate_series(0, :num_rows_foo, 2), generate_series(0, :num_rows_foo, 2), generate_series(0, :num_rows_foo, 2);
insert into foo2__postgres_srv__0 select generate_series(0, :num_rows_foo, 2), generate_series(0, :num_rows_foo, 2), generate_series(0, :num_rows_foo, 2);
--insert into foo select generate_series(1, :num_rows_foo, 2), generate_series(1, :num_rows_foo, 2);
insert into foo__postgres_srv__0 select generate_series(1, :num_rows_foo, 2), generate_series(1, :num_rows_foo, 2);
SET enable_hashjoin to false;
SET enable_nestloop to false;
alter foreign table foo2 options (use_remote_estimate 'true');
--create index i_loct1_f1 on loct1(f1);
--create index i_foo_f1 on foo(f1);
analyze foo;
WARNING:  skipping "foo" --- cannot analyze this foreign table
--analyze loct1;
analyze foo2;
WARNING:  skipping "foo2" --- cannot analyze this foreign table
-- inner join; expressions in the clauses appear in the equivalence class list
explain (verbose, costs off)
	select foo.f1, foo2.f1 from foo join foo2 on (foo.f1 = foo2.f1) order by foo.f2 offset 10 limit 10;
                                   QUERY PLAN                                    
---------------------------------------------------------------------------------
 Limit
   Output: foo.f1, foo2.f1, foo.f2
   ->  Sort
         Output: foo.f1, foo2.f1, foo.f2
         Sort Key: foo.f2
         ->  Merge Join
               Output: foo.f1, foo2.f1, foo.f2
               Merge Cond: (foo2.f1 = foo.f1)
               ->  Sort
                     Output: foo2.f1
                     Sort Key: foo2.f1
                     ->  Foreign Scan on public.foo2
                           Output: foo2.f1
                           Node: postgres_srv / Status: Alive
                             Remote SQL: SELECT f1 FROM public.loct1_1
               ->  Sort
                     Output: foo.f1, foo.f2
                     Sort Key: foo.f1
                     ->  Append
                           ->  Foreign Scan on public.foo
                                 Output: foo.f1, foo.f2
                                 Node: postgres_srv / Status: Alive
                                   Remote SQL: SELECT f1, f2 FROM public.foo
                           ->  Foreign Scan on public.foo2 foo2_1
                                 Output: foo2_1.f1, foo2_1.f2
                                 Node: postgres_srv / Status: Alive
                                   Remote SQL: SELECT f1, f2 FROM public.loct1_1
(27 rows)

select foo.f1, foo2.f1 from foo join foo2 on (foo.f1 = foo2.f1) order by foo.f2 offset 10 limit 10;
 f1 | f1 
----+----
 20 | 20
 22 | 22
 24 | 24
 26 | 26
 28 | 28
 30 | 30
 32 | 32
 34 | 34
 36 | 36
 38 | 38
(10 rows)

-- outer join; expressions in the clauses do not appear in equivalence class
-- list but no output change as compared to the previous query
explain (verbose, costs off)
	select foo.f1, foo2.f1 from foo left join foo2 on (foo.f1 = foo2.f1) order by foo.f2 offset 10 limit 10;
                                   QUERY PLAN                                    
---------------------------------------------------------------------------------
 Limit
   Output: foo.f1, foo2.f1, foo.f2
   ->  Sort
         Output: foo.f1, foo2.f1, foo.f2
         Sort Key: foo.f2
         ->  Merge Right Join
               Output: foo.f1, foo2.f1, foo.f2
               Merge Cond: (foo2.f1 = foo.f1)
               ->  Sort
                     Output: foo2.f1
                     Sort Key: foo2.f1
                     ->  Foreign Scan on public.foo2
                           Output: foo2.f1
                           Node: postgres_srv / Status: Alive
                             Remote SQL: SELECT f1 FROM public.loct1_1
               ->  Sort
                     Output: foo.f1, foo.f2
                     Sort Key: foo.f1
                     ->  Append
                           ->  Foreign Scan on public.foo
                                 Output: foo.f1, foo.f2
                                 Node: postgres_srv / Status: Alive
                                   Remote SQL: SELECT f1, f2 FROM public.foo
                           ->  Foreign Scan on public.foo2 foo2_1
                                 Output: foo2_1.f1, foo2_1.f2
                                 Node: postgres_srv / Status: Alive
                                   Remote SQL: SELECT f1, f2 FROM public.loct1_1
(27 rows)

select foo.f1, foo2.f1 from foo left join foo2 on (foo.f1 = foo2.f1) order by foo.f2 offset 10 limit 10;
 f1 | f1 
----+----
 10 | 10
 11 |   
 12 | 12
 13 |   
 14 | 14
 15 |   
 16 | 16
 17 |   
 18 | 18
 19 |   
(10 rows)

RESET enable_hashjoin;
RESET enable_nestloop;
-- Test that WHERE CURRENT OF is not supported
begin;
declare c cursor for select * from bar where f1 = 7;
fetch from c;
 f1 | f2  |   __spd_url    
----+-----+----------------
  7 | 177 | /postgres_srv/
(1 row)

--update bar set f2 = null where current of c;
--rollback;
--use commit instead of rollback
commit;
-- explain (verbose, costs off)
-- delete from foo where f1 < 5 returning *;
delete from foo__postgres_srv__0 where f1 < 5 returning *;
 f1 | f2 
----+----
  1 |  1
  3 |  3
  0 |  0
  2 |  2
  4 |  4
(5 rows)

-- explain (verbose, costs off)
-- update bar set f2 = f2 + 100 returning *;
update bar__postgres_srv__0 set f2 = f2 + 100 returning *;
 f1 | f2  
----+-----
  1 | 211
  2 | 222
  6 | 266
  3 | 233
  4 | 244
  7 | 277
(6 rows)

-- Test that UPDATE/DELETE with inherited target works with row-level triggers
CREATE TRIGGER trig_row_before
BEFORE UPDATE OR DELETE ON bar2
FOR EACH ROW EXECUTE PROCEDURE trigger_data(23,'skidoo');
CREATE TRIGGER trig_row_after
AFTER UPDATE OR DELETE ON bar2
FOR EACH ROW EXECUTE PROCEDURE trigger_data(23,'skidoo');
-- explain (verbose, costs off)
-- update bar set f2 = f2 + 100;
update bar__postgres_srv__0 set f2 = f2 + 100;
-- explain (verbose, costs off)
-- delete from bar where f2 < 400;
delete from bar__postgres_srv__0 where f2 < 400;
-- cleanup
drop foreign table foo cascade;
NOTICE:  drop cascades to foreign table foo2
drop foreign table bar cascade;
NOTICE:  drop cascades to foreign table bar2
--drop table foo cascade;
--drop table bar cascade;
--drop table loct1;
--drop table loct2;
-- Test pushing down UPDATE/DELETE joins to the remote server
---create table parent (a int, b text);
---create table loct1 (a int, b text);
---create table loct2 (a int, b text);
create foreign table parent (a int, b text, __spd_url text)
  server pgspider_srv;
create foreign table parent__postgres_srv__0 (a int, b text)
  server postgres_srv options (table_name 'parent');
create foreign table remt1 (a int, b text, __spd_url text)
  server pgspider_srv;
create foreign table remt1__postgres_srv__0 (a int, b text)
  server postgres_srv options (table_name 'loct1_2');
create foreign table remt2 (a int, b text, __spd_url text)
  server pgspider_srv;
create foreign table remt2__postgres_srv__0 (a int, b text)
  server postgres_srv options (table_name 'loct2_2');
alter foreign table remt1 inherit parent;
alter foreign table remt1__postgres_srv__0 inherit parent__postgres_srv__0;
insert into remt1__postgres_srv__0 values (1, 'foo');
insert into remt1__postgres_srv__0 values (2, 'bar');
insert into remt2__postgres_srv__0 values (1, 'foo');
insert into remt2__postgres_srv__0 values (2, 'bar');
-- Add more test cases to see original data in advance
select * from parent;
 a |  b  |   __spd_url    
---+-----+----------------
 1 | foo | /postgres_srv/
 2 | bar | /postgres_srv/
(2 rows)

select * from remt1;
 a |  b  |   __spd_url    
---+-----+----------------
 1 | foo | /postgres_srv/
 2 | bar | /postgres_srv/
(2 rows)

select * from remt2;
 a |  b  |   __spd_url    
---+-----+----------------
 1 | foo | /postgres_srv/
 2 | bar | /postgres_srv/
(2 rows)

analyze remt1;
WARNING:  skipping "remt1" --- cannot analyze this foreign table
analyze remt2;
WARNING:  skipping "remt2" --- cannot analyze this foreign table
--explain (verbose, costs off)
--update parent set b = parent.b || remt2.b from remt2 where parent.a = remt2.a returning *;
update parent__postgres_srv__0 set b = parent__postgres_srv__0.b || remt2.b from remt2 where parent__postgres_srv__0.a = remt2.a returning *;
 a |   b    | a |  b  |   __spd_url    
---+--------+---+-----+----------------
 1 | foofoo | 1 | foo | /postgres_srv/
 2 | barbar | 2 | bar | /postgres_srv/
(2 rows)

--explain (verbose, costs off)
--delete from parent using remt2 where parent.a = remt2.a returning parent;
delete from parent__postgres_srv__0 using remt2 where parent__postgres_srv__0.a = remt2.a returning parent__postgres_srv__0;
 parent__postgres_srv__0 
-------------------------
 (1,foofoo)
 (2,barbar)
(2 rows)

-- cleanup
drop foreign table remt1;
drop foreign table remt2;
drop foreign table remt1__postgres_srv__0;
drop foreign table remt2__postgres_srv__0;
drop foreign table parent;
drop foreign table parent__postgres_srv__0;
-- ===================================================================
-- test tuple routing for foreign-table partitions
-- ===================================================================
-- Test insert tuple routing
create table itrtest (a int, b text, __spd_url text) partition by list (a);
--create table loct1 (a int check (a in (1)), b text);
create foreign table remp1 (a int check (a in (1)), b text, __spd_url text) server pgspider_srv;
create foreign table remp1__postgres_srv__0 (a int check (a in (1)), b text) server postgres_srv options (table_name 'loct1_3');
--create table loct2 (a int check (a in (2)), b text);
create foreign table remp2 (b text, a int check (a in (2)), __spd_url text) server pgspider_srv;
create foreign table remp2__postgres_srv__0 (b text, a int check (a in (2))) server postgres_srv options (table_name 'loct2_3');
alter table itrtest attach partition remp1 for values in (1);
alter table itrtest attach partition remp2 for values in (2);
-- insert into itrtest values (1, 'foo');
-- insert into itrtest values (1, 'bar') returning *;
-- insert into itrtest values (2, 'baz');
-- insert into itrtest values (2, 'qux') returning *;
-- insert into itrtest values (1, 'test1'), (2, 'test2') returning *;
-- select tableoid::regclass, * FROM itrtest;
-- select tableoid::regclass, * FROM remp1;
-- select tableoid::regclass, * FROM remp2;
--delete from itrtest;
--create unique index loct1_idx on loct1 (a);
-- DO NOTHING without an inference specification is supported
-- insert into itrtest values (1, 'foo') on conflict do nothing returning *;
-- insert into itrtest values (1, 'foo') on conflict do nothing returning *;
-- But other cases are not supported
-- insert into itrtest values (1, 'bar') on conflict (a) do nothing;
-- insert into itrtest values (1, 'bar') on conflict (a) do update set b = excluded.b;
-- select tableoid::regclass, * FROM itrtest;
-- delete from itrtest;
-- drop index loct1_idx;
-- Test that remote triggers work with insert tuple routing
create function br_insert_trigfunc() returns trigger as $$
begin
	new.b := new.b || ' triggered !';
	return new;
end
$$ language plpgsql;
create trigger loct1_br_insert_trigger before insert on remp1
	for each row execute procedure br_insert_trigfunc();
create trigger loct2_br_insert_trigger before insert on remp2
	for each row execute procedure br_insert_trigfunc();
-- The new values are concatenated with ' triggered !'
-- insert into itrtest values (1, 'foo') returning *;
-- insert into itrtest values (2, 'qux') returning *;
-- insert into itrtest values (1, 'test1'), (2, 'test2') returning *;
-- with result as (insert into itrtest values (1, 'test1'), (2, 'test2') returning *) select * from result;
drop trigger loct1_br_insert_trigger on remp1;
drop trigger loct2_br_insert_trigger on remp2;
drop foreign table remp1;
drop foreign table remp2;
drop foreign table remp1__postgres_srv__0;
drop foreign table remp2__postgres_srv__0;
drop table itrtest;
-- Test update tuple routing
create table utrtest (a int, b text, __spd_url text) partition by list (a);
create foreign table remp (a int check (a in (1)), b text, __spd_url text) server pgspider_srv;
create foreign table remp__postgres_srv__0 (a int check (a in (1)), b text) server postgres_srv options (table_name 'loct_2');
create table locp (a int check (a in (2)), b text, __spd_url text);
alter table utrtest attach partition remp for values in (1);
alter table utrtest attach partition locp for values in (2);
-- insert into utrtest values (1, 'foo');
-- insert into utrtest values (2, 'qux');
-- select tableoid::regclass, * FROM utrtest;
-- select tableoid::regclass, * FROM remp;
-- select tableoid::regclass, * FROM locp;
-- It's not allowed to move a row from a partition that is foreign to another
-- update utrtest set a = 2 where b = 'foo' returning *;
-- But the reverse is allowed
-- update utrtest set a = 1 where b = 'qux' returning *;
-- select tableoid::regclass, * FROM utrtest;
-- select tableoid::regclass, * FROM remp;
-- select tableoid::regclass, * FROM locp;
-- The executor should not let unexercised FDWs shut down
-- update utrtest set a = 1 where b = 'foo';
-- Test that remote triggers work with update tuple routing
create trigger loct_br_insert_trigger before insert on remp
	for each row execute procedure br_insert_trigfunc();
-- delete from utrtest;
-- insert into utrtest values (2, 'qux');
-- Check case where the foreign partition is a subplan target rel
-- explain (verbose, costs off)
-- update utrtest set a = 1 where a = 1 or a = 2 returning *;
-- The new values are concatenated with ' triggered !'
-- update utrtest set a = 1 where a = 1 or a = 2 returning *;
-- delete from utrtest;
-- insert into utrtest values (2, 'qux');
-- Check case where the foreign partition isn't a subplan target rel
-- explain (verbose, costs off)
-- update utrtest set a = 1 where a = 2 returning *;
-- The new values are concatenated with ' triggered !'
-- update utrtest set a = 1 where a = 2 returning *;
drop trigger loct_br_insert_trigger on remp;
-- We can move rows to a foreign partition that has been updated already,
-- but can't move rows to a foreign partition that hasn't been updated yet
-- delete from utrtest;
-- insert into utrtest values (1, 'foo');
-- insert into utrtest values (2, 'qux');
-- Test the former case:
-- with a direct modification plan
-- explain (verbose, costs off)
-- update utrtest set a = 1 returning *;
-- update utrtest set a = 1 returning *;
-- delete from utrtest;
-- insert into utrtest values (1, 'foo');
-- insert into utrtest values (2, 'qux');
-- with a non-direct modification plan
-- explain (verbose, costs off)
-- update utrtest set a = 1 from (values (1), (2)) s(x) where a = s.x returning *;
-- update utrtest set a = 1 from (values (1), (2)) s(x) where a = s.x returning *;
-- Change the definition of utrtest so that the foreign partition get updated
-- after the local partition
-- delete from utrtest;
alter table utrtest detach partition remp;
drop foreign table remp;
-- Comment out the constraint testing
-- alter table loct drop constraint loct_a_check;
-- alter table loct add check (a in (3));
-- create foreign table remp__postgres_srv__0 (a int check (a in (3)), b text) server postgres_srv options (table_name 'loct');
-- alter table utrtest attach partition remp__postgres_srv__0 for values in (3);
-- insert into utrtest values (2, 'qux');
-- insert into utrtest values (3, 'xyzzy');
-- -- Test the latter case:
-- -- with a direct modification plan
-- explain (verbose, costs off)
-- update utrtest set a = 3 returning *;
-- update utrtest set a = 3 returning *; -- ERROR
-- -- with a non-direct modification plan
-- explain (verbose, costs off)
-- update utrtest set a = 3 from (values (2), (3)) s(x) where a = s.x returning *;
-- update utrtest set a = 3 from (values (2), (3)) s(x) where a = s.x returning *; -- ERROR
drop table utrtest;
--drop table loct;
-- Test copy tuple routing
create table ctrtest (a int, b text, __spd_url text) partition by list (a);
--create table loct1 (a int check (a in (1)), b text);
create foreign table remp1 (a int check (a in (1)), b text, __spd_url text) server pgspider_srv;
create foreign table remp1__postgres_srv__0 (a int check (a in (1)), b text) server postgres_srv options (table_name 'loct1_4');
create foreign table remp2 (b text, a int check (a in (2)), __spd_url text) server pgspider_srv;
create foreign table remp2__postgres_srv__0 (b text, a int check (a in (2))) server postgres_srv options (table_name 'loct2_4');
alter table ctrtest attach partition remp1 for values in (1);
alter table ctrtest attach partition remp2 for values in (2);
-- copy ctrtest from stdin;
-- 1	foo
-- 2	qux
-- \.
-- select tableoid::regclass, * FROM ctrtest;
-- select tableoid::regclass, * FROM remp1;
-- select tableoid::regclass, * FROM remp2;
-- Copying into foreign partitions directly should work as well
copy remp1__postgres_srv__0 from stdin;
-- select tableoid::regclass, * FROM remp1;
drop foreign table remp1;
drop foreign table remp2;
drop foreign table remp1__postgres_srv__0;
drop foreign table remp2__postgres_srv__0;
drop table ctrtest;
-- ===================================================================
-- test COPY FROM
-- ===================================================================
--create table loc2 (f1 int, f2 text);
--alter table loc2 set (autovacuum_enabled = 'false');
create foreign table rem2 (f1 int, f2 text, __spd_url text) server pgspider_srv;
create foreign table rem2__postgres_srv__0 (f1 int, f2 text) server postgres_srv options(table_name 'loc2_1');
-- Test basic functionality
copy rem2__postgres_srv__0 from stdin;
select * from rem2;
 f1 | f2  |   __spd_url    
----+-----+----------------
  1 | foo | /postgres_srv/
  2 | bar | /postgres_srv/
(2 rows)

delete from rem2__postgres_srv__0;
-- Test check constraints
--alter table loc2 add constraint loc2_f1positive check (f1 >= 0);
alter foreign table rem2 add constraint rem2_f1positive check (f1 >= 0);
-- check constraint is enforced on the remote side, not locally
-- copy rem2__postgres_srv__0 from stdin;
-- 1	foo
-- 2	bar
-- \.
-- copy rem2__postgres_srv__0 from stdin; -- ERROR
-- -1	xyzzy
-- \.
-- select * from rem2;
alter foreign table rem2 drop constraint rem2_f1positive;
--alter table loc2 drop constraint loc2_f1positive;
delete from rem2__postgres_srv__0;
-- Test local triggers
create trigger trig_stmt_before before insert on rem2
	for each statement execute procedure trigger_func();
create trigger trig_stmt_after after insert on rem2
	for each statement execute procedure trigger_func();
create trigger trig_row_before before insert on rem2
	for each row execute procedure trigger_data(23,'skidoo');
create trigger trig_row_after after insert on rem2
	for each row execute procedure trigger_data(23,'skidoo');
copy rem2__postgres_srv__0 from stdin;
select * from rem2;
 f1 | f2  |   __spd_url    
----+-----+----------------
  1 | foo | /postgres_srv/
  2 | bar | /postgres_srv/
(2 rows)

drop trigger trig_row_before on rem2;
drop trigger trig_row_after on rem2;
drop trigger trig_stmt_before on rem2;
drop trigger trig_stmt_after on rem2;
delete from rem2__postgres_srv__0;
create trigger trig_row_before_insert before insert on rem2
	for each row execute procedure trig_row_before_insupdate();
-- The new values are concatenated with ' triggered !'
copy rem2__postgres_srv__0 from stdin;
-- select * from rem2;
drop trigger trig_row_before_insert on rem2;
delete from rem2__postgres_srv__0;
create trigger trig_null before insert on rem2
	for each row execute procedure trig_null();
-- Nothing happens
copy rem2__postgres_srv__0 from stdin;
-- select * from rem2;
drop trigger trig_null on rem2;
delete from rem2__postgres_srv__0;
-- Test remote triggers
create trigger trig_row_before_insert before insert on rem2
	for each row execute procedure trig_row_before_insupdate();
-- The new values are concatenated with ' triggered !'
copy rem2__postgres_srv__0 from stdin;
-- select * from rem2;
drop trigger trig_row_before_insert on rem2;
delete from rem2__postgres_srv__0;
create trigger trig_null before insert on rem2
	for each row execute procedure trig_null();
-- Nothing happens
copy rem2__postgres_srv__0 from stdin;
-- select * from rem2;
drop trigger trig_null on rem2;
delete from rem2__postgres_srv__0;
-- Test a combination of local and remote triggers
create trigger rem2_trig_row_before before insert on rem2
	for each row execute procedure trigger_data(23,'skidoo');
create trigger rem2_trig_row_after after insert on rem2
	for each row execute procedure trigger_data(23,'skidoo');
create trigger loc2_trig_row_before_insert before insert on rem2
	for each row execute procedure trig_row_before_insupdate();
copy rem2__postgres_srv__0 from stdin;
-- select * from rem2;
drop trigger rem2_trig_row_before on rem2;
drop trigger rem2_trig_row_after on rem2;
drop trigger loc2_trig_row_before_insert on rem2;
delete from rem2__postgres_srv__0;
-- test COPY FROM with foreign table created in the same transaction
/* Move this line to init database file */
-- create table loc3 (f1 int, f2 text);
begin;
create foreign table rem3 (f1 int, f2 text, __spd_url text)
	server pgspider_srv;
create foreign table rem3__postgres_srv__0 (f1 int, f2 text)
	server postgres_srv options(table_name 'loc3_1');
copy rem3__postgres_srv__0 from stdin;
commit;
select * from rem3;
 f1 | f2  |   __spd_url    
----+-----+----------------
  1 | foo | /postgres_srv/
  2 | bar | /postgres_srv/
(2 rows)

drop foreign table rem3;
drop foreign table rem3__postgres_srv__0;
-- ===================================================================
-- test IMPORT FOREIGN SCHEMA
-- ===================================================================
/* Move these lines to init database file */
--CREATE SCHEMA import_source;
--CREATE TABLE import_source.t1 (c1 int, c2 varchar NOT NULL);
--CREATE TABLE import_source.t2 (c1 int default 42, c2 varchar NULL, c3 text collate "POSIX");
--CREATE TYPE typ1 AS (m1 int, m2 varchar);
--CREATE TABLE import_source.t3 (c1 timestamptz default now(), c2 typ1);
--CREATE TABLE import_source."x 4" (c1 float8, "C 2" text, c3 varchar(42));
--CREATE TABLE import_source."x 5" (c1 float8);
--ALTER TABLE import_source."x 5" DROP COLUMN c1;
--CREATE TABLE import_source.t4 (c1 int) PARTITION BY RANGE (c1);
--CREATE TABLE import_source.t4_part PARTITION OF import_source.t4
--  FOR VALUES FROM (1) TO (100);
CREATE TYPE typ1 AS (m1 int, m2 varchar);
CREATE TYPE "Colors" AS ENUM ('red', 'green', 'blue');
CREATE SCHEMA import_dest1;
IMPORT FOREIGN SCHEMA import_source FROM SERVER postgres_srv INTO import_dest1;
\det+ import_dest1.*
                                       List of foreign tables
    Schema    | Table |    Server    |                   FDW options                   | Description 
--------------+-------+--------------+-------------------------------------------------+-------------
 import_dest1 | t1    | postgres_srv | (schema_name 'import_source', table_name 't1')  | 
 import_dest1 | t2    | postgres_srv | (schema_name 'import_source', table_name 't2')  | 
 import_dest1 | t3    | postgres_srv | (schema_name 'import_source', table_name 't3')  | 
 import_dest1 | t4    | postgres_srv | (schema_name 'import_source', table_name 't4')  | 
 import_dest1 | t5    | postgres_srv | (schema_name 'import_source', table_name 't5')  | 
 import_dest1 | x 4   | postgres_srv | (schema_name 'import_source', table_name 'x 4') | 
 import_dest1 | x 5   | postgres_srv | (schema_name 'import_source', table_name 'x 5') | 
(7 rows)

\d import_dest1.*
                         Foreign table "import_dest1.t1"
 Column |       Type        | Collation | Nullable | Default |    FDW options     
--------+-------------------+-----------+----------+---------+--------------------
 c1     | integer           |           |          |         | (column_name 'c1')
 c2     | character varying |           | not null |         | (column_name 'c2')
Server: postgres_srv
FDW options: (schema_name 'import_source', table_name 't1')

                         Foreign table "import_dest1.t2"
 Column |       Type        | Collation | Nullable | Default |    FDW options     
--------+-------------------+-----------+----------+---------+--------------------
 c1     | integer           |           |          |         | (column_name 'c1')
 c2     | character varying |           |          |         | (column_name 'c2')
 c3     | text              | POSIX     |          |         | (column_name 'c3')
Server: postgres_srv
FDW options: (schema_name 'import_source', table_name 't2')

                             Foreign table "import_dest1.t3"
 Column |           Type           | Collation | Nullable | Default |    FDW options     
--------+--------------------------+-----------+----------+---------+--------------------
 c1     | timestamp with time zone |           |          |         | (column_name 'c1')
 c2     | typ1                     |           |          |         | (column_name 'c2')
Server: postgres_srv
FDW options: (schema_name 'import_source', table_name 't3')

                    Foreign table "import_dest1.t4"
 Column |  Type   | Collation | Nullable | Default |    FDW options     
--------+---------+-----------+----------+---------+--------------------
 c1     | integer |           |          |         | (column_name 'c1')
Server: postgres_srv
FDW options: (schema_name 'import_source', table_name 't4')

                     Foreign table "import_dest1.t5"
 Column |   Type   | Collation | Nullable | Default |     FDW options     
--------+----------+-----------+----------+---------+---------------------
 c1     | integer  |           |          |         | (column_name 'c1')
 c2     | text     | C         |          |         | (column_name 'c2')
 Col    | "Colors" |           |          |         | (column_name 'Col')
Server: postgres_srv
FDW options: (schema_name 'import_source', table_name 't5')

                           Foreign table "import_dest1.x 4"
 Column |         Type          | Collation | Nullable | Default |     FDW options     
--------+-----------------------+-----------+----------+---------+---------------------
 c1     | double precision      |           |          |         | (column_name 'c1')
 C 2    | text                  |           |          |         | (column_name 'C 2')
 c3     | character varying(42) |           |          |         | (column_name 'c3')
Server: postgres_srv
FDW options: (schema_name 'import_source', table_name 'x 4')

               Foreign table "import_dest1.x 5"
 Column | Type | Collation | Nullable | Default | FDW options 
--------+------+-----------+----------+---------+-------------
Server: postgres_srv
FDW options: (schema_name 'import_source', table_name 'x 5')

-- Options
CREATE SCHEMA import_dest2;
IMPORT FOREIGN SCHEMA import_source FROM SERVER postgres_srv INTO import_dest2
  OPTIONS (import_default 'true');
\det+ import_dest2.*
                                       List of foreign tables
    Schema    | Table |    Server    |                   FDW options                   | Description 
--------------+-------+--------------+-------------------------------------------------+-------------
 import_dest2 | t1    | postgres_srv | (schema_name 'import_source', table_name 't1')  | 
 import_dest2 | t2    | postgres_srv | (schema_name 'import_source', table_name 't2')  | 
 import_dest2 | t3    | postgres_srv | (schema_name 'import_source', table_name 't3')  | 
 import_dest2 | t4    | postgres_srv | (schema_name 'import_source', table_name 't4')  | 
 import_dest2 | t5    | postgres_srv | (schema_name 'import_source', table_name 't5')  | 
 import_dest2 | x 4   | postgres_srv | (schema_name 'import_source', table_name 'x 4') | 
 import_dest2 | x 5   | postgres_srv | (schema_name 'import_source', table_name 'x 5') | 
(7 rows)

\d import_dest2.*
                         Foreign table "import_dest2.t1"
 Column |       Type        | Collation | Nullable | Default |    FDW options     
--------+-------------------+-----------+----------+---------+--------------------
 c1     | integer           |           |          |         | (column_name 'c1')
 c2     | character varying |           | not null |         | (column_name 'c2')
Server: postgres_srv
FDW options: (schema_name 'import_source', table_name 't1')

                         Foreign table "import_dest2.t2"
 Column |       Type        | Collation | Nullable | Default |    FDW options     
--------+-------------------+-----------+----------+---------+--------------------
 c1     | integer           |           |          | 42      | (column_name 'c1')
 c2     | character varying |           |          |         | (column_name 'c2')
 c3     | text              | POSIX     |          |         | (column_name 'c3')
Server: postgres_srv
FDW options: (schema_name 'import_source', table_name 't2')

                             Foreign table "import_dest2.t3"
 Column |           Type           | Collation | Nullable | Default |    FDW options     
--------+--------------------------+-----------+----------+---------+--------------------
 c1     | timestamp with time zone |           |          | now()   | (column_name 'c1')
 c2     | typ1                     |           |          |         | (column_name 'c2')
Server: postgres_srv
FDW options: (schema_name 'import_source', table_name 't3')

                    Foreign table "import_dest2.t4"
 Column |  Type   | Collation | Nullable | Default |    FDW options     
--------+---------+-----------+----------+---------+--------------------
 c1     | integer |           |          |         | (column_name 'c1')
Server: postgres_srv
FDW options: (schema_name 'import_source', table_name 't4')

                     Foreign table "import_dest2.t5"
 Column |   Type   | Collation | Nullable | Default |     FDW options     
--------+----------+-----------+----------+---------+---------------------
 c1     | integer  |           |          |         | (column_name 'c1')
 c2     | text     | C         |          |         | (column_name 'c2')
 Col    | "Colors" |           |          |         | (column_name 'Col')
Server: postgres_srv
FDW options: (schema_name 'import_source', table_name 't5')

                           Foreign table "import_dest2.x 4"
 Column |         Type          | Collation | Nullable | Default |     FDW options     
--------+-----------------------+-----------+----------+---------+---------------------
 c1     | double precision      |           |          |         | (column_name 'c1')
 C 2    | text                  |           |          |         | (column_name 'C 2')
 c3     | character varying(42) |           |          |         | (column_name 'c3')
Server: postgres_srv
FDW options: (schema_name 'import_source', table_name 'x 4')

               Foreign table "import_dest2.x 5"
 Column | Type | Collation | Nullable | Default | FDW options 
--------+------+-----------+----------+---------+-------------
Server: postgres_srv
FDW options: (schema_name 'import_source', table_name 'x 5')

CREATE SCHEMA import_dest3;
IMPORT FOREIGN SCHEMA import_source FROM SERVER postgres_srv INTO import_dest3
  OPTIONS (import_collate 'false', import_not_null 'false');
\det+ import_dest3.*
                                       List of foreign tables
    Schema    | Table |    Server    |                   FDW options                   | Description 
--------------+-------+--------------+-------------------------------------------------+-------------
 import_dest3 | t1    | postgres_srv | (schema_name 'import_source', table_name 't1')  | 
 import_dest3 | t2    | postgres_srv | (schema_name 'import_source', table_name 't2')  | 
 import_dest3 | t3    | postgres_srv | (schema_name 'import_source', table_name 't3')  | 
 import_dest3 | t4    | postgres_srv | (schema_name 'import_source', table_name 't4')  | 
 import_dest3 | t5    | postgres_srv | (schema_name 'import_source', table_name 't5')  | 
 import_dest3 | x 4   | postgres_srv | (schema_name 'import_source', table_name 'x 4') | 
 import_dest3 | x 5   | postgres_srv | (schema_name 'import_source', table_name 'x 5') | 
(7 rows)

\d import_dest3.*
                         Foreign table "import_dest3.t1"
 Column |       Type        | Collation | Nullable | Default |    FDW options     
--------+-------------------+-----------+----------+---------+--------------------
 c1     | integer           |           |          |         | (column_name 'c1')
 c2     | character varying |           |          |         | (column_name 'c2')
Server: postgres_srv
FDW options: (schema_name 'import_source', table_name 't1')

                         Foreign table "import_dest3.t2"
 Column |       Type        | Collation | Nullable | Default |    FDW options     
--------+-------------------+-----------+----------+---------+--------------------
 c1     | integer           |           |          |         | (column_name 'c1')
 c2     | character varying |           |          |         | (column_name 'c2')
 c3     | text              |           |          |         | (column_name 'c3')
Server: postgres_srv
FDW options: (schema_name 'import_source', table_name 't2')

                             Foreign table "import_dest3.t3"
 Column |           Type           | Collation | Nullable | Default |    FDW options     
--------+--------------------------+-----------+----------+---------+--------------------
 c1     | timestamp with time zone |           |          |         | (column_name 'c1')
 c2     | typ1                     |           |          |         | (column_name 'c2')
Server: postgres_srv
FDW options: (schema_name 'import_source', table_name 't3')

                    Foreign table "import_dest3.t4"
 Column |  Type   | Collation | Nullable | Default |    FDW options     
--------+---------+-----------+----------+---------+--------------------
 c1     | integer |           |          |         | (column_name 'c1')
Server: postgres_srv
FDW options: (schema_name 'import_source', table_name 't4')

                     Foreign table "import_dest3.t5"
 Column |   Type   | Collation | Nullable | Default |     FDW options     
--------+----------+-----------+----------+---------+---------------------
 c1     | integer  |           |          |         | (column_name 'c1')
 c2     | text     |           |          |         | (column_name 'c2')
 Col    | "Colors" |           |          |         | (column_name 'Col')
Server: postgres_srv
FDW options: (schema_name 'import_source', table_name 't5')

                           Foreign table "import_dest3.x 4"
 Column |         Type          | Collation | Nullable | Default |     FDW options     
--------+-----------------------+-----------+----------+---------+---------------------
 c1     | double precision      |           |          |         | (column_name 'c1')
 C 2    | text                  |           |          |         | (column_name 'C 2')
 c3     | character varying(42) |           |          |         | (column_name 'c3')
Server: postgres_srv
FDW options: (schema_name 'import_source', table_name 'x 4')

               Foreign table "import_dest3.x 5"
 Column | Type | Collation | Nullable | Default | FDW options 
--------+------+-----------+----------+---------+-------------
Server: postgres_srv
FDW options: (schema_name 'import_source', table_name 'x 5')

-- Check LIMIT TO and EXCEPT
CREATE SCHEMA import_dest4;
IMPORT FOREIGN SCHEMA import_source LIMIT TO (t1, nonesuch)
  FROM SERVER postgres_srv INTO import_dest4;
\det+ import_dest4.*
                                       List of foreign tables
    Schema    | Table |    Server    |                  FDW options                   | Description 
--------------+-------+--------------+------------------------------------------------+-------------
 import_dest4 | t1    | postgres_srv | (schema_name 'import_source', table_name 't1') | 
(1 row)

IMPORT FOREIGN SCHEMA import_source EXCEPT (t1, "x 4", nonesuch)
  FROM SERVER postgres_srv INTO import_dest4;
\det+ import_dest4.*
                                       List of foreign tables
    Schema    | Table |    Server    |                   FDW options                   | Description 
--------------+-------+--------------+-------------------------------------------------+-------------
 import_dest4 | t1    | postgres_srv | (schema_name 'import_source', table_name 't1')  | 
 import_dest4 | t2    | postgres_srv | (schema_name 'import_source', table_name 't2')  | 
 import_dest4 | t3    | postgres_srv | (schema_name 'import_source', table_name 't3')  | 
 import_dest4 | t4    | postgres_srv | (schema_name 'import_source', table_name 't4')  | 
 import_dest4 | t5    | postgres_srv | (schema_name 'import_source', table_name 't5')  | 
 import_dest4 | x 5   | postgres_srv | (schema_name 'import_source', table_name 'x 5') | 
(6 rows)

-- Assorted error cases
IMPORT FOREIGN SCHEMA import_source FROM SERVER postgres_srv INTO import_dest4;
ERROR:  relation "t1" already exists
CONTEXT:  importing foreign table "t1"
IMPORT FOREIGN SCHEMA nonesuch FROM SERVER postgres_srv INTO import_dest4;
ERROR:  schema "nonesuch" is not present on foreign server "postgres_srv"
IMPORT FOREIGN SCHEMA nonesuch FROM SERVER postgres_srv INTO notthere;
ERROR:  schema "notthere" does not exist
IMPORT FOREIGN SCHEMA nonesuch FROM SERVER nowhere INTO notthere;
ERROR:  server "nowhere" does not exist
-- Check case of a type present only on the remote server.
-- We can fake this by dropping the type locally in our transaction.
/* Move these lines to init database files */
-- CREATE TYPE "Colors" AS ENUM ('red', 'green', 'blue');
-- CREATE TABLE import_source.t5 (c1 int, c2 text collate "C", "Col" "Colors");
CREATE SCHEMA import_dest5;
BEGIN;
DROP TYPE "Colors" CASCADE;
NOTICE:  drop cascades to 4 other objects
DETAIL:  drop cascades to column Col of foreign table import_dest1.t5
drop cascades to column Col of foreign table import_dest2.t5
drop cascades to column Col of foreign table import_dest3.t5
drop cascades to column Col of foreign table import_dest4.t5
IMPORT FOREIGN SCHEMA import_source LIMIT TO (t5)
  FROM SERVER postgres_srv INTO import_dest5;  -- ERROR
ERROR:  type "public.Colors" does not exist
LINE 4:   "Col" public."Colors" OPTIONS (column_name 'Col')
                ^
QUERY:  CREATE FOREIGN TABLE t5 (
  c1 integer OPTIONS (column_name 'c1'),
  c2 text OPTIONS (column_name 'c2') COLLATE pg_catalog."C",
  "Col" public."Colors" OPTIONS (column_name 'Col')
) SERVER postgres_srv
OPTIONS (schema_name 'import_source', table_name 't5');
CONTEXT:  importing foreign table "t5"
ROLLBACK;
BEGIN;
CREATE SERVER fetch101 FOREIGN DATA WRAPPER postgres_fdw OPTIONS( fetch_size '101' );
SELECT count(*)
FROM pg_foreign_server
WHERE srvname = 'fetch101'
AND srvoptions @> array['fetch_size=101'];
 count 
-------
     1
(1 row)

ALTER SERVER fetch101 OPTIONS( SET fetch_size '202' );
SELECT count(*)
FROM pg_foreign_server
WHERE srvname = 'fetch101'
AND srvoptions @> array['fetch_size=101'];
 count 
-------
     0
(1 row)

SELECT count(*)
FROM pg_foreign_server
WHERE srvname = 'fetch101'
AND srvoptions @> array['fetch_size=202'];
 count 
-------
     1
(1 row)

CREATE FOREIGN TABLE table30000 ( x int , __spd_url text) SERVER pgspider_srv;
CREATE FOREIGN TABLE table30000__fetch101__0 ( x int ) SERVER fetch101 OPTIONS ( fetch_size '30000' );
-- SELECT COUNT(*)
-- FROM pg_foreign_table
-- WHERE ftrelid = 'table30000'::regclass
-- AND ftoptions @> array['fetch_size=30000'];
ALTER FOREIGN TABLE table30000__fetch101__0 OPTIONS ( SET fetch_size '60000');
SELECT COUNT(*)
FROM pg_foreign_table
WHERE ftrelid = 'table30000'::regclass
AND ftoptions @> array['fetch_size=30000'];
 count 
-------
     0
(1 row)

-- SELECT COUNT(*)
-- FROM pg_foreign_table
-- WHERE ftrelid = 'table30000'::regclass
-- AND ftoptions @> array['fetch_size=60000'];
ROLLBACK;
-- ===================================================================
-- test partitionwise joins
-- ===================================================================
SET enable_partitionwise_join=on;
CREATE TABLE fprt1 (a int, b int, c varchar) PARTITION BY RANGE(a);
/* Move these lines to init database file */
--CREATE TABLE fprt1_p1 (LIKE fprt1);
--CREATE TABLE fprt1_p2 (LIKE fprt1);
--ALTER TABLE fprt1_p1 SET (autovacuum_enabled = 'false');
--ALTER TABLE fprt1_p2 SET (autovacuum_enabled = 'false');
--INSERT INTO fprt1_p1 SELECT i, i, to_char(i/50, 'FM0000') FROM generate_series(0, 249, 2) i;
--INSERT INTO fprt1_p2 SELECT i, i, to_char(i/50, 'FM0000') FROM generate_series(250, 499, 2) i;
CREATE FOREIGN TABLE ftprt1_p1 (a int, b int, c varchar, __spd_url text)
	SERVER pgspider_srv;
CREATE FOREIGN TABLE ftprt1_p1__postgres_srv__0 PARTITION OF fprt1 FOR VALUES FROM (0) TO (250)
	SERVER postgres_srv OPTIONS (table_name 'fprt1_p1', use_remote_estimate 'true');
CREATE FOREIGN TABLE ftprt1_p2 (a int, b int, c varchar, __spd_url text)
	SERVER pgspider_srv;
CREATE FOREIGN TABLE ftprt1_p2__postgres_srv__0 PARTITION OF fprt1 FOR VALUES FROM (250) TO (500)
	SERVER postgres_srv OPTIONS (TABLE_NAME 'fprt1_p2');
ANALYZE fprt1;
ANALYZE ftprt1_p1;
WARNING:  skipping "ftprt1_p1" --- cannot analyze this foreign table
ANALYZE ftprt1_p2;
WARNING:  skipping "ftprt1_p2" --- cannot analyze this foreign table
CREATE TABLE fprt2 (a int, b int, c varchar) PARTITION BY RANGE(b);
--CREATE TABLE fprt2_p1 (LIKE fprt2);
--CREATE TABLE fprt2_p2 (LIKE fprt2);
--ALTER TABLE fprt2_p1 SET (autovacuum_enabled = 'false');
--ALTER TABLE fprt2_p2 SET (autovacuum_enabled = 'false');
--INSERT INTO fprt2_p1 SELECT i, i, to_char(i/50, 'FM0000') FROM generate_series(0, 249, 3) i;
--INSERT INTO fprt2_p2 SELECT i, i, to_char(i/50, 'FM0000') FROM generate_series(250, 499, 3) i;
CREATE FOREIGN TABLE ftprt2_p1 (b int, c varchar, a int, __spd_url text)
	SERVER pgspider_srv;
CREATE FOREIGN TABLE ftprt2_p1__postgres_srv__0 (b int, c varchar, a int)
	SERVER postgres_srv OPTIONS (table_name 'fprt2_p1', use_remote_estimate 'true');
ALTER TABLE fprt2 ATTACH PARTITION ftprt2_p1__postgres_srv__0 FOR VALUES FROM (0) TO (250);
CREATE FOREIGN TABLE ftprt2_p2 (b int, c varchar, a int, __spd_url text)
	SERVER pgspider_srv;
CREATE FOREIGN TABLE ftprt2_p2__postgres_srv__0 PARTITION OF fprt2 FOR VALUES FROM (250) TO (500)
	SERVER postgres_srv OPTIONS (table_name 'fprt2_p2', use_remote_estimate 'true');
ANALYZE fprt2;
ANALYZE ftprt2_p1;
WARNING:  skipping "ftprt2_p1" --- cannot analyze this foreign table
ANALYZE ftprt2_p2;
WARNING:  skipping "ftprt2_p2" --- cannot analyze this foreign table
-- inner join three tables
EXPLAIN (COSTS OFF)
SELECT t1.a,t2.b,t3.c FROM fprt1 t1 INNER JOIN fprt2 t2 ON (t1.a = t2.b) INNER JOIN fprt1 t3 ON (t2.b = t3.a) WHERE t1.a % 25 =0 ORDER BY 1,2,3;
                                                                           QUERY PLAN                                                                            
-----------------------------------------------------------------------------------------------------------------------------------------------------------------
 Merge Append
   Sort Key: t1.a, t3.c
   ->  Foreign Scan
         Relations: ((public.ftprt1_p1__postgres_srv__0 t1) INNER JOIN (public.ftprt2_p1__postgres_srv__0 t2)) INNER JOIN (public.ftprt1_p1__postgres_srv__0 t3)
   ->  Foreign Scan
         Relations: ((public.ftprt1_p2__postgres_srv__0 t1) INNER JOIN (public.ftprt2_p2__postgres_srv__0 t2)) INNER JOIN (public.ftprt1_p2__postgres_srv__0 t3)
(6 rows)

SELECT t1.a,t2.b,t3.c FROM fprt1 t1 INNER JOIN fprt2 t2 ON (t1.a = t2.b) INNER JOIN fprt1 t3 ON (t2.b = t3.a) WHERE t1.a % 25 =0 ORDER BY 1,2,3;
  a  |  b  |  c   
-----+-----+------
   0 |   0 | 0000
 150 | 150 | 0003
 250 | 250 | 0005
 400 | 400 | 0008
(4 rows)

-- left outer join + nullable clause
EXPLAIN (VERBOSE, COSTS OFF)
SELECT t1.a,t2.b,t2.c FROM fprt1 t1 LEFT JOIN (SELECT * FROM fprt2 WHERE a < 10) t2 ON (t1.a = t2.b and t1.b = t2.a) WHERE t1.a < 10 ORDER BY 1,2,3;
                                                                                                                     QUERY PLAN                                                                                                                     
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Foreign Scan
   Output: t1.a, ftprt2_p1__postgres_srv__0.b, ftprt2_p1__postgres_srv__0.c
   Relations: (public.ftprt1_p1__postgres_srv__0 t1) LEFT JOIN (public.ftprt2_p1__postgres_srv__0 fprt2)
   Remote SQL: SELECT r5.a, r6.b, r6.c FROM (public.fprt1_p1 r5 LEFT JOIN public.fprt2_p1 r6 ON (((r5.a = r6.b)) AND ((r5.b = r6.a)) AND ((r6.a < 10)))) WHERE ((r5.a < 10)) ORDER BY r5.a ASC NULLS LAST, r6.b ASC NULLS LAST, r6.c ASC NULLS LAST
(4 rows)

SELECT t1.a,t2.b,t2.c FROM fprt1 t1 LEFT JOIN (SELECT * FROM fprt2 WHERE a < 10) t2 ON (t1.a = t2.b and t1.b = t2.a) WHERE t1.a < 10 ORDER BY 1,2,3;
 a | b |  c   
---+---+------
 0 | 0 | 0000
 2 |   | 
 4 |   | 
 6 | 6 | 0000
 8 |   | 
(5 rows)

-- with whole-row reference; partitionwise join does not apply
EXPLAIN (COSTS OFF)
SELECT t1.wr, t2.wr FROM (SELECT t1 wr, a FROM fprt1 t1 WHERE t1.a % 25 = 0) t1 FULL JOIN (SELECT t2 wr, b FROM fprt2 t2 WHERE t2.b % 25 = 0) t2 ON (t1.a = t2.b) ORDER BY 1,2;
                               QUERY PLAN                                
-------------------------------------------------------------------------
 Sort
   Sort Key: ((t1.*)::fprt1), ((t2.*)::fprt2)
   ->  Hash Full Join
         Hash Cond: (t2.b = t1.a)
         ->  Append
               ->  Foreign Scan on ftprt2_p1__postgres_srv__0 t2
               ->  Foreign Scan on ftprt2_p2__postgres_srv__0 t2_1
         ->  Hash
               ->  Append
                     ->  Foreign Scan on ftprt1_p1__postgres_srv__0 t1
                     ->  Foreign Scan on ftprt1_p2__postgres_srv__0 t1_1
(11 rows)

SELECT t1.wr, t2.wr FROM (SELECT t1 wr, a FROM fprt1 t1 WHERE t1.a % 25 = 0) t1 FULL JOIN (SELECT t2 wr, b FROM fprt2 t2 WHERE t2.b % 25 = 0) t2 ON (t1.a = t2.b) ORDER BY 1,2;
       wr       |       wr       
----------------+----------------
 (0,0,0000)     | (0,0,0000)
 (50,50,0001)   | 
 (100,100,0002) | 
 (150,150,0003) | (150,150,0003)
 (200,200,0004) | 
 (250,250,0005) | (250,250,0005)
 (300,300,0006) | 
 (350,350,0007) | 
 (400,400,0008) | (400,400,0008)
 (450,450,0009) | 
                | (75,75,0001)
                | (225,225,0004)
                | (325,325,0006)
                | (475,475,0009)
(14 rows)

-- join with lateral reference
EXPLAIN (COSTS OFF)
SELECT t1.a,t1.b FROM fprt1 t1, LATERAL (SELECT t2.a, t2.b FROM fprt2 t2 WHERE t1.a = t2.b AND t1.b = t2.a) q WHERE t1.a%25 = 0 ORDER BY 1,2;
                                                    QUERY PLAN                                                     
-------------------------------------------------------------------------------------------------------------------
 Sort
   Sort Key: t1.a, t1.b
   ->  Append
         ->  Foreign Scan
               Relations: (public.ftprt1_p1__postgres_srv__0 t1) INNER JOIN (public.ftprt2_p1__postgres_srv__0 t2)
         ->  Foreign Scan
               Relations: (public.ftprt1_p2__postgres_srv__0 t1) INNER JOIN (public.ftprt2_p2__postgres_srv__0 t2)
(7 rows)

SELECT t1.a,t1.b FROM fprt1 t1, LATERAL (SELECT t2.a, t2.b FROM fprt2 t2 WHERE t1.a = t2.b AND t1.b = t2.a) q WHERE t1.a%25 = 0 ORDER BY 1,2;
  a  |  b  
-----+-----
   0 |   0
 150 | 150
 250 | 250
 400 | 400
(4 rows)

-- with PHVs, partitionwise join selected but no join pushdown
EXPLAIN (COSTS OFF)
SELECT t1.a, t1.phv, t2.b, t2.phv FROM (SELECT 't1_phv' phv, * FROM fprt1 WHERE a % 25 = 0) t1 FULL JOIN (SELECT 't2_phv' phv, * FROM fprt2 WHERE b % 25 = 0) t2 ON (t1.a = t2.b) ORDER BY t1.a, t2.b;
                                       QUERY PLAN                                       
----------------------------------------------------------------------------------------
 Sort
   Sort Key: ftprt1_p1__postgres_srv__0.a, ftprt2_p1__postgres_srv__0.b
   ->  Append
         ->  Hash Full Join
               Hash Cond: (ftprt1_p1__postgres_srv__0.a = ftprt2_p1__postgres_srv__0.b)
               ->  Foreign Scan on ftprt1_p1__postgres_srv__0
               ->  Hash
                     ->  Foreign Scan on ftprt2_p1__postgres_srv__0
         ->  Hash Full Join
               Hash Cond: (ftprt2_p2__postgres_srv__0.b = ftprt1_p2__postgres_srv__0.a)
               ->  Foreign Scan on ftprt2_p2__postgres_srv__0
               ->  Hash
                     ->  Foreign Scan on ftprt1_p2__postgres_srv__0
(13 rows)

SELECT t1.a, t1.phv, t2.b, t2.phv FROM (SELECT 't1_phv' phv, * FROM fprt1 WHERE a % 25 = 0) t1 FULL JOIN (SELECT 't2_phv' phv, * FROM fprt2 WHERE b % 25 = 0) t2 ON (t1.a = t2.b) ORDER BY t1.a, t2.b;
  a  |  phv   |  b  |  phv   
-----+--------+-----+--------
   0 | t1_phv |   0 | t2_phv
  50 | t1_phv |     | 
 100 | t1_phv |     | 
 150 | t1_phv | 150 | t2_phv
 200 | t1_phv |     | 
 250 | t1_phv | 250 | t2_phv
 300 | t1_phv |     | 
 350 | t1_phv |     | 
 400 | t1_phv | 400 | t2_phv
 450 | t1_phv |     | 
     |        |  75 | t2_phv
     |        | 225 | t2_phv
     |        | 325 | t2_phv
     |        | 475 | t2_phv
(14 rows)

-- test FOR UPDATE; partitionwise join does not apply
EXPLAIN (COSTS OFF)
SELECT t1.a, t2.b FROM fprt1 t1 INNER JOIN fprt2 t2 ON (t1.a = t2.b) WHERE t1.a % 25 = 0 ORDER BY 1,2 FOR UPDATE OF t1;
                                  QUERY PLAN                                   
-------------------------------------------------------------------------------
 LockRows
   ->  Sort
         Sort Key: t1.a
         ->  Hash Join
               Hash Cond: (t2.b = t1.a)
               ->  Append
                     ->  Foreign Scan on ftprt2_p1__postgres_srv__0 t2
                     ->  Foreign Scan on ftprt2_p2__postgres_srv__0 t2_1
               ->  Hash
                     ->  Append
                           ->  Foreign Scan on ftprt1_p1__postgres_srv__0 t1
                           ->  Foreign Scan on ftprt1_p2__postgres_srv__0 t1_1
(12 rows)

SELECT t1.a, t2.b FROM fprt1 t1 INNER JOIN fprt2 t2 ON (t1.a = t2.b) WHERE t1.a % 25 = 0 ORDER BY 1,2 FOR UPDATE OF t1;
  a  |  b  
-----+-----
   0 |   0
 150 | 150
 250 | 250
 400 | 400
(4 rows)

RESET enable_partitionwise_join;
-- ===================================================================
-- test partitionwise aggregates
-- ===================================================================
CREATE TABLE pagg_tab (a int, b int, c text) PARTITION BY RANGE(a);
/* Move these lines to init database file */
-- CREATE TABLE pagg_tab_p1 (LIKE pagg_tab);
-- CREATE TABLE pagg_tab_p2 (LIKE pagg_tab);
-- CREATE TABLE pagg_tab_p3 (LIKE pagg_tab);
-- INSERT INTO pagg_tab_p1 SELECT i % 30, i % 50, to_char(i/30, 'FM0000') FROM generate_series(1, 3000) i WHERE (i % 30) < 10;
-- INSERT INTO pagg_tab_p2 SELECT i % 30, i % 50, to_char(i/30, 'FM0000') FROM generate_series(1, 3000) i WHERE (i % 30) < 20 and (i % 30) >= 10;
-- INSERT INTO pagg_tab_p3 SELECT i % 30, i % 50, to_char(i/30, 'FM0000') FROM generate_series(1, 3000) i WHERE (i % 30) < 30 and (i % 30) >= 20;
-- Create foreign table on pgspider node
CREATE FOREIGN TABLE fpagg_tab_p1 (a int, b int, c text, __spd_url text) SERVER pgspider_srv;
CREATE FOREIGN TABLE fpagg_tab_p2 (a int, b int, c text, __spd_url text) SERVER pgspider_srv;
CREATE FOREIGN TABLE fpagg_tab_p3 (a int, b int, c text, __spd_url text) SERVER pgspider_srv;
-- Create foreign partitions
CREATE FOREIGN TABLE fpagg_tab_p1__postgres_srv__0 PARTITION OF pagg_tab FOR VALUES FROM (0) TO (10) SERVER postgres_srv OPTIONS (table_name 'pagg_tab_p1');
CREATE FOREIGN TABLE fpagg_tab_p2__postgres_srv__0 PARTITION OF pagg_tab FOR VALUES FROM (10) TO (20) SERVER postgres_srv OPTIONS (table_name 'pagg_tab_p2');;
CREATE FOREIGN TABLE fpagg_tab_p3__postgres_srv__0 PARTITION OF pagg_tab FOR VALUES FROM (20) TO (30) SERVER postgres_srv OPTIONS (table_name 'pagg_tab_p3');;
ANALYZE pagg_tab;
ANALYZE fpagg_tab_p1;
WARNING:  skipping "fpagg_tab_p1" --- cannot analyze this foreign table
ANALYZE fpagg_tab_p2;
WARNING:  skipping "fpagg_tab_p2" --- cannot analyze this foreign table
ANALYZE fpagg_tab_p3;
WARNING:  skipping "fpagg_tab_p3" --- cannot analyze this foreign table
-- When GROUP BY clause matches with PARTITION KEY.
-- Plan with partitionwise aggregates is disabled
SET enable_partitionwise_aggregate TO false;
EXPLAIN (COSTS OFF)
SELECT a, sum(b), min(b), count(*) FROM pagg_tab GROUP BY a HAVING avg(b) < 22 ORDER BY 1;
                               QUERY PLAN                               
------------------------------------------------------------------------
 Sort
   Sort Key: fpagg_tab_p1__postgres_srv__0.a
   ->  HashAggregate
         Group Key: fpagg_tab_p1__postgres_srv__0.a
         Filter: (avg(fpagg_tab_p1__postgres_srv__0.b) < '22'::numeric)
         ->  Append
               ->  Foreign Scan on fpagg_tab_p1__postgres_srv__0
               ->  Foreign Scan on fpagg_tab_p2__postgres_srv__0
               ->  Foreign Scan on fpagg_tab_p3__postgres_srv__0
(9 rows)

-- Plan with partitionwise aggregates is enabled
SET enable_partitionwise_aggregate TO true;
EXPLAIN (COSTS OFF)
SELECT a, sum(b), min(b), count(*) FROM pagg_tab GROUP BY a HAVING avg(b) < 22 ORDER BY 1;
                                      QUERY PLAN                                       
---------------------------------------------------------------------------------------
 Sort
   Sort Key: fpagg_tab_p1__postgres_srv__0.a
   ->  Append
         ->  Foreign Scan
               Relations: Aggregate on (public.fpagg_tab_p1__postgres_srv__0 pagg_tab)
         ->  Foreign Scan
               Relations: Aggregate on (public.fpagg_tab_p2__postgres_srv__0 pagg_tab)
         ->  Foreign Scan
               Relations: Aggregate on (public.fpagg_tab_p3__postgres_srv__0 pagg_tab)
(9 rows)

SELECT a, sum(b), min(b), count(*) FROM pagg_tab GROUP BY a HAVING avg(b) < 22 ORDER BY 1;
 a  | sum  | min | count 
----+------+-----+-------
  0 | 2000 |   0 |   100
  1 | 2100 |   1 |   100
 10 | 2000 |   0 |   100
 11 | 2100 |   1 |   100
 20 | 2000 |   0 |   100
 21 | 2100 |   1 |   100
(6 rows)

-- Check with whole-row reference
-- Should have all the columns in the target list for the given relation
EXPLAIN (VERBOSE, COSTS OFF)
SELECT a, count(t1) FROM pagg_tab t1 GROUP BY a HAVING avg(b) < 22 ORDER BY 1;
                                 QUERY PLAN                                  
-----------------------------------------------------------------------------
 Sort
   Output: t1.a, (count(((t1.*)::pagg_tab)))
   Sort Key: t1.a
   ->  Append
         ->  HashAggregate
               Output: t1.a, count(((t1.*)::pagg_tab))
               Group Key: t1.a
               Filter: (avg(t1.b) < '22'::numeric)
               ->  Foreign Scan on public.fpagg_tab_p1__postgres_srv__0 t1
                     Output: t1.a, t1.*, t1.b
                     Remote SQL: SELECT a, b, c FROM public.pagg_tab_p1
         ->  HashAggregate
               Output: t1_1.a, count(((t1_1.*)::pagg_tab))
               Group Key: t1_1.a
               Filter: (avg(t1_1.b) < '22'::numeric)
               ->  Foreign Scan on public.fpagg_tab_p2__postgres_srv__0 t1_1
                     Output: t1_1.a, t1_1.*, t1_1.b
                     Remote SQL: SELECT a, b, c FROM public.pagg_tab_p2
         ->  HashAggregate
               Output: t1_2.a, count(((t1_2.*)::pagg_tab))
               Group Key: t1_2.a
               Filter: (avg(t1_2.b) < '22'::numeric)
               ->  Foreign Scan on public.fpagg_tab_p3__postgres_srv__0 t1_2
                     Output: t1_2.a, t1_2.*, t1_2.b
                     Remote SQL: SELECT a, b, c FROM public.pagg_tab_p3
(25 rows)

SELECT a, count(t1) FROM pagg_tab t1 GROUP BY a HAVING avg(b) < 22 ORDER BY 1;
 a  | count 
----+-------
  0 |   100
  1 |   100
 10 |   100
 11 |   100
 20 |   100
 21 |   100
(6 rows)

-- When GROUP BY clause does not match with PARTITION KEY.
EXPLAIN (COSTS OFF)
SELECT b, avg(a), max(a), count(*) FROM pagg_tab GROUP BY b HAVING sum(a) < 700 ORDER BY 1;
                              QUERY PLAN                               
-----------------------------------------------------------------------
 Sort
   Sort Key: fpagg_tab_p1__postgres_srv__0.b
   ->  Finalize HashAggregate
         Group Key: fpagg_tab_p1__postgres_srv__0.b
         Filter: (sum(fpagg_tab_p1__postgres_srv__0.a) < 700)
         ->  Append
               ->  Partial HashAggregate
                     Group Key: fpagg_tab_p1__postgres_srv__0.b
                     ->  Foreign Scan on fpagg_tab_p1__postgres_srv__0
               ->  Partial HashAggregate
                     Group Key: fpagg_tab_p2__postgres_srv__0.b
                     ->  Foreign Scan on fpagg_tab_p2__postgres_srv__0
               ->  Partial HashAggregate
                     Group Key: fpagg_tab_p3__postgres_srv__0.b
                     ->  Foreign Scan on fpagg_tab_p3__postgres_srv__0
(15 rows)

-- Clean-up
RESET enable_partitionwise_aggregate;
